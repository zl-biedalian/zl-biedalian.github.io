(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var o,s,i=e[0],l=e[1],c=e[2],p=0,d=[];p<i.length;p++)s=i[p],Object.prototype.hasOwnProperty.call(r,s)&&r[s]&&d.push(r[s][0]),r[s]=0;for(o in l)Object.prototype.hasOwnProperty.call(l,o)&&(n[o]=l[o]);for(u&&u(e);d.length;)d.shift()();return a.push.apply(a,c||[]),t()}function t(){for(var n,e=0;e<a.length;e++){for(var t=a[e],o=!0,i=1;i<t.length;i++){var l=t[i];0!==r[l]&&(o=!1)}o&&(a.splice(e--,1),n=s(s.s=t[0]))}return n}var o={},r={1:0},a=[];function s(e){if(o[e])return o[e].exports;var t=o[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.e=function(n){var e=[],t=r[n];if(0!==t)if(t)e.push(t[2]);else{var o=new Promise((function(e,o){t=r[n]=[e,o]}));e.push(t[2]=o);var a,i=document.createElement("script");i.charset="utf-8",i.timeout=120,s.nc&&i.setAttribute("nonce",s.nc),i.src=function(n){return s.p+"assets/js/"+({}[n]||n)+"."+{2:"7d83501e",3:"e698f975",4:"ab898f5f",5:"e7a2e834",6:"0e33ec81",7:"4115f5e1",8:"3652c984",9:"5d06d064",10:"e240a3f3",11:"575cb3b0",12:"3ff991d5",13:"26c49407",14:"c6bbd5c7",15:"ddd33f09",16:"b50e0d90",17:"8b12949a",18:"78f9b568",19:"6c28fb1c",20:"c55312e1",21:"6240c172",22:"7a0531a9",23:"0e8e3223",24:"ae4b27cd",25:"267d5425",26:"0b7f1791",27:"ad9b7815",28:"01c71cdd",29:"a43249ca",30:"5946cdb6",31:"4ed5e15b",32:"a6c4036d",33:"32bd6b2e",34:"b352a9bb",35:"ba56cab8",36:"54dc1f48",37:"dd279648",38:"536ec31f"}[n]+".js"}(n);var l=new Error;a=function(e){i.onerror=i.onload=null,clearTimeout(c);var t=r[n];if(0!==t){if(t){var o=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+o+": "+a+")",l.name="ChunkLoadError",l.type=o,l.request=a,t[1](l)}r[n]=void 0}};var c=setTimeout((function(){a({type:"timeout",target:i})}),12e4);i.onerror=i.onload=a,document.head.appendChild(i)}return Promise.all(e)},s.m=n,s.c=o,s.d=function(n,e,t){s.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},s.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},s.t=function(n,e){if(1&e&&(n=s(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)s.d(t,o,function(e){return n[e]}.bind(null,o));return t},s.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return s.d(e,"a",e),e},s.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},s.p="/",s.oe=function(n){throw console.error(n),n};var i=window.webpackJsonp=window.webpackJsonp||[],l=i.push.bind(i);i.push=e,i=i.slice();for(var c=0;c<i.length;c++)e(i[c]);var u=l;a.push([100,0]),t()}([function(n,e){n.exports=function(n){return"function"==typeof n}},function(n,e,t){var o=t(25),r=Function.prototype,a=r.bind,s=r.call,i=o&&a.bind(s,s);n.exports=o?function(n){return n&&i(n)}:function(n){return n&&function(){return s.apply(n,arguments)}}},function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var o=t(67),r="object"==typeof self&&self&&self.Object===Object&&self,a=o||r||Function("return this")();n.exports=a},function(n,e,t){"use strict";function o(n,e,t,o,r,a,s,i){var l,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),o&&(c.functional=!0),a&&(c._scopeId="data-v-"+a),s?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),r&&r.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(s)},c._ssrRegister=l):r&&(l=i?function(){r.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:r),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(n,e){return l.call(e),u(n,e)}}else{var p=c.beforeCreate;c.beforeCreate=p?[].concat(p,l):[l]}return{exports:n,options:c}}t.d(e,"a",(function(){return o}))},function(n,e,t){var o=t(3);n.exports=!o((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e,t){var o=t(1),r=t(45),a=o({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return a(r(n),e)}},function(n,e,t){var o=t(0);n.exports=function(n){return"object"==typeof n?null!==n:o(n)}},function(n,e,t){var o=t(155),r=t(158);n.exports=function(n,e){var t=r(n,e);return o(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return o})),t.d(e,"b",(function(){return a})),t.d(e,"j",(function(){return s})),t.d(e,"g",(function(){return l})),t.d(e,"h",(function(){return c})),t.d(e,"i",(function(){return u})),t.d(e,"c",(function(){return p})),t.d(e,"f",(function(){return d})),t.d(e,"l",(function(){return f})),t.d(e,"m",(function(){return h})),t.d(e,"d",(function(){return g})),t.d(e,"k",(function(){return v})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return x}));const o=/#.*$/,r=/\.(md|html)$/,a=/\/$/,s=/^[a-z]+:/i;function i(n){return decodeURI(n).replace(o,"").replace(r,"")}function l(n){return s.test(n)}function c(n){return/^mailto:/.test(n)}function u(n){return/^tel:/.test(n)}function p(n){if(l(n))return n;if(!n)return"404";const e=n.match(o),t=e?e[0]:"",r=i(n);return a.test(r)?n:r+".html"+t}function d(n,e){const t=n.hash,r=function(n){const e=n&&n.match(o);if(e)return e[0]}(e);if(r&&t!==r)return!1;return i(n.path)===i(e)}function f(n,e,t){if(l(e))return{type:"external",path:e};t&&(e=function(n,e,t){const o=n.charAt(0);if("/"===o)return n;if("?"===o||"#"===o)return e+n;const r=e.split("/");t&&r[r.length-1]||r.pop();const a=n.replace(/^\//,"").split("/");for(let n=0;n<a.length;n++){const e=a[n];".."===e?r.pop():"."!==e&&r.push(e)}""!==r[0]&&r.unshift("");return r.join("/")}(e,t));const o=i(e);for(let e=0;e<n.length;e++)if(i(n[e].regularPath)===o)return Object.assign({},n[e],{type:"page",path:p(n[e].path)});return console.error(`[vuepress] No matching page found for sidebar item "${e}"`),{}}function h(n,e,t,o){const{pages:r,themeConfig:a}=t,s=o&&a.locales&&a.locales[o]||a;if("auto"===(n.frontmatter.sidebar||s.sidebar||a.sidebar))return m(n);const i=s.sidebar||a.sidebar;if(i){const{base:t,config:o}=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(const o in e)if(0===(t=n,/(\.html|\/)$/.test(t)?t:t+"/").indexOf(encodeURI(o)))return{base:o,config:e[o]};var t;return{}}(e,i);return"auto"===o?m(n):o?o.map(n=>function n(e,t,o,r=1){if("string"==typeof e)return f(t,e,o);if(Array.isArray(e))return Object.assign(f(t,e[0],o),{title:e[1]});{r>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const a=e.children||[];return 0===a.length&&e.path?Object.assign(f(t,e.path,o),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:a.map(e=>n(e,t,o,r+1)),collapsable:!1!==e.collapsable}}}(n,r,t)):[]}return[]}function m(n){const e=g(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map(e=>({type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}))}]}function g(n){let e;return(n=n.map(n=>Object.assign({},n))).forEach(n=>{2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)}),n.filter(n=>2===n.level)}function v(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function y(n){let e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function x(n,e){return y(e)-y(n)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var o=t(14),r=t(140),a=t(141),s=o?o.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":s&&s in Object(n)?r(n):a(n)}},function(n,e,t){var o=t(5).Symbol;n.exports=o},function(n,e,t){var o=t(7),r=t(61),a=t(96),s=t(24),i=t(52),l=TypeError,c=Object.defineProperty,u=Object.getOwnPropertyDescriptor;e.f=o?a?function(n,e,t){if(s(n),e=i(e),s(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var o=u(n,e);o&&o.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:o.configurable,enumerable:"enumerable"in t?t.enumerable:o.enumerable,writable:!1})}return c(n,e,t)}:c:function(n,e,t){if(s(n),e=i(e),s(t),r)try{return c(n,e,t)}catch(n){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var o=t(2),r=t(0),a=function(n){return r(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?a(o[n]):o[n]&&o[n][e]}},function(n,e,t){var o=t(7),r=t(15),a=t(29);n.exports=o?function(n,e,t){return r.f(n,e,a(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var o=t(145),r=t(146),a=t(147),s=t(148),i=t(149);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var o=n[e];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=r,l.prototype.get=a,l.prototype.has=s,l.prototype.set=i,n.exports=l},function(n,e,t){var o=t(69);n.exports=function(n,e){for(var t=n.length;t--;)if(o(n[t][0],e))return t;return-1}},function(n,e,t){var o=t(10)(Object,"create");n.exports=o},function(n,e,t){var o=t(167);n.exports=function(n,e){var t=n.__data__;return o(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var o=t(40);n.exports=function(n){if("string"==typeof n||o(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var o,r;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(r="function"==typeof(o=function(){var n,e,t={version:"0.2.0"},o=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function r(n,e,t){return n<e?e:n>t?t:n}function a(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(o[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=r(n,o.minimum,1),t.status=1===n?null:n;var l=t.render(!e),c=l.querySelector(o.barSelector),u=o.speed,p=o.easing;return l.offsetWidth,s((function(e){""===o.positionUsing&&(o.positionUsing=t.getPositioningCSS()),i(c,function(n,e,t){var r;return(r="translate3d"===o.positionUsing?{transform:"translate3d("+a(n)+"%,0,0)"}:"translate"===o.positionUsing?{transform:"translate("+a(n)+"%,0)"}:{"margin-left":a(n)+"%"}).transition="all "+e+"ms "+t,r}(n,u,p)),1===n?(i(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){i(l,{transition:"all "+u+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),u)}),u)):setTimeout(e,u)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),o.trickleSpeed)};return o.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*r(Math.random()*e,.1,.95)),e=r(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*o.trickleRate)},n=0,e=0,t.promise=function(o){return o&&"resolved"!==o.state()?(0===e&&t.start(),n++,e++,o.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=o.template;var r,s=e.querySelector(o.barSelector),l=n?"-100":a(t.status||0),u=document.querySelector(o.parent);return i(s,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),o.showSpinner||(r=e.querySelector(o.spinnerSelector))&&d(r),u!=document.body&&c(u,"nprogress-custom-parent"),u.appendChild(e),e},t.remove=function(){u(document.documentElement,"nprogress-busy"),u(document.querySelector(o.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&d(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var s=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),i=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var o,r=n.length,a=e.charAt(0).toUpperCase()+e.slice(1);r--;)if((o=n[r]+a)in t)return o;return e}(t))}function o(n,e,o){e=t(e),n.style[e]=o}return function(n,e){var t,r,a=arguments;if(2==a.length)for(t in e)void 0!==(r=e[t])&&e.hasOwnProperty(t)&&o(n,t,r);else o(n,a[1],a[2])}}();function l(n,e){return("string"==typeof n?n:p(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=p(n),o=t+e;l(t,e)||(n.className=o.substring(1))}function u(n,e){var t,o=p(n);l(n,e)&&(t=o.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function p(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function d(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?o.call(e,t,e,n):o)||(n.exports=r)},function(n,e,t){var o=t(9),r=String,a=TypeError;n.exports=function(n){if(o(n))return n;throw a(r(n)+" is not an object")}},function(n,e,t){var o=t(3);n.exports=!o((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){var o=t(43),r=t(51);n.exports=function(n){return o(r(n))}},function(n,e,t){var o=t(2),r=t(58),a=t(8),s=t(60),i=t(56),l=t(55),c=r("wks"),u=o.Symbol,p=u&&u.for,d=l?u:u&&u.withoutSetter||s;n.exports=function(n){if(!a(c,n)||!i&&"string"!=typeof c[n]){var e="Symbol."+n;i&&a(u,n)?c[n]=u[n]:c[n]=l&&p?p(e):d(e)}return c[n]}},function(n,e,t){var o=t(25),r=Function.prototype.call;n.exports=o?r.bind(r):function(){return r.apply(r,arguments)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){var o=t(1),r=o({}.toString),a=o("".slice);n.exports=function(n){return a(r(n),8,-1)}},function(n,e,t){var o=t(2),r=t(32),a=o["__core-js_shared__"]||r("__core-js_shared__",{});n.exports=a},function(n,e,t){var o=t(2),r=Object.defineProperty;n.exports=function(n,e){try{r(o,n,{value:e,configurable:!0,writable:!0})}catch(t){o[n]=e}return e}},function(n,e,t){var o=t(139),r=t(12),a=Object.prototype,s=a.hasOwnProperty,i=a.propertyIsEnumerable,l=o(function(){return arguments}())?o:function(n){return r(n)&&s.call(n,"callee")&&!i.call(n,"callee")};n.exports=l},function(n,e,t){var o=t(10)(t(5),"Map");n.exports=o},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var o=t(159),r=t(166),a=t(168),s=t(169),i=t(170);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var o=n[e];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=r,l.prototype.get=a,l.prototype.has=s,l.prototype.set=i,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var o=t(4),r=t(40),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,s=/^\w*$/;n.exports=function(n,e){if(o(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!r(n))||(s.test(n)||!a.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var o=t(13),r=t(12);n.exports=function(n){return"symbol"==typeof n||r(n)&&"[object Symbol]"==o(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){var o=t(2),r=t(50).f,a=t(17),s=t(108),i=t(32),l=t(63),c=t(120);n.exports=function(n,e){var t,u,p,d,f,h=n.target,m=n.global,g=n.stat;if(t=m?o:g?o[h]||i(h,{}):(o[h]||{}).prototype)for(u in e){if(d=e[u],p=n.dontCallGetSet?(f=r(t,u))&&f.value:t[u],!c(m?u:h+(g?".":"#")+u,n.forced)&&void 0!==p){if(typeof d==typeof p)continue;l(d,p)}(n.sham||p&&p.sham)&&a(d,"sham",!0),s(t,u,d,n)}}},function(n,e,t){var o=t(1),r=t(3),a=t(30),s=Object,i=o("".split);n.exports=r((function(){return!s("z").propertyIsEnumerable(0)}))?function(n){return"String"==a(n)?i(n,""):s(n)}:s},function(n,e,t){var o=t(0),r=t(106),a=TypeError;n.exports=function(n){if(o(n))return n;throw a(r(n)+" is not a function")}},function(n,e,t){var o=t(51),r=Object;n.exports=function(n){return r(o(n))}},function(n,e){n.exports={}},function(n,e,t){var o=t(118);n.exports=function(n){return o(n.length)}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,r=/^0b[01]+$/i,a=/^0o[0-7]+$/i,s=parseInt,i="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=i||l||Function("return this")(),u=Object.prototype.toString,p=Math.max,d=Math.min,f=function(){return c.Date.now()};function h(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function m(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==u.call(n)}(n))return NaN;if(h(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=h(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var i=r.test(n);return i||a.test(n)?s(n.slice(2),i?2:8):o.test(n)?NaN:+n}n.exports=function(n,e,t){var o,r,a,s,i,l,c=0,u=!1,g=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=o,a=r;return o=r=void 0,c=e,s=n.apply(a,t)}function y(n){return c=n,i=setTimeout(w,e),u?b(n):s}function x(n){var t=n-l;return void 0===l||t>=e||t<0||g&&n-c>=a}function w(){var n=f();if(x(n))return j(n);i=setTimeout(w,function(n){var t=e-(n-l);return g?d(t,a-(n-c)):t}(n))}function j(n){return i=void 0,v&&o?b(n):(o=r=void 0,s)}function k(){var n=f(),t=x(n);if(o=arguments,r=this,l=n,t){if(void 0===i)return y(l);if(g)return i=setTimeout(w,e),b(l)}return void 0===i&&(i=setTimeout(w,e)),s}return e=m(e)||0,h(t)&&(u=!!t.leading,a=(g="maxWait"in t)?p(m(t.maxWait)||0,e):a,v="trailing"in t?!!t.trailing:v),k.cancel=function(){void 0!==i&&clearTimeout(i),c=0,o=l=r=i=void 0},k.flush=function(){return void 0===i?s:j(f())},k}},function(n,e,t){var o=t(7),r=t(28),a=t(102),s=t(29),i=t(26),l=t(52),c=t(8),u=t(61),p=Object.getOwnPropertyDescriptor;e.f=o?p:function(n,e){if(n=i(n),e=l(e),u)try{return p(n,e)}catch(n){}if(c(n,e))return s(!r(a.f,n,e),n[e])}},function(n,e){var t=TypeError;n.exports=function(n){if(null==n)throw t("Can't call method on "+n);return n}},function(n,e,t){var o=t(103),r=t(53);n.exports=function(n){var e=o(n,"string");return r(e)?e:e+""}},function(n,e,t){var o=t(16),r=t(0),a=t(54),s=t(55),i=Object;n.exports=s?function(n){return"symbol"==typeof n}:function(n){var e=o("Symbol");return r(e)&&a(e.prototype,i(n))}},function(n,e,t){var o=t(1);n.exports=o({}.isPrototypeOf)},function(n,e,t){var o=t(56);n.exports=o&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var o=t(57),r=t(3);n.exports=!!Object.getOwnPropertySymbols&&!r((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&o&&o<41}))},function(n,e,t){var o,r,a=t(2),s=t(104),i=a.process,l=a.Deno,c=i&&i.versions||l&&l.version,u=c&&c.v8;u&&(r=(o=u.split("."))[0]>0&&o[0]<4?1:+(o[0]+o[1])),!r&&s&&(!(o=s.match(/Edge\/(\d+)/))||o[1]>=74)&&(o=s.match(/Chrome\/(\d+)/))&&(r=+o[1]),n.exports=r},function(n,e,t){var o=t(59),r=t(31);(n.exports=function(n,e){return r[n]||(r[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.24.1",mode:o?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.24.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e){n.exports=!1},function(n,e,t){var o=t(1),r=0,a=Math.random(),s=o(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+s(++r+a,36)}},function(n,e,t){var o=t(7),r=t(3),a=t(95);n.exports=!o&&!r((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var o=t(1),r=t(0),a=t(31),s=o(Function.toString);r(a.inspectSource)||(a.inspectSource=function(n){return s(n)}),n.exports=a.inspectSource},function(n,e,t){var o=t(8),r=t(113),a=t(50),s=t(15);n.exports=function(n,e,t){for(var i=r(e),l=s.f,c=a.f,u=0;u<i.length;u++){var p=i[u];o(n,p)||t&&o(t,p)||l(n,p,c(e,p))}}},function(n,e,t){var o=t(117);n.exports=function(n){var e=+n;return e!=e||0===e?0:o(e)}},function(n,e,t){var o=t(1),r=t(24),a=t(127);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=o(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),e=t instanceof Array}catch(n){}return function(t,o){return r(t),a(o),e?n(t,o):t.__proto__=o,t}}():void 0)},function(n,e){n.exports=function(n,e){for(var t=-1,o=e.length,r=n.length;++t<o;)n[r+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var o=t(18),r=t(150),a=t(151),s=t(152),i=t(153),l=t(154);function c(n){var e=this.__data__=new o(n);this.size=e.size}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=s,c.prototype.has=i,c.prototype.set=l,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var o=t(13),r=t(35);n.exports=function(n){if(!r(n))return!1;var e=o(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var o=t(171),r=t(12);n.exports=function n(e,t,a,s,i){return e===t||(null==e||null==t||!r(e)&&!r(t)?e!=e&&t!=t:o(e,t,a,s,n,i))}},function(n,e,t){var o=t(74),r=t(174),a=t(75);n.exports=function(n,e,t,s,i,l){var c=1&t,u=n.length,p=e.length;if(u!=p&&!(c&&p>u))return!1;var d=l.get(n),f=l.get(e);if(d&&f)return d==e&&f==n;var h=-1,m=!0,g=2&t?new o:void 0;for(l.set(n,e),l.set(e,n);++h<u;){var v=n[h],b=e[h];if(s)var y=c?s(b,v,h,e,n,l):s(v,b,h,n,e,l);if(void 0!==y){if(y)continue;m=!1;break}if(g){if(!r(e,(function(n,e){if(!a(g,e)&&(v===n||i(v,n,t,s,l)))return g.push(e)}))){m=!1;break}}else if(v!==b&&!i(v,b,t,s,l)){m=!1;break}}return l.delete(n),l.delete(e),m}},function(n,e,t){var o=t(36),r=t(172),a=t(173);function s(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new o;++e<t;)this.add(n[e])}s.prototype.add=s.prototype.push=r,s.prototype.has=a,n.exports=s},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var o=t(184),r=t(190),a=t(80);n.exports=function(n){return a(n)?o(n):r(n)}},function(n,e,t){(function(n){var o=t(5),r=t(186),a=e&&!e.nodeType&&e,s=a&&"object"==typeof n&&n&&!n.nodeType&&n,i=s&&s.exports===a?o.Buffer:void 0,l=(i?i.isBuffer:void 0)||r;n.exports=l}).call(this,t(48)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var o=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==o||"symbol"!=o&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var o=t(187),r=t(188),a=t(189),s=a&&a.isTypedArray,i=s?r(s):o;n.exports=i},function(n,e,t){var o=t(70),r=t(38);n.exports=function(n){return null!=n&&r(n.length)&&!o(n)}},function(n,e,t){var o=t(10)(t(5),"Set");n.exports=o},function(n,e,t){var o=t(35);n.exports=function(n){return n==n&&!o(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var o=t(85),r=t(22);n.exports=function(n,e){for(var t=0,a=(e=o(e,n)).length;null!=n&&t<a;)n=n[r(e[t++])];return t&&t==a?n:void 0}},function(n,e,t){var o=t(4),r=t(39),a=t(201),s=t(204);n.exports=function(n,e){return o(n)?n:r(n,e)?[n]:a(s(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var o=t(137),r=t(142),a=t(213),s=t(221),i=t(230),l=t(99),c=a((function(n){var e=l(n);return i(e)&&(e=void 0),s(o(n,1,i,!0),r(e,2))}));n.exports=c},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var o=/["'&<>]/;n.exports=function(n){var e,t=""+n,r=o.exec(t);if(!r)return t;var a="",s=0,i=0;for(s=r.index;s<t.length;s++){switch(t.charCodeAt(s)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}i!==s&&(a+=t.substring(i,s)),i=s+1,a+=e}return i!==s?a+t.substring(i,s):a}},function(n,e,t){"use strict";t.r(e);var o={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},r=(t(233),t(6)),a=Object(r.a)(o,(function(){return(0,this._self._c)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=a.exports},function(n,e,t){"use strict";t.r(e);var o={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(n){this.codeTabs.forEach(n=>{n.elm.classList.remove("theme-code-block__active")}),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(n=>Boolean(n.componentOptions)).map((n,e)=>(""===n.componentOptions.propsData.active&&(this.activeCodeTabIndex=e),{title:n.componentOptions.propsData.title,elm:n.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(n){this.activeCodeTabIndex=n}}},r=(t(234),t(6)),a=Object(r.a)(o,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"theme-code-group"},[e("div",{staticClass:"theme-code-group__nav"},[e("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(t,o){return e("li",{key:t.title,staticClass:"theme-code-group__li"},[e("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":o===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(o)}}},[n._v("\n            "+n._s(t.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?e("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=a.exports},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){var o=t(2),r=t(9),a=o.document,s=r(a)&&r(a.createElement);n.exports=function(n){return s?a.createElement(n):{}}},function(n,e,t){var o=t(7),r=t(3);n.exports=o&&r((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var o=t(58),r=t(60),a=o("keys");n.exports=function(n){return a[n]||(a[n]=r(n))}},function(n,e,t){var o=t(1),r=t(8),a=t(26),s=t(115).indexOf,i=t(46),l=o([].push);n.exports=function(n,e){var t,o=a(n),c=0,u=[];for(t in o)!r(i,t)&&r(o,t)&&l(u,t);for(;e.length>c;)r(o,t=e[c++])&&(~s(u,t)||l(u,t));return u}},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(239)},function(n,e,t){"use strict";var o=t(42),r=t(121).left,a=t(122),s=t(57),i=t(123);o({target:"Array",proto:!0,forced:!a("reduce")||!i&&s>79&&s<83},{reduce:function(n){var e=arguments.length;return r(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var o={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,a=r&&!o.call({1:2},1);e.f=a?function(n){var e=r(this,n);return!!e&&e.enumerable}:o},function(n,e,t){var o=t(28),r=t(9),a=t(53),s=t(105),i=t(107),l=t(27),c=TypeError,u=l("toPrimitive");n.exports=function(n,e){if(!r(n)||a(n))return n;var t,l=s(n,u);if(l){if(void 0===e&&(e="default"),t=o(l,n,e),!r(t)||a(t))return t;throw c("Can't convert object to primitive value")}return void 0===e&&(e="number"),i(n,e)}},function(n,e,t){var o=t(16);n.exports=o("navigator","userAgent")||""},function(n,e,t){var o=t(44);n.exports=function(n,e){var t=n[e];return null==t?void 0:o(t)}},function(n,e){var t=String;n.exports=function(n){try{return t(n)}catch(n){return"Object"}}},function(n,e,t){var o=t(28),r=t(0),a=t(9),s=TypeError;n.exports=function(n,e){var t,i;if("string"===e&&r(t=n.toString)&&!a(i=o(t,n)))return i;if(r(t=n.valueOf)&&!a(i=o(t,n)))return i;if("string"!==e&&r(t=n.toString)&&!a(i=o(t,n)))return i;throw s("Can't convert object to primitive value")}},function(n,e,t){var o=t(0),r=t(15),a=t(109),s=t(32);n.exports=function(n,e,t,i){i||(i={});var l=i.enumerable,c=void 0!==i.name?i.name:e;if(o(t)&&a(t,c,i),i.global)l?n[e]=t:s(e,t);else{try{i.unsafe?n[e]&&(l=!0):delete n[e]}catch(n){}l?n[e]=t:r.f(n,e,{value:t,enumerable:!1,configurable:!i.nonConfigurable,writable:!i.nonWritable})}return n}},function(n,e,t){var o=t(3),r=t(0),a=t(8),s=t(7),i=t(110).CONFIGURABLE,l=t(62),c=t(111),u=c.enforce,p=c.get,d=Object.defineProperty,f=s&&!o((function(){return 8!==d((function(){}),"length",{value:8}).length})),h=String(String).split("String"),m=n.exports=function(n,e,t){"Symbol("===String(e).slice(0,7)&&(e="["+String(e).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!a(n,"name")||i&&n.name!==e)&&(s?d(n,"name",{value:e,configurable:!0}):n.name=e),f&&t&&a(t,"arity")&&n.length!==t.arity&&d(n,"length",{value:t.arity});try{t&&a(t,"constructor")&&t.constructor?s&&d(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var o=u(n);return a(o,"source")||(o.source=h.join("string"==typeof e?e:"")),n};Function.prototype.toString=m((function(){return r(this)&&p(this).source||l(this)}),"toString")},function(n,e,t){var o=t(7),r=t(8),a=Function.prototype,s=o&&Object.getOwnPropertyDescriptor,i=r(a,"name"),l=i&&"something"===function(){}.name,c=i&&(!o||o&&s(a,"name").configurable);n.exports={EXISTS:i,PROPER:l,CONFIGURABLE:c}},function(n,e,t){var o,r,a,s=t(112),i=t(2),l=t(1),c=t(9),u=t(17),p=t(8),d=t(31),f=t(97),h=t(46),m=i.TypeError,g=i.WeakMap;if(s||d.state){var v=d.state||(d.state=new g),b=l(v.get),y=l(v.has),x=l(v.set);o=function(n,e){if(y(v,n))throw new m("Object already initialized");return e.facade=n,x(v,n,e),e},r=function(n){return b(v,n)||{}},a=function(n){return y(v,n)}}else{var w=f("state");h[w]=!0,o=function(n,e){if(p(n,w))throw new m("Object already initialized");return e.facade=n,u(n,w,e),e},r=function(n){return p(n,w)?n[w]:{}},a=function(n){return p(n,w)}}n.exports={set:o,get:r,has:a,enforce:function(n){return a(n)?r(n):o(n,{})},getterFor:function(n){return function(e){var t;if(!c(e)||(t=r(e)).type!==n)throw m("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){var o=t(2),r=t(0),a=t(62),s=o.WeakMap;n.exports=r(s)&&/native code/.test(a(s))},function(n,e,t){var o=t(16),r=t(1),a=t(114),s=t(119),i=t(24),l=r([].concat);n.exports=o("Reflect","ownKeys")||function(n){var e=a.f(i(n)),t=s.f;return t?l(e,t(n)):e}},function(n,e,t){var o=t(98),r=t(94).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return o(n,r)}},function(n,e,t){var o=t(26),r=t(116),a=t(47),s=function(n){return function(e,t,s){var i,l=o(e),c=a(l),u=r(s,c);if(n&&t!=t){for(;c>u;)if((i=l[u++])!=i)return!0}else for(;c>u;u++)if((n||u in l)&&l[u]===t)return n||u||0;return!n&&-1}};n.exports={includes:s(!0),indexOf:s(!1)}},function(n,e,t){var o=t(64),r=Math.max,a=Math.min;n.exports=function(n,e){var t=o(n);return t<0?r(t+e,0):a(t,e)}},function(n,e){var t=Math.ceil,o=Math.floor;n.exports=Math.trunc||function(n){var e=+n;return(e>0?o:t)(e)}},function(n,e,t){var o=t(64),r=Math.min;n.exports=function(n){return n>0?r(o(n),9007199254740991):0}},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var o=t(3),r=t(0),a=/#|\.prototype\./,s=function(n,e){var t=l[i(n)];return t==u||t!=c&&(r(e)?o(e):!!e)},i=s.normalize=function(n){return String(n).replace(a,".").toLowerCase()},l=s.data={},c=s.NATIVE="N",u=s.POLYFILL="P";n.exports=s},function(n,e,t){var o=t(44),r=t(45),a=t(43),s=t(47),i=TypeError,l=function(n){return function(e,t,l,c){o(t);var u=r(e),p=a(u),d=s(u),f=n?d-1:0,h=n?-1:1;if(l<2)for(;;){if(f in p){c=p[f],f+=h;break}if(f+=h,n?f<0:d<=f)throw i("Reduce of empty array with no initial value")}for(;n?f>=0:d>f;f+=h)f in p&&(c=t(c,p[f],f,u));return c}};n.exports={left:l(!1),right:l(!0)}},function(n,e,t){"use strict";var o=t(3);n.exports=function(n,e){var t=[][n];return!!t&&o((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){var o=t(30),r=t(2);n.exports="process"==o(r.process)},function(n,e,t){var o=t(42),r=t(2),a=t(125),s=t(126),i=r.WebAssembly,l=7!==Error("e",{cause:7}).cause,c=function(n,e){var t={};t[n]=s(n,e,l),o({global:!0,constructor:!0,arity:1,forced:l},t)},u=function(n,e){if(i&&i[n]){var t={};t[n]=s("WebAssembly."+n,e,l),o({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};c("Error",(function(n){return function(e){return a(n,this,arguments)}})),c("EvalError",(function(n){return function(e){return a(n,this,arguments)}})),c("RangeError",(function(n){return function(e){return a(n,this,arguments)}})),c("ReferenceError",(function(n){return function(e){return a(n,this,arguments)}})),c("SyntaxError",(function(n){return function(e){return a(n,this,arguments)}})),c("TypeError",(function(n){return function(e){return a(n,this,arguments)}})),c("URIError",(function(n){return function(e){return a(n,this,arguments)}})),u("CompileError",(function(n){return function(e){return a(n,this,arguments)}})),u("LinkError",(function(n){return function(e){return a(n,this,arguments)}})),u("RuntimeError",(function(n){return function(e){return a(n,this,arguments)}}))},function(n,e,t){var o=t(25),r=Function.prototype,a=r.apply,s=r.call;n.exports="object"==typeof Reflect&&Reflect.apply||(o?s.bind(a):function(){return s.apply(a,arguments)})},function(n,e,t){"use strict";var o=t(16),r=t(8),a=t(17),s=t(54),i=t(65),l=t(63),c=t(128),u=t(129),p=t(130),d=t(134),f=t(135),h=t(136),m=t(7),g=t(59);n.exports=function(n,e,t,v){var b=v?2:1,y=n.split("."),x=y[y.length-1],w=o.apply(null,y);if(w){var j=w.prototype;if(!g&&r(j,"cause")&&delete j.cause,!t)return w;var k=o("Error"),_=e((function(n,e){var t=p(v?e:n,void 0),o=v?new w(n):new w;return void 0!==t&&a(o,"message",t),h&&a(o,"stack",f(o.stack,2)),this&&s(j,this)&&u(o,this,_),arguments.length>b&&d(o,arguments[b]),o}));if(_.prototype=j,"Error"!==x?i?i(_,k):l(_,k,{name:!0}):m&&"stackTraceLimit"in w&&(c(_,w,"stackTraceLimit"),c(_,w,"prepareStackTrace")),l(_,w),!g)try{j.name!==x&&a(j,"name",x),j.constructor=_}catch(n){}return _}}},function(n,e,t){var o=t(0),r=String,a=TypeError;n.exports=function(n){if("object"==typeof n||o(n))return n;throw a("Can't set "+r(n)+" as a prototype")}},function(n,e,t){var o=t(15).f;n.exports=function(n,e,t){t in n||o(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){var o=t(0),r=t(9),a=t(65);n.exports=function(n,e,t){var s,i;return a&&o(s=e.constructor)&&s!==t&&r(i=s.prototype)&&i!==t.prototype&&a(n,i),n}},function(n,e,t){var o=t(131);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:o(n)}},function(n,e,t){var o=t(132),r=String;n.exports=function(n){if("Symbol"===o(n))throw TypeError("Cannot convert a Symbol value to a string");return r(n)}},function(n,e,t){var o=t(133),r=t(0),a=t(30),s=t(27)("toStringTag"),i=Object,l="Arguments"==a(function(){return arguments}());n.exports=o?a:function(n){var e,t,o;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=i(n),s))?t:l?a(e):"Object"==(o=a(e))&&r(e.callee)?"Arguments":o}},function(n,e,t){var o={};o[t(27)("toStringTag")]="z",n.exports="[object z]"===String(o)},function(n,e,t){var o=t(9),r=t(17);n.exports=function(n,e){o(e)&&"cause"in e&&r(n,"cause",e.cause)}},function(n,e,t){var o=t(1),r=Error,a=o("".replace),s=String(r("zxcasd").stack),i=/\n\s*at [^:]*:[^\n]*/,l=i.test(s);n.exports=function(n,e){if(l&&"string"==typeof n&&!r.prepareStackTrace)for(;e--;)n=a(n,i,"");return n}},function(n,e,t){var o=t(3),r=t(29);n.exports=!o((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",r(1,7)),7!==n.stack)}))},function(n,e,t){var o=t(66),r=t(138);n.exports=function n(e,t,a,s,i){var l=-1,c=e.length;for(a||(a=r),i||(i=[]);++l<c;){var u=e[l];t>0&&a(u)?t>1?n(u,t-1,a,s,i):o(i,u):s||(i[i.length]=u)}return i}},function(n,e,t){var o=t(14),r=t(33),a=t(4),s=o?o.isConcatSpreadable:void 0;n.exports=function(n){return a(n)||r(n)||!!(s&&n&&n[s])}},function(n,e,t){var o=t(13),r=t(12);n.exports=function(n){return r(n)&&"[object Arguments]"==o(n)}},function(n,e,t){var o=t(14),r=Object.prototype,a=r.hasOwnProperty,s=r.toString,i=o?o.toStringTag:void 0;n.exports=function(n){var e=a.call(n,i),t=n[i];try{n[i]=void 0;var o=!0}catch(n){}var r=s.call(n);return o&&(e?n[i]=t:delete n[i]),r}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var o=t(143),r=t(199),a=t(41),s=t(4),i=t(210);n.exports=function(n){return"function"==typeof n?n:null==n?a:"object"==typeof n?s(n)?r(n[0],n[1]):o(n):i(n)}},function(n,e,t){var o=t(144),r=t(198),a=t(83);n.exports=function(n){var e=r(n);return 1==e.length&&e[0][2]?a(e[0][0],e[0][1]):function(t){return t===n||o(t,n,e)}}},function(n,e,t){var o=t(68),r=t(72);n.exports=function(n,e,t,a){var s=t.length,i=s,l=!a;if(null==n)return!i;for(n=Object(n);s--;){var c=t[s];if(l&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++s<i;){var u=(c=t[s])[0],p=n[u],d=c[1];if(l&&c[2]){if(void 0===p&&!(u in n))return!1}else{var f=new o;if(a)var h=a(p,d,u,n,e,f);if(!(void 0===h?r(d,p,3,a,f):h))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var o=t(19),r=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=o(e,n);return!(t<0)&&(t==e.length-1?e.pop():r.call(e,t,1),--this.size,!0)}},function(n,e,t){var o=t(19);n.exports=function(n){var e=this.__data__,t=o(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var o=t(19);n.exports=function(n){return o(this.__data__,n)>-1}},function(n,e,t){var o=t(19);n.exports=function(n,e){var t=this.__data__,r=o(t,n);return r<0?(++this.size,t.push([n,e])):t[r][1]=e,this}},function(n,e,t){var o=t(18);n.exports=function(){this.__data__=new o,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var o=t(18),r=t(34),a=t(36);n.exports=function(n,e){var t=this.__data__;if(t instanceof o){var s=t.__data__;if(!r||s.length<199)return s.push([n,e]),this.size=++t.size,this;t=this.__data__=new a(s)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var o=t(70),r=t(156),a=t(35),s=t(71),i=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,p=c.hasOwnProperty,d=RegExp("^"+u.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!a(n)||r(n))&&(o(n)?d:i).test(s(n))}},function(n,e,t){var o,r=t(157),a=(o=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||""))?"Symbol(src)_1."+o:"";n.exports=function(n){return!!a&&a in n}},function(n,e,t){var o=t(5)["__core-js_shared__"];n.exports=o},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var o=t(160),r=t(18),a=t(34);n.exports=function(){this.size=0,this.__data__={hash:new o,map:new(a||r),string:new o}}},function(n,e,t){var o=t(161),r=t(162),a=t(163),s=t(164),i=t(165);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var o=n[e];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=r,l.prototype.get=a,l.prototype.has=s,l.prototype.set=i,n.exports=l},function(n,e,t){var o=t(20);n.exports=function(){this.__data__=o?o(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var o=t(20),r=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(o){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return r.call(e,n)?e[n]:void 0}},function(n,e,t){var o=t(20),r=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return o?void 0!==e[n]:r.call(e,n)}},function(n,e,t){var o=t(20);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=o&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var o=t(21);n.exports=function(n){var e=o(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var o=t(21);n.exports=function(n){return o(this,n).get(n)}},function(n,e,t){var o=t(21);n.exports=function(n){return o(this,n).has(n)}},function(n,e,t){var o=t(21);n.exports=function(n,e){var t=o(this,n),r=t.size;return t.set(n,e),this.size+=t.size==r?0:1,this}},function(n,e,t){var o=t(68),r=t(73),a=t(175),s=t(178),i=t(194),l=t(4),c=t(77),u=t(79),p="[object Object]",d=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,f,h,m){var g=l(n),v=l(e),b=g?"[object Array]":i(n),y=v?"[object Array]":i(e),x=(b="[object Arguments]"==b?p:b)==p,w=(y="[object Arguments]"==y?p:y)==p,j=b==y;if(j&&c(n)){if(!c(e))return!1;g=!0,x=!1}if(j&&!x)return m||(m=new o),g||u(n)?r(n,e,t,f,h,m):a(n,e,b,t,f,h,m);if(!(1&t)){var k=x&&d.call(n,"__wrapped__"),_=w&&d.call(e,"__wrapped__");if(k||_){var S=k?n.value():n,E=_?e.value():e;return m||(m=new o),h(S,E,t,f,m)}}return!!j&&(m||(m=new o),s(n,e,t,f,h,m))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,o=null==n?0:n.length;++t<o;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var o=t(14),r=t(176),a=t(69),s=t(73),i=t(177),l=t(37),c=o?o.prototype:void 0,u=c?c.valueOf:void 0;n.exports=function(n,e,t,o,c,p,d){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!p(new r(n),new r(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return a(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var f=i;case"[object Set]":var h=1&o;if(f||(f=l),n.size!=e.size&&!h)return!1;var m=d.get(n);if(m)return m==e;o|=2,d.set(n,e);var g=s(f(n),f(e),o,c,p,d);return d.delete(n),g;case"[object Symbol]":if(u)return u.call(n)==u.call(e)}return!1}},function(n,e,t){var o=t(5).Uint8Array;n.exports=o},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,o){t[++e]=[o,n]})),t}},function(n,e,t){var o=t(179),r=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,a,s,i){var l=1&t,c=o(n),u=c.length;if(u!=o(e).length&&!l)return!1;for(var p=u;p--;){var d=c[p];if(!(l?d in e:r.call(e,d)))return!1}var f=i.get(n),h=i.get(e);if(f&&h)return f==e&&h==n;var m=!0;i.set(n,e),i.set(e,n);for(var g=l;++p<u;){var v=n[d=c[p]],b=e[d];if(a)var y=l?a(b,v,d,e,n,i):a(v,b,d,n,e,i);if(!(void 0===y?v===b||s(v,b,t,a,i):y)){m=!1;break}g||(g="constructor"==d)}if(m&&!g){var x=n.constructor,w=e.constructor;x==w||!("constructor"in n)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof w&&w instanceof w||(m=!1)}return i.delete(n),i.delete(e),m}},function(n,e,t){var o=t(180),r=t(181),a=t(76);n.exports=function(n){return o(n,a,r)}},function(n,e,t){var o=t(66),r=t(4);n.exports=function(n,e,t){var a=e(n);return r(n)?a:o(a,t(n))}},function(n,e,t){var o=t(182),r=t(183),a=Object.prototype.propertyIsEnumerable,s=Object.getOwnPropertySymbols,i=s?function(n){return null==n?[]:(n=Object(n),o(s(n),(function(e){return a.call(n,e)})))}:r;n.exports=i},function(n,e){n.exports=function(n,e){for(var t=-1,o=null==n?0:n.length,r=0,a=[];++t<o;){var s=n[t];e(s,t,n)&&(a[r++]=s)}return a}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var o=t(185),r=t(33),a=t(4),s=t(77),i=t(78),l=t(79),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=a(n),u=!t&&r(n),p=!t&&!u&&s(n),d=!t&&!u&&!p&&l(n),f=t||u||p||d,h=f?o(n.length,String):[],m=h.length;for(var g in n)!e&&!c.call(n,g)||f&&("length"==g||p&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||i(g,m))||h.push(g);return h}},function(n,e){n.exports=function(n,e){for(var t=-1,o=Array(n);++t<n;)o[t]=e(t);return o}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var o=t(13),r=t(38),a=t(12),s={};s["[object Float32Array]"]=s["[object Float64Array]"]=s["[object Int8Array]"]=s["[object Int16Array]"]=s["[object Int32Array]"]=s["[object Uint8Array]"]=s["[object Uint8ClampedArray]"]=s["[object Uint16Array]"]=s["[object Uint32Array]"]=!0,s["[object Arguments]"]=s["[object Array]"]=s["[object ArrayBuffer]"]=s["[object Boolean]"]=s["[object DataView]"]=s["[object Date]"]=s["[object Error]"]=s["[object Function]"]=s["[object Map]"]=s["[object Number]"]=s["[object Object]"]=s["[object RegExp]"]=s["[object Set]"]=s["[object String]"]=s["[object WeakMap]"]=!1,n.exports=function(n){return a(n)&&r(n.length)&&!!s[o(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var o=t(67),r=e&&!e.nodeType&&e,a=r&&"object"==typeof n&&n&&!n.nodeType&&n,s=a&&a.exports===r&&o.process,i=function(){try{var n=a&&a.require&&a.require("util").types;return n||s&&s.binding&&s.binding("util")}catch(n){}}();n.exports=i}).call(this,t(48)(n))},function(n,e,t){var o=t(191),r=t(192),a=Object.prototype.hasOwnProperty;n.exports=function(n){if(!o(n))return r(n);var e=[];for(var t in Object(n))a.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var o=t(193)(Object.keys,Object);n.exports=o},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var o=t(195),r=t(34),a=t(196),s=t(81),i=t(197),l=t(13),c=t(71),u=c(o),p=c(r),d=c(a),f=c(s),h=c(i),m=l;(o&&"[object DataView]"!=m(new o(new ArrayBuffer(1)))||r&&"[object Map]"!=m(new r)||a&&"[object Promise]"!=m(a.resolve())||s&&"[object Set]"!=m(new s)||i&&"[object WeakMap]"!=m(new i))&&(m=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,o=t?c(t):"";if(o)switch(o){case u:return"[object DataView]";case p:return"[object Map]";case d:return"[object Promise]";case f:return"[object Set]";case h:return"[object WeakMap]"}return e}),n.exports=m},function(n,e,t){var o=t(10)(t(5),"DataView");n.exports=o},function(n,e,t){var o=t(10)(t(5),"Promise");n.exports=o},function(n,e,t){var o=t(10)(t(5),"WeakMap");n.exports=o},function(n,e,t){var o=t(82),r=t(76);n.exports=function(n){for(var e=r(n),t=e.length;t--;){var a=e[t],s=n[a];e[t]=[a,s,o(s)]}return e}},function(n,e,t){var o=t(72),r=t(200),a=t(207),s=t(39),i=t(82),l=t(83),c=t(22);n.exports=function(n,e){return s(n)&&i(e)?l(c(n),e):function(t){var s=r(t,n);return void 0===s&&s===e?a(t,n):o(e,s,3)}}},function(n,e,t){var o=t(84);n.exports=function(n,e,t){var r=null==n?void 0:o(n,e);return void 0===r?t:r}},function(n,e,t){var o=t(202),r=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,s=o((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(r,(function(n,t,o,r){e.push(o?r.replace(a,"$1"):t||n)})),e}));n.exports=s},function(n,e,t){var o=t(203);n.exports=function(n){var e=o(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var o=t(36);function r(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var o=arguments,r=e?e.apply(this,o):o[0],a=t.cache;if(a.has(r))return a.get(r);var s=n.apply(this,o);return t.cache=a.set(r,s)||a,s};return t.cache=new(r.Cache||o),t}r.Cache=o,n.exports=r},function(n,e,t){var o=t(205);n.exports=function(n){return null==n?"":o(n)}},function(n,e,t){var o=t(14),r=t(206),a=t(4),s=t(40),i=o?o.prototype:void 0,l=i?i.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(a(e))return r(e,n)+"";if(s(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,o=null==n?0:n.length,r=Array(o);++t<o;)r[t]=e(n[t],t,n);return r}},function(n,e,t){var o=t(208),r=t(209);n.exports=function(n,e){return null!=n&&r(n,e,o)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var o=t(85),r=t(33),a=t(4),s=t(78),i=t(38),l=t(22);n.exports=function(n,e,t){for(var c=-1,u=(e=o(e,n)).length,p=!1;++c<u;){var d=l(e[c]);if(!(p=null!=n&&t(n,d)))break;n=n[d]}return p||++c!=u?p:!!(u=null==n?0:n.length)&&i(u)&&s(d,u)&&(a(n)||r(n))}},function(n,e,t){var o=t(211),r=t(212),a=t(39),s=t(22);n.exports=function(n){return a(n)?o(s(n)):r(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var o=t(84);n.exports=function(n){return function(e){return o(e,n)}}},function(n,e,t){var o=t(41),r=t(214),a=t(216);n.exports=function(n,e){return a(r(n,e,o),n+"")}},function(n,e,t){var o=t(215),r=Math.max;n.exports=function(n,e,t){return e=r(void 0===e?n.length-1:e,0),function(){for(var a=arguments,s=-1,i=r(a.length-e,0),l=Array(i);++s<i;)l[s]=a[e+s];s=-1;for(var c=Array(e+1);++s<e;)c[s]=a[s];return c[e]=t(l),o(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var o=t(217),r=t(220)(o);n.exports=r},function(n,e,t){var o=t(218),r=t(219),a=t(41),s=r?function(n,e){return r(n,"toString",{configurable:!0,enumerable:!1,value:o(e),writable:!0})}:a;n.exports=s},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var o=t(10),r=function(){try{var n=o(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=r},function(n,e){var t=Date.now;n.exports=function(n){var e=0,o=0;return function(){var r=t(),a=16-(r-o);if(o=r,a>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var o=t(74),r=t(222),a=t(227),s=t(75),i=t(228),l=t(37);n.exports=function(n,e,t){var c=-1,u=r,p=n.length,d=!0,f=[],h=f;if(t)d=!1,u=a;else if(p>=200){var m=e?null:i(n);if(m)return l(m);d=!1,u=s,h=new o}else h=e?[]:f;n:for(;++c<p;){var g=n[c],v=e?e(g):g;if(g=t||0!==g?g:0,d&&v==v){for(var b=h.length;b--;)if(h[b]===v)continue n;e&&h.push(v),f.push(g)}else u(h,v,t)||(h!==f&&h.push(v),f.push(g))}return f}},function(n,e,t){var o=t(223);n.exports=function(n,e){return!!(null==n?0:n.length)&&o(n,e,0)>-1}},function(n,e,t){var o=t(224),r=t(225),a=t(226);n.exports=function(n,e,t){return e==e?a(n,e,t):o(n,r,t)}},function(n,e){n.exports=function(n,e,t,o){for(var r=n.length,a=t+(o?1:-1);o?a--:++a<r;)if(e(n[a],a,n))return a;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var o=t-1,r=n.length;++o<r;)if(n[o]===e)return o;return-1}},function(n,e){n.exports=function(n,e,t){for(var o=-1,r=null==n?0:n.length;++o<r;)if(t(e,n[o]))return!0;return!1}},function(n,e,t){var o=t(81),r=t(229),a=t(37),s=o&&1/a(new o([,-0]))[1]==1/0?function(n){return new o(n)}:r;n.exports=s},function(n,e){n.exports=function(){}},function(n,e,t){var o=t(80),r=t(12);n.exports=function(n){return r(n)&&o(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(86)},function(n,e,t){"use strict";t(87)},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(88)},function(n,e,t){"use strict";t(89)},function(n,e,t){"use strict";t.r(e);
/*!
 * Vue.js v2.7.8
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var o=Object.freeze({}),r=Array.isArray;function a(n){return null==n}function s(n){return null!=n}function i(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return"function"==typeof n}function u(n){return null!==n&&"object"==typeof n}var p=Object.prototype.toString;function d(n){return"[object Object]"===p.call(n)}function f(n){return"[object RegExp]"===p.call(n)}function h(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function m(n){return s(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function g(n){return null==n?"":Array.isArray(n)||d(n)&&n.toString===p?JSON.stringify(n,null,2):String(n)}function v(n){var e=parseFloat(n);return isNaN(e)?n:e}function b(n,e){for(var t=Object.create(null),o=n.split(","),r=0;r<o.length;r++)t[o[r]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}b("slot,component",!0);var y=b("key,ref,slot,slot-scope,is");function x(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var w=Object.prototype.hasOwnProperty;function j(n,e){return w.call(n,e)}function k(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var _=/-(\w)/g,S=k((function(n){return n.replace(_,(function(n,e){return e?e.toUpperCase():""}))})),E=k((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),A=/\B([A-Z])/g,T=k((function(n){return n.replace(A,"-$1").toLowerCase()}));var C=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var o=arguments.length;return o?o>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function O(n,e){e=e||0;for(var t=n.length-e,o=new Array(t);t--;)o[t]=n[t+e];return o}function $(n,e){for(var t in e)n[t]=e[t];return n}function P(n){for(var e={},t=0;t<n.length;t++)n[t]&&$(e,n[t]);return e}function I(n,e,t){}var z=function(n,e,t){return!1},B=function(n){return n};function R(n,e){if(n===e)return!0;var t=u(n),o=u(e);if(!t||!o)return!t&&!o&&String(n)===String(e);try{var r=Array.isArray(n),a=Array.isArray(e);if(r&&a)return n.length===e.length&&n.every((function(n,t){return R(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(r||a)return!1;var s=Object.keys(n),i=Object.keys(e);return s.length===i.length&&s.every((function(t){return R(n[t],e[t])}))}catch(n){return!1}}function D(n,e){for(var t=0;t<n.length;t++)if(R(n[t],e))return t;return-1}function M(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}function L(n,e){return n===e?0===n&&1/n!=1/e:n==n||e==e}var N=["component","directive","filter"],q=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],F={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:z,isReservedAttr:z,isUnknownElement:z,getTagNamespace:I,parsePlatformTagName:B,mustUseProp:z,async:!0,_lifecycleHooks:q},U=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function W(n){var e=(n+"").charCodeAt(0);return 36===e||95===e}function H(n,e,t,o){Object.defineProperty(n,e,{value:t,enumerable:!!o,writable:!0,configurable:!0})}var J=new RegExp("[^".concat(U.source,".$_\\d]"));var V="__proto__"in{},X="undefined"!=typeof window,G=X&&window.navigator.userAgent.toLowerCase(),Z=G&&/msie|trident/.test(G),K=G&&G.indexOf("msie 9.0")>0,Y=G&&G.indexOf("edge/")>0;G&&G.indexOf("android");var Q=G&&/iphone|ipad|ipod|ios/.test(G);G&&/chrome\/\d+/.test(G),G&&/phantomjs/.test(G);var nn,en=G&&G.match(/firefox\/(\d+)/),tn={}.watch,on=!1;if(X)try{var rn={};Object.defineProperty(rn,"passive",{get:function(){on=!0}}),window.addEventListener("test-passive",null,rn)}catch(n){}var an=function(){return void 0===nn&&(nn=!X&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),nn},sn=X&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ln(n){return"function"==typeof n&&/native code/.test(n.toString())}var cn,un="undefined"!=typeof Symbol&&ln(Symbol)&&"undefined"!=typeof Reflect&&ln(Reflect.ownKeys);cn="undefined"!=typeof Set&&ln(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var pn=null;function dn(n){void 0===n&&(n=null),n||pn&&pn._scope.off(),pn=n,n&&n._scope.on()}var fn=function(){function n(n,e,t,o,r,a,s,i){this.tag=n,this.data=e,this.children=t,this.text=o,this.elm=r,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=s,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=i,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),hn=function(n){void 0===n&&(n="");var e=new fn;return e.text=n,e.isComment=!0,e};function mn(n){return new fn(void 0,void 0,void 0,String(n))}function gn(n){var e=new fn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var vn=0,bn=function(){function n(){this.id=vn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){x(this.subs,n)},n.prototype.depend=function(e){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var e=this.subs.slice();for(var t=0,o=e.length;t<o;t++){e[t].update()}},n}();bn.target=null;var yn=[];function xn(n){yn.push(n),bn.target=n}function wn(){yn.pop(),bn.target=yn[yn.length-1]}var jn=Array.prototype,kn=Object.create(jn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=jn[n];H(kn,n,(function(){for(var t=[],o=0;o<arguments.length;o++)t[o]=arguments[o];var r,a=e.apply(this,t),s=this.__ob__;switch(n){case"push":case"unshift":r=t;break;case"splice":r=t.slice(2)}return r&&s.observeArray(r),s.dep.notify(),a}))}));var _n=Object.getOwnPropertyNames(kn),Sn={},En=!0;function An(n){En=n}var Tn={notify:I,depend:I,addSub:I,removeSub:I},Cn=function(){function n(n,e,t){if(void 0===e&&(e=!1),void 0===t&&(t=!1),this.value=n,this.shallow=e,this.mock=t,this.dep=t?Tn:new bn,this.vmCount=0,H(n,"__ob__",this),r(n)){if(!t)if(V)n.__proto__=kn;else for(var o=0,a=_n.length;o<a;o++){H(n,i=_n[o],kn[i])}e||this.observeArray(n)}else{var s=Object.keys(n);for(o=0;o<s.length;o++){var i;$n(n,i=s[o],Sn,void 0,e,t)}}}return n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)On(n[e],!1,this.mock)},n}();function On(n,e,t){var o;if(!(!u(n)||Mn(n)||n instanceof fn))return j(n,"__ob__")&&n.__ob__ instanceof Cn?o=n.__ob__:!En||!t&&an()||!r(n)&&!d(n)||!Object.isExtensible(n)||n.__v_skip||(o=new Cn(n,e,t)),o}function $n(n,e,t,o,a,s){var i=new bn,l=Object.getOwnPropertyDescriptor(n,e);if(!l||!1!==l.configurable){var c=l&&l.get,u=l&&l.set;c&&!u||t!==Sn&&2!==arguments.length||(t=n[e]);var p=!a&&On(t,!1,s);return Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=c?c.call(n):t;return bn.target&&(i.depend(),p&&(p.dep.depend(),r(e)&&zn(e))),Mn(e)&&!a?e.value:e},set:function(e){var o=c?c.call(n):t;if(L(o,e)){if(u)u.call(n,e);else{if(c)return;if(!a&&Mn(o)&&!Mn(e))return void(o.value=e);t=e}p=!a&&On(e,!1,s),i.notify()}}}),i}}function Pn(n,e,t){if(!Dn(n)){var o=n.__ob__;return r(n)&&h(e)?(n.length=Math.max(n.length,e),n.splice(e,1,t),o&&!o.shallow&&o.mock&&On(t,!1,!0),t):e in n&&!(e in Object.prototype)?(n[e]=t,t):n._isVue||o&&o.vmCount?t:o?($n(o.value,e,t,void 0,o.shallow,o.mock),o.dep.notify(),t):(n[e]=t,t)}}function In(n,e){if(r(n)&&h(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||Dn(n)||j(n,e)&&(delete n[e],t&&t.dep.notify())}}function zn(n){for(var e=void 0,t=0,o=n.length;t<o;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),r(e)&&zn(e)}function Bn(n){return Rn(n,!0),H(n,"__v_isShallow",!0),n}function Rn(n,e){if(!Dn(n)){On(n,e,an());0}}function Dn(n){return!(!n||!n.__v_isReadonly)}function Mn(n){return!(!n||!0!==n.__v_isRef)}function Ln(n,e,t){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var n=e[t];if(Mn(n))return n.value;var o=n&&n.__ob__;return o&&o.dep.depend(),n},set:function(n){var o=e[t];Mn(o)&&!Mn(n)?o.value=n:e[t]=n}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Nn;var qn=function(){function n(n){void 0===n&&(n=!1),this.active=!0,this.effects=[],this.cleanups=[],!n&&Nn&&(this.parent=Nn,this.index=(Nn.scopes||(Nn.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var e=Nn;try{return Nn=this,n()}finally{Nn=e}}else 0},n.prototype.on=function(){Nn=this},n.prototype.off=function(){Nn=this.parent},n.prototype.stop=function(n){if(this.active){var e=void 0,t=void 0;for(e=0,t=this.effects.length;e<t;e++)this.effects[e].teardown();for(e=0,t=this.cleanups.length;e<t;e++)this.cleanups[e]();if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].stop(!0);if(this.parent&&!n){var o=this.parent.scopes.pop();o&&o!==this&&(this.parent.scopes[this.index]=o,o.index=this.index)}this.active=!1}},n}();function Fn(n){var e=n._provided,t=n.$parent&&n.$parent._provided;return t===e?n._provided=Object.create(t):e}var Un=k((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),o="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=o?n.slice(1):n,once:t,capture:o,passive:e}}));function Wn(n,e){function t(){var n=t.fns;if(!r(n))return Ee(n,null,arguments,e,"v-on handler");for(var o=n.slice(),a=0;a<o.length;a++)Ee(o[a],null,arguments,e,"v-on handler")}return t.fns=n,t}function Hn(n,e,t,o,r,s){var l,c,u,p;for(l in n)c=n[l],u=e[l],p=Un(l),a(c)||(a(u)?(a(c.fns)&&(c=n[l]=Wn(c,s)),i(p.once)&&(c=n[l]=r(p.name,c,p.capture)),t(p.name,c,p.capture,p.passive,p.params)):c!==u&&(u.fns=c,n[l]=u));for(l in e)a(n[l])&&o((p=Un(l)).name,e[l],p.capture)}function Jn(n,e,t){var o;n instanceof fn&&(n=n.data.hook||(n.data.hook={}));var r=n[e];function l(){t.apply(this,arguments),x(o.fns,l)}a(r)?o=Wn([l]):s(r.fns)&&i(r.merged)?(o=r).fns.push(l):o=Wn([r,l]),o.merged=!0,n[e]=o}function Vn(n,e,t,o,r){if(s(e)){if(j(e,t))return n[t]=e[t],r||delete e[t],!0;if(j(e,o))return n[t]=e[o],r||delete e[o],!0}return!1}function Xn(n){return l(n)?[mn(n)]:r(n)?function n(e,t){var o,c,u,p,d=[];for(o=0;o<e.length;o++)a(c=e[o])||"boolean"==typeof c||(u=d.length-1,p=d[u],r(c)?c.length>0&&(Gn((c=n(c,"".concat(t||"","_").concat(o)))[0])&&Gn(p)&&(d[u]=mn(p.text+c[0].text),c.shift()),d.push.apply(d,c)):l(c)?Gn(p)?d[u]=mn(p.text+c):""!==c&&d.push(mn(c)):Gn(c)&&Gn(p)?d[u]=mn(p.text+c.text):(i(e._isVList)&&s(c.tag)&&a(c.key)&&s(t)&&(c.key="__vlist".concat(t,"_").concat(o,"__")),d.push(c)));return d}(n):void 0}function Gn(n){return s(n)&&s(n.text)&&!1===n.isComment}function Zn(n,e){var t,o,a,i,l=null;if(r(n)||"string"==typeof n)for(l=new Array(n.length),t=0,o=n.length;t<o;t++)l[t]=e(n[t],t);else if("number"==typeof n)for(l=new Array(n),t=0;t<n;t++)l[t]=e(t+1,t);else if(u(n))if(un&&n[Symbol.iterator]){l=[];for(var c=n[Symbol.iterator](),p=c.next();!p.done;)l.push(e(p.value,l.length)),p=c.next()}else for(a=Object.keys(n),l=new Array(a.length),t=0,o=a.length;t<o;t++)i=a[t],l[t]=e(n[i],i,t);return s(l)||(l=[]),l._isVList=!0,l}function Kn(n,e,t,o){var r,a=this.$scopedSlots[n];a?(t=t||{},o&&(t=$($({},o),t)),r=a(t)||(c(e)?e():e)):r=this.$slots[n]||(c(e)?e():e);var s=t&&t.slot;return s?this.$createElement("template",{slot:s},r):r}function Yn(n){return Ct(this.$options,"filters",n,!0)||B}function Qn(n,e){return r(n)?-1===n.indexOf(e):n!==e}function ne(n,e,t,o,r){var a=F.keyCodes[e]||t;return r&&o&&!F.keyCodes[e]?Qn(r,o):a?Qn(a,n):o?T(o)!==e:void 0===n}function ee(n,e,t,o,a){if(t)if(u(t)){r(t)&&(t=P(t));var s=void 0,i=function(r){if("class"===r||"style"===r||y(r))s=n;else{var i=n.attrs&&n.attrs.type;s=o||F.mustUseProp(e,i,r)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=S(r),c=T(r);l in s||c in s||(s[r]=t[r],a&&((n.on||(n.on={}))["update:".concat(r)]=function(n){t[r]=n}))};for(var l in t)i(l)}else;return n}function te(n,e){var t=this._staticTrees||(this._staticTrees=[]),o=t[n];return o&&!e||re(o=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),o}function oe(n,e,t){return re(n,"__once__".concat(e).concat(t?"_".concat(t):""),!0),n}function re(n,e,t){if(r(n))for(var o=0;o<n.length;o++)n[o]&&"string"!=typeof n[o]&&ae(n[o],"".concat(e,"_").concat(o),t);else ae(n,e,t)}function ae(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function se(n,e){if(e)if(d(e)){var t=n.on=n.on?$({},n.on):{};for(var o in e){var r=t[o],a=e[o];t[o]=r?[].concat(r,a):a}}else;return n}function ie(n,e,t,o){e=e||{$stable:!t};for(var a=0;a<n.length;a++){var s=n[a];r(s)?ie(s,e,t):s&&(s.proxy&&(s.fn.proxy=!0),e[s.key]=s.fn)}return o&&(e.$key=o),e}function le(n,e){for(var t=0;t<e.length;t+=2){var o=e[t];"string"==typeof o&&o&&(n[e[t]]=e[t+1])}return n}function ce(n,e){return"string"==typeof n?e+n:n}function ue(n){n._o=oe,n._n=v,n._s=g,n._l=Zn,n._t=Kn,n._q=R,n._i=D,n._m=te,n._f=Yn,n._k=ne,n._b=ee,n._v=mn,n._e=hn,n._u=ie,n._g=se,n._d=le,n._p=ce}function pe(n,e){if(!n||!n.length)return{};for(var t={},o=0,r=n.length;o<r;o++){var a=n[o],s=a.data;if(s&&s.attrs&&s.attrs.slot&&delete s.attrs.slot,a.context!==e&&a.fnContext!==e||!s||null==s.slot)(t.default||(t.default=[])).push(a);else{var i=s.slot,l=t[i]||(t[i]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var c in t)t[c].every(de)&&delete t[c];return t}function de(n){return n.isComment&&!n.asyncFactory||" "===n.text}function fe(n){return n.isComment&&n.asyncFactory}function he(n,e,t,r){var a,s=Object.keys(t).length>0,i=e?!!e.$stable:!s,l=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(i&&r&&r!==o&&l===r.$key&&!s&&!r.$hasNormal)return r;for(var c in a={},e)e[c]&&"$"!==c[0]&&(a[c]=me(n,t,c,e[c]))}else a={};for(var u in t)u in a||(a[u]=ge(t,u));return e&&Object.isExtensible(e)&&(e._normalized=a),H(a,"$stable",i),H(a,"$key",l),H(a,"$hasNormal",s),a}function me(n,e,t,o){var a=function(){var e=pn;dn(n);var t=arguments.length?o.apply(null,arguments):o({}),a=(t=t&&"object"==typeof t&&!r(t)?[t]:Xn(t))&&t[0];return dn(e),t&&(!a||1===t.length&&a.isComment&&!fe(a))?void 0:t};return o.proxy&&Object.defineProperty(e,t,{get:a,enumerable:!0,configurable:!0}),a}function ge(n,e){return function(){return n[e]}}function ve(n){return{get attrs(){if(!n._attrsProxy){var e=n._attrsProxy={};H(e,"_v_attr_proxy",!0),be(e,n.$attrs,o,n,"$attrs")}return n._attrsProxy},get listeners(){n._listenersProxy||be(n._listenersProxy={},n.$listeners,o,n,"$listeners");return n._listenersProxy},get slots(){return function(n){n._slotsProxy||xe(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:C(n.$emit,n),expose:function(e){e&&Object.keys(e).forEach((function(t){return Ln(n,e,t)}))}}}function be(n,e,t,o,r){var a=!1;for(var s in e)s in n?e[s]!==t[s]&&(a=!0):(a=!0,ye(n,s,o,r));for(var s in n)s in e||(a=!0,delete n[s]);return a}function ye(n,e,t,o){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){return t[o][e]}})}function xe(n,e){for(var t in e)n[t]=e[t];for(var t in n)t in e||delete n[t]}var we=null;function je(n,e){return(n.__esModule||un&&"Module"===n[Symbol.toStringTag])&&(n=n.default),u(n)?e.extend(n):n}function ke(n){if(r(n))for(var e=0;e<n.length;e++){var t=n[e];if(s(t)&&(s(t.componentOptions)||fe(t)))return t}}function _e(n,e,t,o,p,d){return(r(t)||l(t))&&(p=o,o=t,t=void 0),i(d)&&(p=2),function(n,e,t,o,l){if(s(t)&&s(t.__ob__))return hn();s(t)&&s(t.is)&&(e=t.is);if(!e)return hn();0;r(o)&&c(o[0])&&((t=t||{}).scopedSlots={default:o[0]},o.length=0);2===l?o=Xn(o):1===l&&(o=function(n){for(var e=0;e<n.length;e++)if(r(n[e]))return Array.prototype.concat.apply([],n);return n}(o));var p,d;if("string"==typeof e){var f=void 0;d=n.$vnode&&n.$vnode.ns||F.getTagNamespace(e),p=F.isReservedTag(e)?new fn(F.parsePlatformTagName(e),t,o,void 0,void 0,n):t&&t.pre||!s(f=Ct(n.$options,"components",e))?new fn(e,t,o,void 0,void 0,n):yt(f,t,n,o,e)}else p=yt(e,t,n,o);return r(p)?p:s(p)?(s(d)&&function n(e,t,o){e.ns=t,"foreignObject"===e.tag&&(t=void 0,o=!0);if(s(e.children))for(var r=0,l=e.children.length;r<l;r++){var c=e.children[r];s(c.tag)&&(a(c.ns)||i(o)&&"svg"!==c.tag)&&n(c,t,o)}}(p,d),s(t)&&function(n){u(n.style)&&qe(n.style);u(n.class)&&qe(n.class)}(t),p):hn()}(n,e,t,o,p)}function Se(n,e,t){xn();try{if(e)for(var o=e;o=o.$parent;){var r=o.$options.errorCaptured;if(r)for(var a=0;a<r.length;a++)try{if(!1===r[a].call(o,n,e,t))return}catch(n){Ae(n,o,"errorCaptured hook")}}Ae(n,e,t)}finally{wn()}}function Ee(n,e,t,o,r){var a;try{(a=t?n.apply(e,t):n.call(e))&&!a._isVue&&m(a)&&!a._handled&&(a.catch((function(n){return Se(n,o,r+" (Promise/async)")})),a._handled=!0)}catch(n){Se(n,o,r)}return a}function Ae(n,e,t){if(F.errorHandler)try{return F.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Te(e,null,"config.errorHandler")}Te(n,e,t)}function Te(n,e,t){if(!X||"undefined"==typeof console)throw n;console.error(n)}var Ce,Oe=!1,$e=[],Pe=!1;function Ie(){Pe=!1;var n=$e.slice(0);$e.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&ln(Promise)){var ze=Promise.resolve();Ce=function(){ze.then(Ie),Q&&setTimeout(I)},Oe=!0}else if(Z||"undefined"==typeof MutationObserver||!ln(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Ce="undefined"!=typeof setImmediate&&ln(setImmediate)?function(){setImmediate(Ie)}:function(){setTimeout(Ie,0)};else{var Be=1,Re=new MutationObserver(Ie),De=document.createTextNode(String(Be));Re.observe(De,{characterData:!0}),Ce=function(){Be=(Be+1)%2,De.data=String(Be)},Oe=!0}function Me(n,e){var t;if($e.push((function(){if(n)try{n.call(e)}catch(n){Se(n,e,"nextTick")}else t&&t(e)})),Pe||(Pe=!0,Ce()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}function Le(n){return function(e,t){if(void 0===t&&(t=pn),t)return function(n,e,t){var o=n.$options;o[e]=St(o[e],t)}(t,n,e)}}Le("beforeMount"),Le("mounted"),Le("beforeUpdate"),Le("updated"),Le("beforeDestroy"),Le("destroyed"),Le("errorCaptured"),Le("activated"),Le("deactivated"),Le("serverPrefetch"),Le("renderTracked"),Le("renderTriggered");var Ne=new cn;function qe(n){return function n(e,t){var o,a,s=r(e);if(!s&&!u(e)||Object.isFrozen(e)||e instanceof fn)return;if(e.__ob__){var i=e.__ob__.dep.id;if(t.has(i))return;t.add(i)}if(s)for(o=e.length;o--;)n(e[o],t);else if(Mn(e))n(e.value,t);else for(a=Object.keys(e),o=a.length;o--;)n(e[a[o]],t)}(n,Ne),Ne.clear(),n}var Fe,Ue=0,We=function(){function n(n,e,t,o,r){var a,s;a=this,void 0===(s=Nn||(n?n._scope:void 0))&&(s=Nn),s&&s.active&&s.effects.push(a),(this.vm=n)&&r&&(n._watcher=this),o?(this.deep=!!o.deep,this.user=!!o.user,this.lazy=!!o.lazy,this.sync=!!o.sync,this.before=o.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++Ue,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new cn,this.newDepIds=new cn,this.expression="",c(e)?this.getter=e:(this.getter=function(n){if(!J.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=I)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;xn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Se(n,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&qe(n),wn(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():pt(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||u(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'.concat(this.expression,'"');Ee(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&x(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function He(n,e){Fe.$on(n,e)}function Je(n,e){Fe.$off(n,e)}function Ve(n,e){var t=Fe;return function o(){var r=e.apply(null,arguments);null!==r&&t.$off(n,o)}}function Xe(n,e,t){Fe=n,Hn(e,t||{},He,Je,Ve,n),Fe=void 0}var Ge=null;function Ze(n){var e=Ge;return Ge=n,function(){Ge=e}}function Ke(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function Ye(n,e){if(e){if(n._directInactive=!1,Ke(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)Ye(n.$children[t]);Qe(n,"activated")}}function Qe(n,e,t,o){void 0===o&&(o=!0),xn();var r=pn;o&&dn(n);var a=n.$options[e],s="".concat(e," hook");if(a)for(var i=0,l=a.length;i<l;i++)Ee(a[i],n,t||null,n,s);n._hasHookEvent&&n.$emit("hook:"+e),o&&dn(r),wn()}var nt=[],et=[],tt={},ot=!1,rt=!1,at=0;var st=0,it=Date.now;if(X&&!Z){var lt=window.performance;lt&&"function"==typeof lt.now&&it()>document.createEvent("Event").timeStamp&&(it=function(){return lt.now()})}var ct=function(n,e){if(n.post){if(!e.post)return 1}else if(e.post)return-1;return n.id-e.id};function ut(){var n,e;for(st=it(),rt=!0,nt.sort(ct),at=0;at<nt.length;at++)(n=nt[at]).before&&n.before(),e=n.id,tt[e]=null,n.run();var t=et.slice(),o=nt.slice();at=nt.length=et.length=0,tt={},ot=rt=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,Ye(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],o=t.vm;o&&o._watcher===t&&o._isMounted&&!o._isDestroyed&&Qe(o,"updated")}}(o),sn&&F.devtools&&sn.emit("flush")}function pt(n){var e=n.id;if(null==tt[e]&&(n!==bn.target||!n.noRecurse)){if(tt[e]=!0,rt){for(var t=nt.length-1;t>at&&nt[t].id>n.id;)t--;nt.splice(t+1,0,n)}else nt.push(n);ot||(ot=!0,Me(ut))}}function dt(n,e){if(n){for(var t=Object.create(null),o=un?Reflect.ownKeys(n):Object.keys(n),r=0;r<o.length;r++){var a=o[r];if("__ob__"!==a){var s=n[a].from;if(s in e._provided)t[a]=e._provided[s];else if("default"in n[a]){var i=n[a].default;t[a]=c(i)?i.call(e):i}else 0}}return t}}function ft(n,e,t,a,s){var l,c=this,u=s.options;j(a,"_uid")?(l=Object.create(a))._original=a:(l=a,a=a._original);var p=i(u._compiled),d=!p;this.data=n,this.props=e,this.children=t,this.parent=a,this.listeners=n.on||o,this.injections=dt(u.inject,a),this.slots=function(){return c.$slots||he(a,n.scopedSlots,c.$slots=pe(t,a)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return he(a,n.scopedSlots,this.slots())}}),p&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=he(a,n.scopedSlots,this.$slots)),u._scopeId?this._c=function(n,e,t,o){var s=_e(l,n,e,t,o,d);return s&&!r(s)&&(s.fnScopeId=u._scopeId,s.fnContext=a),s}:this._c=function(n,e,t,o){return _e(l,n,e,t,o,d)}}function ht(n,e,t,o,r){var a=gn(n);return a.fnContext=t,a.fnOptions=o,e.slot&&((a.data||(a.data={})).slot=e.slot),a}function mt(n,e){for(var t in e)n[S(t)]=e[t]}function gt(n){return n.name||n.__name||n._componentTag}ue(ft.prototype);var vt={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;vt.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},o=n.data.inlineTemplate;s(o)&&(t.render=o.render,t.staticRenderFns=o.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ge)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,r,a){var s=r.data.scopedSlots,i=n.$scopedSlots,l=!!(s&&!s.$stable||i!==o&&!i.$stable||s&&n.$scopedSlots.$key!==s.$key||!s&&n.$scopedSlots.$key),c=!!(a||n.$options._renderChildren||l),u=n.$vnode;n.$options._parentVnode=r,n.$vnode=r,n._vnode&&(n._vnode.parent=r),n.$options._renderChildren=a;var p=r.data.attrs||o;n._attrsProxy&&be(n._attrsProxy,p,u.data&&u.data.attrs||o,n,"$attrs")&&(c=!0),n.$attrs=p,t=t||o;var d=n.$options._parentListeners;if(n._listenersProxy&&be(n._listenersProxy,t,d||o,n,"$listeners"),n.$listeners=n.$options._parentListeners=t,Xe(n,t,d),e&&n.$options.props){An(!1);for(var f=n._props,h=n.$options._propKeys||[],m=0;m<h.length;m++){var g=h[m],v=n.$options.props;f[g]=Ot(g,v,e,n)}An(!0),n.$options.propsData=e}c&&(n.$slots=pe(a,r.context),n.$forceUpdate())}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,o=n.componentInstance;o._isMounted||(o._isMounted=!0,Qe(o,"mounted")),n.data.keepAlive&&(t._isMounted?((e=o)._inactive=!1,et.push(e)):Ye(o,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(!(t&&(e._directInactive=!0,Ke(e))||e._inactive)){e._inactive=!0;for(var o=0;o<e.$children.length;o++)n(e.$children[o]);Qe(e,"deactivated")}}(e,!0):e.$destroy())}},bt=Object.keys(vt);function yt(n,e,t,l,c){if(!a(n)){var p=t.$options._base;if(u(n)&&(n=p.extend(n)),"function"==typeof n){var d;if(a(n.cid)&&void 0===(n=function(n,e){if(i(n.error)&&s(n.errorComp))return n.errorComp;if(s(n.resolved))return n.resolved;var t=we;if(t&&s(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t),i(n.loading)&&s(n.loadingComp))return n.loadingComp;if(t&&!s(n.owners)){var o=n.owners=[t],r=!0,l=null,c=null;t.$on("hook:destroyed",(function(){return x(o,t)}));var p=function(n){for(var e=0,t=o.length;e<t;e++)o[e].$forceUpdate();n&&(o.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},d=M((function(t){n.resolved=je(t,e),r?o.length=0:p(!0)})),f=M((function(e){s(n.errorComp)&&(n.error=!0,p(!0))})),h=n(d,f);return u(h)&&(m(h)?a(n.resolved)&&h.then(d,f):m(h.component)&&(h.component.then(d,f),s(h.error)&&(n.errorComp=je(h.error,e)),s(h.loading)&&(n.loadingComp=je(h.loading,e),0===h.delay?n.loading=!0:l=setTimeout((function(){l=null,a(n.resolved)&&a(n.error)&&(n.loading=!0,p(!1))}),h.delay||200)),s(h.timeout)&&(c=setTimeout((function(){c=null,a(n.resolved)&&f(null)}),h.timeout)))),r=!1,n.loading?n.loadingComp:n.resolved}}(d=n,p)))return function(n,e,t,o,r){var a=hn();return a.asyncFactory=n,a.asyncMeta={data:e,context:t,children:o,tag:r},a}(d,e,t,l,c);e=e||{},Wt(n),s(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",o=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var a=e.on||(e.on={}),i=a[o],l=e.model.callback;s(i)?(r(i)?-1===i.indexOf(l):i!==l)&&(a[o]=[l].concat(i)):a[o]=l}(n.options,e);var f=function(n,e,t){var o=e.options.props;if(!a(o)){var r={},i=n.attrs,l=n.props;if(s(i)||s(l))for(var c in o){var u=T(c);Vn(r,l,c,u,!0)||Vn(r,i,c,u,!1)}return r}}(e,n);if(i(n.options.functional))return function(n,e,t,a,i){var l=n.options,c={},u=l.props;if(s(u))for(var p in u)c[p]=Ot(p,u,e||o);else s(t.attrs)&&mt(c,t.attrs),s(t.props)&&mt(c,t.props);var d=new ft(t,c,i,a,n),f=l.render.call(null,d._c,d);if(f instanceof fn)return ht(f,t,d.parent,l,d);if(r(f)){for(var h=Xn(f)||[],m=new Array(h.length),g=0;g<h.length;g++)m[g]=ht(h[g],t,d.parent,l,d);return m}}(n,f,e,t,l);var h=e.on;if(e.on=e.nativeOn,i(n.options.abstract)){var g=e.slot;e={},g&&(e.slot=g)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<bt.length;t++){var o=bt[t],r=e[o],a=vt[o];r===a||r&&r._merged||(e[o]=r?xt(a,r):a)}}(e);var v=gt(n.options)||c;return new fn("vue-component-".concat(n.cid).concat(v?"-".concat(v):""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:f,listeners:h,tag:c,children:l},d)}}}function xt(n,e){var t=function(t,o){n(t,o),e(t,o)};return t._merged=!0,t}var wt=I,jt=F.optionMergeStrategies;function kt(n,e){if(!e)return n;for(var t,o,r,a=un?Reflect.ownKeys(e):Object.keys(e),s=0;s<a.length;s++)"__ob__"!==(t=a[s])&&(o=n[t],r=e[t],j(n,t)?o!==r&&d(o)&&d(r)&&kt(o,r):Pn(n,t,r));return n}function _t(n,e,t){return t?function(){var o=c(e)?e.call(t,t):e,r=c(n)?n.call(t,t):n;return o?kt(o,r):r}:e?n?function(){return kt(c(e)?e.call(this,this):e,c(n)?n.call(this,this):n)}:e:n}function St(n,e){var t=e?n?n.concat(e):r(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function Et(n,e,t,o){var r=Object.create(n||null);return e?$(r,e):r}jt.data=function(n,e,t){return t?_t(n,e,t):e&&"function"!=typeof e?n:_t(n,e)},q.forEach((function(n){jt[n]=St})),N.forEach((function(n){jt[n+"s"]=Et})),jt.watch=function(n,e,t,o){if(n===tn&&(n=void 0),e===tn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var a={};for(var s in $(a,n),e){var i=a[s],l=e[s];i&&!r(i)&&(i=[i]),a[s]=i?i.concat(l):r(l)?l:[l]}return a},jt.props=jt.methods=jt.inject=jt.computed=function(n,e,t,o){if(!n)return e;var r=Object.create(null);return $(r,n),e&&$(r,e),r},jt.provide=_t;var At=function(n,e){return void 0===e?n:e};function Tt(n,e,t){if(c(e)&&(e=e.options),function(n,e){var t=n.props;if(t){var o,a,s={};if(r(t))for(o=t.length;o--;)"string"==typeof(a=t[o])&&(s[S(a)]={type:null});else if(d(t))for(var i in t)a=t[i],s[S(i)]=d(a)?a:{type:a};else 0;n.props=s}}(e),function(n,e){var t=n.inject;if(t){var o=n.inject={};if(r(t))for(var a=0;a<t.length;a++)o[t[a]]={from:t[a]};else if(d(t))for(var s in t){var i=t[s];o[s]=d(i)?$({from:s},i):{from:i}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var o=e[t];c(o)&&(e[t]={bind:o,update:o})}}(e),!e._base&&(e.extends&&(n=Tt(n,e.extends,t)),e.mixins))for(var o=0,a=e.mixins.length;o<a;o++)n=Tt(n,e.mixins[o],t);var s,i={};for(s in n)l(s);for(s in e)j(n,s)||l(s);function l(o){var r=jt[o]||At;i[o]=r(n[o],e[o],t,o)}return i}function Ct(n,e,t,o){if("string"==typeof t){var r=n[e];if(j(r,t))return r[t];var a=S(t);if(j(r,a))return r[a];var s=E(a);return j(r,s)?r[s]:r[t]||r[a]||r[s]}}function Ot(n,e,t,o){var r=e[n],a=!j(t,n),s=t[n],i=zt(Boolean,r.type);if(i>-1)if(a&&!j(r,"default"))s=!1;else if(""===s||s===T(n)){var l=zt(String,r.type);(l<0||i<l)&&(s=!0)}if(void 0===s){s=function(n,e,t){if(!j(e,"default"))return;var o=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return c(o)&&"Function"!==Pt(e.type)?o.call(n):o}(o,r,n);var u=En;An(!0),On(s),An(u)}return s}var $t=/^\s*function (\w+)/;function Pt(n){var e=n&&n.toString().match($t);return e?e[1]:""}function It(n,e){return Pt(n)===Pt(e)}function zt(n,e){if(!r(e))return It(e,n)?0:-1;for(var t=0,o=e.length;t<o;t++)if(It(e[t],n))return t;return-1}var Bt={enumerable:!0,configurable:!0,get:I,set:I};function Rt(n,e,t){Bt.get=function(){return this[e][t]},Bt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,Bt)}function Dt(n){var e=n.$options;if(e.props&&function(n,e){var t=n.$options.propsData||{},o=n._props=Bn({}),r=n.$options._propKeys=[];n.$parent&&An(!1);var a=function(a){r.push(a);var s=Ot(a,e,t,n);$n(o,a,s),a in n||Rt(n,"_props",a)};for(var s in e)a(s);An(!0)}(n,e.props),function(n){var e=n.$options,t=e.setup;if(t){var o=n._setupContext=ve(n);dn(n),xn();var r=Ee(t,null,[n._props||Bn({}),o],n,"setup");if(wn(),dn(),c(r))e.render=r;else if(u(r))if(n._setupState=r,r.__sfc){var a=n._setupProxy={};for(var s in r)"__sfc"!==s&&Ln(a,r,s)}else for(var s in r)W(s)||Ln(n,r,s);else 0}}(n),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?I:C(e[t],n)}(n,e.methods),e.data)!function(n){var e=n.$options.data;d(e=n._data=c(e)?function(n,e){xn();try{return n.call(e,e)}catch(n){return Se(n,e,"data()"),{}}finally{wn()}}(e,n):e||{})||(e={});var t=Object.keys(e),o=n.$options.props,r=(n.$options.methods,t.length);for(;r--;){var a=t[r];0,o&&j(o,a)||W(a)||Rt(n,"_data",a)}var s=On(e);s&&s.vmCount++}(n);else{var t=On(n._data={});t&&t.vmCount++}e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),o=an();for(var r in e){var a=e[r],s=c(a)?a:a.get;0,o||(t[r]=new We(n,s||I,I,Mt)),r in n||Lt(n,r,a)}}(n,e.computed),e.watch&&e.watch!==tn&&function(n,e){for(var t in e){var o=e[t];if(r(o))for(var a=0;a<o.length;a++)Ft(n,t,o[a]);else Ft(n,t,o)}}(n,e.watch)}var Mt={lazy:!0};function Lt(n,e,t){var o=!an();c(t)?(Bt.get=o?Nt(e):qt(t),Bt.set=I):(Bt.get=t.get?o&&!1!==t.cache?Nt(e):qt(t.get):I,Bt.set=t.set||I),Object.defineProperty(n,e,Bt)}function Nt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),bn.target&&e.depend(),e.value}}function qt(n){return function(){return n.call(this,this)}}function Ft(n,e,t,o){return d(t)&&(o=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,o)}var Ut=0;function Wt(n){var e=n.options;if(n.super){var t=Wt(n.super);if(t!==n.superOptions){n.superOptions=t;var o=function(n){var e,t=n.options,o=n.sealedOptions;for(var r in t)t[r]!==o[r]&&(e||(e={}),e[r]=t[r]);return e}(n);o&&$(n.extendOptions,o),(e=n.options=Tt(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Ht(n){this._init(n)}function Jt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,o=t.cid,r=n._Ctor||(n._Ctor={});if(r[o])return r[o];var a=gt(n)||gt(t.options);var s=function(n){this._init(n)};return(s.prototype=Object.create(t.prototype)).constructor=s,s.cid=e++,s.options=Tt(t.options,n),s.super=t,s.options.props&&function(n){var e=n.options.props;for(var t in e)Rt(n.prototype,"_props",t)}(s),s.options.computed&&function(n){var e=n.options.computed;for(var t in e)Lt(n.prototype,t,e[t])}(s),s.extend=t.extend,s.mixin=t.mixin,s.use=t.use,N.forEach((function(n){s[n]=t[n]})),a&&(s.options.components[a]=s),s.superOptions=t.options,s.extendOptions=n,s.sealedOptions=$({},s.options),r[o]=s,s}}function Vt(n){return n&&(gt(n.Ctor.options)||n.tag)}function Xt(n,e){return r(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!f(n)&&n.test(e)}function Gt(n,e){var t=n.cache,o=n.keys,r=n._vnode;for(var a in t){var s=t[a];if(s){var i=s.name;i&&!e(i)&&Zt(t,a,o,r)}}}function Zt(n,e,t,o){var r=n[e];!r||o&&r.tag===o.tag||r.componentInstance.$destroy(),n[e]=null,x(t,e)}Ht.prototype._init=function(n){var e=this;e._uid=Ut++,e._isVue=!0,e.__v_skip=!0,e._scope=new qn(!0),n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),o=e._parentVnode;t.parent=e.parent,t._parentVnode=o;var r=o.componentOptions;t.propsData=r.propsData,t._parentListeners=r.listeners,t._renderChildren=r.children,t._componentTag=r.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=Tt(Wt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._provided=t?t._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Xe(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,r=t&&t.context;n.$slots=pe(e._renderChildren,r),n.$scopedSlots=t?he(n.$parent,t.data.scopedSlots,n.$slots):o,n._c=function(e,t,o,r){return _e(n,e,t,o,r,!1)},n.$createElement=function(e,t,o,r){return _e(n,e,t,o,r,!0)};var a=t&&t.data;$n(n,"$attrs",a&&a.attrs||o,null,!0),$n(n,"$listeners",e._parentListeners||o,null,!0)}(e),Qe(e,"beforeCreate",void 0,!1),function(n){var e=dt(n.$options.inject,n);e&&(An(!1),Object.keys(e).forEach((function(t){$n(n,t,e[t])})),An(!0))}(e),Dt(e),function(n){var e=n.$options.provide;if(e){var t=c(e)?e.call(n):e;if(!u(t))return;for(var o=Fn(n),r=un?Reflect.ownKeys(t):Object.keys(t),a=0;a<r.length;a++){var s=r[a];Object.defineProperty(o,s,Object.getOwnPropertyDescriptor(t,s))}}}(e),Qe(e,"created"),e.$options.el&&e.$mount(e.$options.el)},function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=Pn,n.prototype.$delete=In,n.prototype.$watch=function(n,e,t){if(d(e))return Ft(this,n,e,t);(t=t||{}).user=!0;var o=new We(this,n,e,t);if(t.immediate){var r='callback for immediate watcher "'.concat(o.expression,'"');xn(),Ee(e,this,[o.value],this,r),wn()}return function(){o.teardown()}}}(Ht),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var o=this;if(r(n))for(var a=0,s=n.length;a<s;a++)o.$on(n[a],t);else(o._events[n]||(o._events[n]=[])).push(t),e.test(n)&&(o._hasHookEvent=!0);return o},n.prototype.$once=function(n,e){var t=this;function o(){t.$off(n,o),e.apply(t,arguments)}return o.fn=e,t.$on(n,o),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(r(n)){for(var o=0,a=n.length;o<a;o++)t.$off(n[o],e);return t}var s,i=t._events[n];if(!i)return t;if(!e)return t._events[n]=null,t;for(var l=i.length;l--;)if((s=i[l])===e||s.fn===e){i.splice(l,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?O(t):t;for(var o=O(arguments,1),r='event handler for "'.concat(n,'"'),a=0,s=t.length;a<s;a++)Ee(t[a],e,o,e,r)}return e}}(Ht),function(n){n.prototype._update=function(n,e){var t=this,o=t.$el,r=t._vnode,a=Ze(t);t._vnode=n,t.$el=r?t.__patch__(r,n):t.__patch__(t.$el,n,e,!1),a(),o&&(o.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){Qe(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||x(e.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),Qe(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Ht),function(n){ue(n.prototype),n.prototype.$nextTick=function(n){return Me(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,o=t.render,a=t._parentVnode;a&&e._isMounted&&(e.$scopedSlots=he(e.$parent,a.data.scopedSlots,e.$slots,e.$scopedSlots),e._slotsProxy&&xe(e._slotsProxy,e.$scopedSlots)),e.$vnode=a;try{dn(e),we=e,n=o.call(e._renderProxy,e.$createElement)}catch(t){Se(t,e,"render"),n=e._vnode}finally{we=null,dn()}return r(n)&&1===n.length&&(n=n[0]),n instanceof fn||(n=hn()),n.parent=a,n}}(Ht);var Kt=[String,RegExp,Array],Yt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Kt,exclude:Kt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,o=this.keyToCache;if(t){var r=t.tag,a=t.componentInstance,s=t.componentOptions;n[o]={name:Vt(s),tag:r,componentInstance:a},e.push(o),this.max&&e.length>parseInt(this.max)&&Zt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Zt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Gt(n,(function(n){return Xt(e,n)}))})),this.$watch("exclude",(function(e){Gt(n,(function(n){return!Xt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=ke(n),t=e&&e.componentOptions;if(t){var o=Vt(t),r=this.include,a=this.exclude;if(r&&(!o||!Xt(r,o))||a&&o&&Xt(a,o))return e;var s=this.cache,i=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):e.key;s[l]?(e.componentInstance=s[l].componentInstance,x(i,l),i.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return F}};Object.defineProperty(n,"config",e),n.util={warn:wt,extend:$,mergeOptions:Tt,defineReactive:$n},n.set=Pn,n.delete=In,n.nextTick=Me,n.observable=function(n){return On(n),n},n.options=Object.create(null),N.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,$(n.options.components,Yt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=O(arguments,1);return t.unshift(this),c(n.install)?n.install.apply(n,t):c(n)&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Tt(this.options,n),this}}(n),Jt(n),function(n){N.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&d(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&c(t)&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Ht),Object.defineProperty(Ht.prototype,"$isServer",{get:an}),Object.defineProperty(Ht.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Ht,"FunctionalRenderContext",{value:ft}),Ht.version="2.7.8";var Qt=b("style,class"),no=b("input,textarea,option,select,progress"),eo=b("contenteditable,draggable,spellcheck"),to=b("events,caret,typing,plaintext-only"),oo=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ro="http://www.w3.org/1999/xlink",ao=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},so=function(n){return ao(n)?n.slice(6,n.length):""},io=function(n){return null==n||!1===n};function lo(n){for(var e=n.data,t=n,o=n;s(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(e=co(o.data,e));for(;s(t=t.parent);)t&&t.data&&(e=co(e,t.data));return function(n,e){if(s(n)||s(e))return uo(n,po(e));return""}(e.staticClass,e.class)}function co(n,e){return{staticClass:uo(n.staticClass,e.staticClass),class:s(n.class)?[n.class,e.class]:e.class}}function uo(n,e){return n?e?n+" "+e:n:e||""}function po(n){return Array.isArray(n)?function(n){for(var e,t="",o=0,r=n.length;o<r;o++)s(e=po(n[o]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):u(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var fo={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},ho=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),mo=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),go=function(n){return ho(n)||mo(n)};var vo=Object.create(null);var bo=b("text,number,password,search,email,tel,url");var yo=Object.freeze({__proto__:null,createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(fo[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),xo={create:function(n,e){wo(e)},update:function(n,e){n.data.ref!==e.data.ref&&(wo(n,!0),wo(e))},destroy:function(n){wo(n,!0)}};function wo(n,e){var t=n.data.ref;if(s(t)){var o=n.context,a=n.componentInstance||n.elm,i=e?null:a,l=e?void 0:a;if(c(t))Ee(t,o,[i],o,"template ref function");else{var u=n.data.refInFor,p="string"==typeof t||"number"==typeof t,d=Mn(t),f=o.$refs;if(p||d)if(u){var h=p?f[t]:t.value;e?r(h)&&x(h,a):r(h)?h.includes(a)||h.push(a):p?(f[t]=[a],jo(o,t,f[t])):t.value=[a]}else if(p){if(e&&f[t]!==a)return;f[t]=l,jo(o,t,i)}else if(d){if(e&&t.value!==a)return;t.value=i}else 0}}}function jo(n,e,t){var o=n._setupState;o&&j(o,e)&&(Mn(o[e])?o[e].value=t:o[e]=t)}var ko=new fn("",{},[]),_o=["create","activate","update","remove","destroy"];function So(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&s(n.data)===s(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,o=s(t=n.data)&&s(t=t.attrs)&&t.type,r=s(t=e.data)&&s(t=t.attrs)&&t.type;return o===r||bo(o)&&bo(r)}(n,e)||i(n.isAsyncPlaceholder)&&a(e.asyncFactory.error))}function Eo(n,e,t){var o,r,a={};for(o=e;o<=t;++o)s(r=n[o].key)&&(a[r]=o);return a}var Ao={create:To,update:To,destroy:function(n){To(n,ko)}};function To(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,o,r,a=n===ko,s=e===ko,i=Oo(n.data.directives,n.context),l=Oo(e.data.directives,e.context),c=[],u=[];for(t in l)o=i[t],r=l[t],o?(r.oldValue=o.value,r.oldArg=o.arg,Po(r,"update",e,n),r.def&&r.def.componentUpdated&&u.push(r)):(Po(r,"bind",e,n),r.def&&r.def.inserted&&c.push(r));if(c.length){var p=function(){for(var t=0;t<c.length;t++)Po(c[t],"inserted",e,n)};a?Jn(e,"insert",p):p()}u.length&&Jn(e,"postpatch",(function(){for(var t=0;t<u.length;t++)Po(u[t],"componentUpdated",e,n)}));if(!a)for(t in i)l[t]||Po(i[t],"unbind",n,n,s)}(n,e)}var Co=Object.create(null);function Oo(n,e){var t,o,r=Object.create(null);if(!n)return r;for(t=0;t<n.length;t++)(o=n[t]).modifiers||(o.modifiers=Co),r[$o(o)]=o,e._setupState&&e._setupState.__sfc&&(o.def=o.def||Ct(e,"_setupState","v-"+o.name)),o.def=o.def||Ct(e.$options,"directives",o.name);return r}function $o(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function Po(n,e,t,o,r){var a=n.def&&n.def[e];if(a)try{a(t.elm,n,t,o,r)}catch(o){Se(o,t.context,"directive ".concat(n.name," ").concat(e," hook"))}}var Io=[xo,Ao];function zo(n,e){var t=e.componentOptions;if(!(s(t)&&!1===t.Ctor.options.inheritAttrs||a(n.data.attrs)&&a(e.data.attrs))){var o,r,l=e.elm,c=n.data.attrs||{},u=e.data.attrs||{};for(o in(s(u.__ob__)||i(u._v_attr_proxy))&&(u=e.data.attrs=$({},u)),u)r=u[o],c[o]!==r&&Bo(l,o,r,e.data.pre);for(o in(Z||Y)&&u.value!==c.value&&Bo(l,"value",u.value),c)a(u[o])&&(ao(o)?l.removeAttributeNS(ro,so(o)):eo(o)||l.removeAttribute(o))}}function Bo(n,e,t,o){o||n.tagName.indexOf("-")>-1?Ro(n,e,t):oo(e)?io(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):eo(e)?n.setAttribute(e,function(n,e){return io(e)||"false"===e?"false":"contenteditable"===n&&to(e)?e:"true"}(e,t)):ao(e)?io(t)?n.removeAttributeNS(ro,so(e)):n.setAttributeNS(ro,e,t):Ro(n,e,t)}function Ro(n,e,t){if(io(t))n.removeAttribute(e);else{if(Z&&!K&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var o=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",o)};n.addEventListener("input",o),n.__ieph=!0}n.setAttribute(e,t)}}var Do={create:zo,update:zo};function Mo(n,e){var t=e.elm,o=e.data,r=n.data;if(!(a(o.staticClass)&&a(o.class)&&(a(r)||a(r.staticClass)&&a(r.class)))){var i=lo(e),l=t._transitionClasses;s(l)&&(i=uo(i,po(l))),i!==t._prevClass&&(t.setAttribute("class",i),t._prevClass=i)}}var Lo,No={create:Mo,update:Mo};function qo(n,e,t){var o=Lo;return function r(){var a=e.apply(null,arguments);null!==a&&Wo(n,r,t,o)}}var Fo=Oe&&!(en&&Number(en[1])<=53);function Uo(n,e,t,o){if(Fo){var r=st,a=e;e=a._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=r||n.timeStamp<=0||n.target.ownerDocument!==document)return a.apply(this,arguments)}}Lo.addEventListener(n,e,on?{capture:t,passive:o}:t)}function Wo(n,e,t,o){(o||Lo).removeEventListener(n,e._wrapper||e,t)}function Ho(n,e){if(!a(n.data.on)||!a(e.data.on)){var t=e.data.on||{},o=n.data.on||{};Lo=e.elm||n.elm,function(n){if(s(n.__r)){var e=Z?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}s(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),Hn(t,o,Uo,Wo,qo,e.context),Lo=void 0}}var Jo,Vo={create:Ho,update:Ho,destroy:function(n){return Ho(n,ko)}};function Xo(n,e){if(!a(n.data.domProps)||!a(e.data.domProps)){var t,o,r=e.elm,l=n.data.domProps||{},c=e.data.domProps||{};for(t in(s(c.__ob__)||i(c._v_attr_proxy))&&(c=e.data.domProps=$({},c)),l)t in c||(r[t]="");for(t in c){if(o=c[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),o===l[t])continue;1===r.childNodes.length&&r.removeChild(r.childNodes[0])}if("value"===t&&"PROGRESS"!==r.tagName){r._value=o;var u=a(o)?"":String(o);Go(r,u)&&(r.value=u)}else if("innerHTML"===t&&mo(r.tagName)&&a(r.innerHTML)){(Jo=Jo||document.createElement("div")).innerHTML="<svg>".concat(o,"</svg>");for(var p=Jo.firstChild;r.firstChild;)r.removeChild(r.firstChild);for(;p.firstChild;)r.appendChild(p.firstChild)}else if(o!==l[t])try{r[t]=o}catch(n){}}}}function Go(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,o=n._vModifiers;if(s(o)){if(o.number)return v(t)!==v(e);if(o.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Zo={create:Xo,update:Xo},Ko=k((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var o=n.split(t);o.length>1&&(e[o[0].trim()]=o[1].trim())}})),e}));function Yo(n){var e=Qo(n.style);return n.staticStyle?$(n.staticStyle,e):e}function Qo(n){return Array.isArray(n)?P(n):"string"==typeof n?Ko(n):n}var nr,er=/^--/,tr=/\s*!important$/,or=function(n,e,t){if(er.test(e))n.style.setProperty(e,t);else if(tr.test(t))n.style.setProperty(T(e),t.replace(tr,""),"important");else{var o=ar(e);if(Array.isArray(t))for(var r=0,a=t.length;r<a;r++)n.style[o]=t[r];else n.style[o]=t}},rr=["Webkit","Moz","ms"],ar=k((function(n){if(nr=nr||document.createElement("div").style,"filter"!==(n=S(n))&&n in nr)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<rr.length;t++){var o=rr[t]+e;if(o in nr)return o}}));function sr(n,e){var t=e.data,o=n.data;if(!(a(t.staticStyle)&&a(t.style)&&a(o.staticStyle)&&a(o.style))){var r,i,l=e.elm,c=o.staticStyle,u=o.normalizedStyle||o.style||{},p=c||u,d=Qo(e.data.style)||{};e.data.normalizedStyle=s(d.__ob__)?$({},d):d;var f=function(n,e){var t,o={};if(e)for(var r=n;r.componentInstance;)(r=r.componentInstance._vnode)&&r.data&&(t=Yo(r.data))&&$(o,t);(t=Yo(n.data))&&$(o,t);for(var a=n;a=a.parent;)a.data&&(t=Yo(a.data))&&$(o,t);return o}(e,!0);for(i in p)a(f[i])&&or(l,i,"");for(i in f)(r=f[i])!==p[i]&&or(l,i,null==r?"":r)}}var ir={create:sr,update:sr},lr=/\s+/;function cr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(lr).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" ".concat(n.getAttribute("class")||""," ");t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function ur(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(lr).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" ".concat(n.getAttribute("class")||""," "),o=" "+e+" ";t.indexOf(o)>=0;)t=t.replace(o," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function pr(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&$(e,dr(n.name||"v")),$(e,n),e}return"string"==typeof n?dr(n):void 0}}var dr=k((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),fr=X&&!K,hr="transition",mr="transitionend",gr="animation",vr="animationend";fr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(hr="WebkitTransition",mr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(gr="WebkitAnimation",vr="webkitAnimationEnd"));var br=X?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function yr(n){br((function(){br(n)}))}function xr(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),cr(n,e))}function wr(n,e){n._transitionClasses&&x(n._transitionClasses,e),ur(n,e)}function jr(n,e,t){var o=_r(n,e),r=o.type,a=o.timeout,s=o.propCount;if(!r)return t();var i="transition"===r?mr:vr,l=0,c=function(){n.removeEventListener(i,u),t()},u=function(e){e.target===n&&++l>=s&&c()};setTimeout((function(){l<s&&c()}),a+1),n.addEventListener(i,u)}var kr=/\b(transform|all)(,|$)/;function _r(n,e){var t,o=window.getComputedStyle(n),r=(o[hr+"Delay"]||"").split(", "),a=(o[hr+"Duration"]||"").split(", "),s=Sr(r,a),i=(o[gr+"Delay"]||"").split(", "),l=(o[gr+"Duration"]||"").split(", "),c=Sr(i,l),u=0,p=0;return"transition"===e?s>0&&(t="transition",u=s,p=a.length):"animation"===e?c>0&&(t="animation",u=c,p=l.length):p=(t=(u=Math.max(s,c))>0?s>c?"transition":"animation":null)?"transition"===t?a.length:l.length:0,{type:t,timeout:u,propCount:p,hasTransform:"transition"===t&&kr.test(o[hr+"Property"])}}function Sr(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return Er(e)+Er(n[t])})))}function Er(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function Ar(n,e){var t=n.elm;s(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var o=pr(n.data.transition);if(!a(o)&&!s(t._enterCb)&&1===t.nodeType){for(var r=o.css,i=o.type,l=o.enterClass,p=o.enterToClass,d=o.enterActiveClass,f=o.appearClass,h=o.appearToClass,m=o.appearActiveClass,g=o.beforeEnter,b=o.enter,y=o.afterEnter,x=o.enterCancelled,w=o.beforeAppear,j=o.appear,k=o.afterAppear,_=o.appearCancelled,S=o.duration,E=Ge,A=Ge.$vnode;A&&A.parent;)E=A.context,A=A.parent;var T=!E._isMounted||!n.isRootInsert;if(!T||j||""===j){var C=T&&f?f:l,O=T&&m?m:d,$=T&&h?h:p,P=T&&w||g,I=T&&c(j)?j:b,z=T&&k||y,B=T&&_||x,R=v(u(S)?S.enter:S);0;var D=!1!==r&&!K,L=Or(I),N=t._enterCb=M((function(){D&&(wr(t,$),wr(t,O)),N.cancelled?(D&&wr(t,C),B&&B(t)):z&&z(t),t._enterCb=null}));n.data.show||Jn(n,"insert",(function(){var e=t.parentNode,o=e&&e._pending&&e._pending[n.key];o&&o.tag===n.tag&&o.elm._leaveCb&&o.elm._leaveCb(),I&&I(t,N)})),P&&P(t),D&&(xr(t,C),xr(t,O),yr((function(){wr(t,C),N.cancelled||(xr(t,$),L||(Cr(R)?setTimeout(N,R):jr(t,i,N)))}))),n.data.show&&(e&&e(),I&&I(t,N)),D||L||N()}}}function Tr(n,e){var t=n.elm;s(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var o=pr(n.data.transition);if(a(o)||1!==t.nodeType)return e();if(!s(t._leaveCb)){var r=o.css,i=o.type,l=o.leaveClass,c=o.leaveToClass,p=o.leaveActiveClass,d=o.beforeLeave,f=o.leave,h=o.afterLeave,m=o.leaveCancelled,g=o.delayLeave,b=o.duration,y=!1!==r&&!K,x=Or(f),w=v(u(b)?b.leave:b);0;var j=t._leaveCb=M((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),y&&(wr(t,c),wr(t,p)),j.cancelled?(y&&wr(t,l),m&&m(t)):(e(),h&&h(t)),t._leaveCb=null}));g?g(k):k()}function k(){j.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),d&&d(t),y&&(xr(t,l),xr(t,p),yr((function(){wr(t,l),j.cancelled||(xr(t,c),x||(Cr(w)?setTimeout(j,w):jr(t,i,j)))}))),f&&f(t,j),y||x||j())}}function Cr(n){return"number"==typeof n&&!isNaN(n)}function Or(n){if(a(n))return!1;var e=n.fns;return s(e)?Or(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function $r(n,e){!0!==e.data.show&&Ar(e)}var Pr=function(n){var e,t,o={},c=n.modules,u=n.nodeOps;for(e=0;e<_o.length;++e)for(o[_o[e]]=[],t=0;t<c.length;++t)s(c[t][_o[e]])&&o[_o[e]].push(c[t][_o[e]]);function p(n){var e=u.parentNode(n);s(e)&&u.removeChild(e,n)}function d(n,e,t,r,a,l,c){if(s(n.elm)&&s(l)&&(n=l[c]=gn(n)),n.isRootInsert=!a,!function(n,e,t,r){var a=n.data;if(s(a)){var l=s(n.componentInstance)&&a.keepAlive;if(s(a=a.hook)&&s(a=a.init)&&a(n,!1),s(n.componentInstance))return f(n,e),h(t,n.elm,r),i(l)&&function(n,e,t,r){var a,i=n;for(;i.componentInstance;)if(i=i.componentInstance._vnode,s(a=i.data)&&s(a=a.transition)){for(a=0;a<o.activate.length;++a)o.activate[a](ko,i);e.push(i);break}h(t,n.elm,r)}(n,e,t,r),!0}}(n,e,t,r)){var p=n.data,d=n.children,g=n.tag;s(g)?(n.elm=n.ns?u.createElementNS(n.ns,g):u.createElement(g,n),y(n),m(n,d,e),s(p)&&v(n,e),h(t,n.elm,r)):i(n.isComment)?(n.elm=u.createComment(n.text),h(t,n.elm,r)):(n.elm=u.createTextNode(n.text),h(t,n.elm,r))}}function f(n,e){s(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,g(n)?(v(n,e),y(n)):(wo(n),e.push(n))}function h(n,e,t){s(n)&&(s(t)?u.parentNode(t)===n&&u.insertBefore(n,e,t):u.appendChild(n,e))}function m(n,e,t){if(r(e)){0;for(var o=0;o<e.length;++o)d(e[o],t,n.elm,null,!0,e,o)}else l(n.text)&&u.appendChild(n.elm,u.createTextNode(String(n.text)))}function g(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return s(n.tag)}function v(n,t){for(var r=0;r<o.create.length;++r)o.create[r](ko,n);s(e=n.data.hook)&&(s(e.create)&&e.create(ko,n),s(e.insert)&&t.push(n))}function y(n){var e;if(s(e=n.fnScopeId))u.setStyleScope(n.elm,e);else for(var t=n;t;)s(e=t.context)&&s(e=e.$options._scopeId)&&u.setStyleScope(n.elm,e),t=t.parent;s(e=Ge)&&e!==n.context&&e!==n.fnContext&&s(e=e.$options._scopeId)&&u.setStyleScope(n.elm,e)}function x(n,e,t,o,r,a){for(;o<=r;++o)d(t[o],a,n,e,!1,t,o)}function w(n){var e,t,r=n.data;if(s(r))for(s(e=r.hook)&&s(e=e.destroy)&&e(n),e=0;e<o.destroy.length;++e)o.destroy[e](n);if(s(e=n.children))for(t=0;t<n.children.length;++t)w(n.children[t])}function j(n,e,t){for(;e<=t;++e){var o=n[e];s(o)&&(s(o.tag)?(k(o),w(o)):p(o.elm))}}function k(n,e){if(s(e)||s(n.data)){var t,r=o.remove.length+1;for(s(e)?e.listeners+=r:e=function(n,e){function t(){0==--t.listeners&&p(n)}return t.listeners=e,t}(n.elm,r),s(t=n.componentInstance)&&s(t=t._vnode)&&s(t.data)&&k(t,e),t=0;t<o.remove.length;++t)o.remove[t](n,e);s(t=n.data.hook)&&s(t=t.remove)?t(n,e):e()}else p(n.elm)}function _(n,e,t,o){for(var r=t;r<o;r++){var a=e[r];if(s(a)&&So(n,a))return r}}function S(n,e,t,r,l,c){if(n!==e){s(e.elm)&&s(r)&&(e=r[l]=gn(e));var p=e.elm=n.elm;if(i(n.isAsyncPlaceholder))s(e.asyncFactory.resolved)?T(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(i(e.isStatic)&&i(n.isStatic)&&e.key===n.key&&(i(e.isCloned)||i(e.isOnce)))e.componentInstance=n.componentInstance;else{var f,h=e.data;s(h)&&s(f=h.hook)&&s(f=f.prepatch)&&f(n,e);var m=n.children,v=e.children;if(s(h)&&g(e)){for(f=0;f<o.update.length;++f)o.update[f](n,e);s(f=h.hook)&&s(f=f.update)&&f(n,e)}a(e.text)?s(m)&&s(v)?m!==v&&function(n,e,t,o,r){var i,l,c,p=0,f=0,h=e.length-1,m=e[0],g=e[h],v=t.length-1,b=t[0],y=t[v],w=!r;for(0;p<=h&&f<=v;)a(m)?m=e[++p]:a(g)?g=e[--h]:So(m,b)?(S(m,b,o,t,f),m=e[++p],b=t[++f]):So(g,y)?(S(g,y,o,t,v),g=e[--h],y=t[--v]):So(m,y)?(S(m,y,o,t,v),w&&u.insertBefore(n,m.elm,u.nextSibling(g.elm)),m=e[++p],y=t[--v]):So(g,b)?(S(g,b,o,t,f),w&&u.insertBefore(n,g.elm,m.elm),g=e[--h],b=t[++f]):(a(i)&&(i=Eo(e,p,h)),a(l=s(b.key)?i[b.key]:_(b,e,p,h))?d(b,o,n,m.elm,!1,t,f):So(c=e[l],b)?(S(c,b,o,t,f),e[l]=void 0,w&&u.insertBefore(n,c.elm,m.elm)):d(b,o,n,m.elm,!1,t,f),b=t[++f]);p>h?x(n,a(t[v+1])?null:t[v+1].elm,t,f,v,o):f>v&&j(e,p,h)}(p,m,v,t,c):s(v)?(s(n.text)&&u.setTextContent(p,""),x(p,null,v,0,v.length-1,t)):s(m)?j(m,0,m.length-1):s(n.text)&&u.setTextContent(p,""):n.text!==e.text&&u.setTextContent(p,e.text),s(h)&&s(f=h.hook)&&s(f=f.postpatch)&&f(n,e)}}}function E(n,e,t){if(i(t)&&s(n.parent))n.parent.data.pendingInsert=e;else for(var o=0;o<e.length;++o)e[o].data.hook.insert(e[o])}var A=b("attrs,class,staticClass,staticStyle,key");function T(n,e,t,o){var r,a=e.tag,l=e.data,c=e.children;if(o=o||l&&l.pre,e.elm=n,i(e.isComment)&&s(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(s(l)&&(s(r=l.hook)&&s(r=r.init)&&r(e,!0),s(r=e.componentInstance)))return f(e,t),!0;if(s(a)){if(s(c))if(n.hasChildNodes())if(s(r=l)&&s(r=r.domProps)&&s(r=r.innerHTML)){if(r!==n.innerHTML)return!1}else{for(var u=!0,p=n.firstChild,d=0;d<c.length;d++){if(!p||!T(p,c[d],t,o)){u=!1;break}p=p.nextSibling}if(!u||p)return!1}else m(e,c,t);if(s(l)){var h=!1;for(var g in l)if(!A(g)){h=!0,v(e,t);break}!h&&l.class&&qe(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,r){if(!a(e)){var l,c=!1,p=[];if(a(n))c=!0,d(e,p);else{var f=s(n.nodeType);if(!f&&So(n,e))S(n,e,p,null,null,r);else{if(f){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),i(t)&&T(n,e,p))return E(e,p,!0),n;l=n,n=new fn(u.tagName(l).toLowerCase(),{},[],void 0,l)}var h=n.elm,m=u.parentNode(h);if(d(e,p,h._leaveCb?null:m,u.nextSibling(h)),s(e.parent))for(var v=e.parent,b=g(e);v;){for(var y=0;y<o.destroy.length;++y)o.destroy[y](v);if(v.elm=e.elm,b){for(var x=0;x<o.create.length;++x)o.create[x](ko,v);var k=v.data.hook.insert;if(k.merged)for(var _=1;_<k.fns.length;_++)k.fns[_]()}else wo(v);v=v.parent}s(m)?j([n],0,0):s(n.tag)&&w(n)}}return E(e,p,c),e.elm}s(n)&&w(n)}}({nodeOps:yo,modules:[Do,No,Vo,Zo,ir,X?{create:$r,activate:$r,remove:function(n,e){!0!==n.data.show?Tr(n,e):e()}}:{}].concat(Io)});K&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&Nr(n,"input")}));var Ir={inserted:function(n,e,t,o){"select"===t.tag?(o.elm&&!o.elm._vOptions?Jn(t,"postpatch",(function(){Ir.componentUpdated(n,e,t)})):zr(n,e,t.context),n._vOptions=[].map.call(n.options,Dr)):("textarea"===t.tag||bo(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",Mr),n.addEventListener("compositionend",Lr),n.addEventListener("change",Lr),K&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){zr(n,e,t.context);var o=n._vOptions,r=n._vOptions=[].map.call(n.options,Dr);if(r.some((function(n,e){return!R(n,o[e])})))(n.multiple?e.value.some((function(n){return Rr(n,r)})):e.value!==e.oldValue&&Rr(e.value,r))&&Nr(n,"change")}}};function zr(n,e,t){Br(n,e,t),(Z||Y)&&setTimeout((function(){Br(n,e,t)}),0)}function Br(n,e,t){var o=e.value,r=n.multiple;if(!r||Array.isArray(o)){for(var a,s,i=0,l=n.options.length;i<l;i++)if(s=n.options[i],r)a=D(o,Dr(s))>-1,s.selected!==a&&(s.selected=a);else if(R(Dr(s),o))return void(n.selectedIndex!==i&&(n.selectedIndex=i));r||(n.selectedIndex=-1)}}function Rr(n,e){return e.every((function(e){return!R(e,n)}))}function Dr(n){return"_value"in n?n._value:n.value}function Mr(n){n.target.composing=!0}function Lr(n){n.target.composing&&(n.target.composing=!1,Nr(n.target,"input"))}function Nr(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function qr(n){return!n.componentInstance||n.data&&n.data.transition?n:qr(n.componentInstance._vnode)}var Fr={model:Ir,show:{bind:function(n,e,t){var o=e.value,r=(t=qr(t)).data&&t.data.transition,a=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;o&&r?(t.data.show=!0,Ar(t,(function(){n.style.display=a}))):n.style.display=o?a:"none"},update:function(n,e,t){var o=e.value;!o!=!e.oldValue&&((t=qr(t)).data&&t.data.transition?(t.data.show=!0,o?Ar(t,(function(){n.style.display=n.__vOriginalDisplay})):Tr(t,(function(){n.style.display="none"}))):n.style.display=o?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,o,r){r||(n.style.display=n.__vOriginalDisplay)}}},Ur={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Wr(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Wr(ke(e.children)):n}function Hr(n){var e={},t=n.$options;for(var o in t.propsData)e[o]=n[o];var r=t._parentListeners;for(var o in r)e[S(o)]=r[o];return e}function Jr(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Vr=function(n){return n.tag||fe(n)},Xr=function(n){return"show"===n.name},Gr={name:"transition",props:Ur,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Vr)).length){0;var o=this.mode;0;var r=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return r;var a=Wr(r);if(!a)return r;if(this._leaving)return Jr(n,r);var s="__transition-".concat(this._uid,"-");a.key=null==a.key?a.isComment?s+"comment":s+a.tag:l(a.key)?0===String(a.key).indexOf(s)?a.key:s+a.key:a.key;var i=(a.data||(a.data={})).transition=Hr(this),c=this._vnode,u=Wr(c);if(a.data.directives&&a.data.directives.some(Xr)&&(a.data.show=!0),u&&u.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(a,u)&&!fe(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var p=u.data.transition=$({},i);if("out-in"===o)return this._leaving=!0,Jn(p,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Jr(n,r);if("in-out"===o){if(fe(a))return c;var d,f=function(){d()};Jn(i,"afterEnter",f),Jn(i,"enterCancelled",f),Jn(p,"delayLeave",(function(n){d=n}))}}return r}}},Zr=$({tag:String,moveClass:String},Ur);function Kr(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Yr(n){n.data.newPos=n.elm.getBoundingClientRect()}function Qr(n){var e=n.data.pos,t=n.data.newPos,o=e.left-t.left,r=e.top-t.top;if(o||r){n.data.moved=!0;var a=n.elm.style;a.transform=a.WebkitTransform="translate(".concat(o,"px,").concat(r,"px)"),a.transitionDuration="0s"}}delete Zr.mode;var na={Transition:Gr,TransitionGroup:{props:Zr,beforeMount:function(){var n=this,e=this._update;this._update=function(t,o){var r=Ze(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,r(),e.call(n,t,o)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),o=this.prevChildren=this.children,r=this.$slots.default||[],a=this.children=[],s=Hr(this),i=0;i<r.length;i++){if((u=r[i]).tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))a.push(u),t[u.key]=u,(u.data||(u.data={})).transition=s;else;}if(o){var l=[],c=[];for(i=0;i<o.length;i++){var u;(u=o[i]).data.transition=s,u.data.pos=u.elm.getBoundingClientRect(),t[u.key]?l.push(u):c.push(u)}this.kept=n(e,null,l),this.removed=c}return n(e,null,a)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Kr),n.forEach(Yr),n.forEach(Qr),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,o=t.style;xr(t,e),o.transform=o.WebkitTransform=o.transitionDuration="",t.addEventListener(mr,t._moveCb=function n(o){o&&o.target!==t||o&&!/transform$/.test(o.propertyName)||(t.removeEventListener(mr,n),t._moveCb=null,wr(t,e))})}})))},methods:{hasMove:function(n,e){if(!fr)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){ur(t,n)})),cr(t,e),t.style.display="none",this.$el.appendChild(t);var o=_r(t);return this.$el.removeChild(t),this._hasMove=o.hasTransform}}}};function ea(n,e){for(var t in e)n[t]=e[t];return n}Ht.config.mustUseProp=function(n,e,t){return"value"===t&&no(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Ht.config.isReservedTag=go,Ht.config.isReservedAttr=Qt,Ht.config.getTagNamespace=function(n){return mo(n)?"svg":"math"===n?"math":void 0},Ht.config.isUnknownElement=function(n){if(!X)return!0;if(go(n))return!1;if(n=n.toLowerCase(),null!=vo[n])return vo[n];var e=document.createElement(n);return n.indexOf("-")>-1?vo[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:vo[n]=/HTMLUnknownElement/.test(e.toString())},$(Ht.options.directives,Fr),$(Ht.options.components,na),Ht.prototype.__patch__=X?Pr:I,Ht.prototype.$mount=function(n,e){return function(n,e,t){var o;n.$el=e,n.$options.render||(n.$options.render=hn),Qe(n,"beforeMount"),o=function(){n._update(n._render(),t)},new We(n,o,I,{before:function(){n._isMounted&&!n._isDestroyed&&Qe(n,"beforeUpdate")}},!0),t=!1;var r=n._preWatchers;if(r)for(var a=0;a<r.length;a++)r[a].run();return null==n.$vnode&&(n._isMounted=!0,Qe(n,"mounted")),n}(this,n=n&&X?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},X&&setTimeout((function(){F.devtools&&sn&&sn.emit("init",Ht)}),0);var ta=/[!'()*]/g,oa=function(n){return"%"+n.charCodeAt(0).toString(16)},ra=/%2C/g,aa=function(n){return encodeURIComponent(n).replace(ta,oa).replace(ra,",")};function sa(n){try{return decodeURIComponent(n)}catch(n){0}return n}var ia=function(n){return null==n||"object"==typeof n?n:String(n)};function la(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),o=sa(t.shift()),r=t.length>0?sa(t.join("=")):null;void 0===e[o]?e[o]=r:Array.isArray(e[o])?e[o].push(r):e[o]=[e[o],r]})),e):e}function ca(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return aa(e);if(Array.isArray(t)){var o=[];return t.forEach((function(n){void 0!==n&&(null===n?o.push(aa(e)):o.push(aa(e)+"="+aa(n)))})),o.join("&")}return aa(e)+"="+aa(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var ua=/\/?$/;function pa(n,e,t,o){var r=o&&o.options.stringifyQuery,a=e.query||{};try{a=da(a)}catch(n){}var s={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:a,params:e.params||{},fullPath:ma(e,r),matched:n?ha(n):[]};return t&&(s.redirectedFrom=ma(t,r)),Object.freeze(s)}function da(n){if(Array.isArray(n))return n.map(da);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=da(n[t]);return e}return n}var fa=pa(null,{path:"/"});function ha(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function ma(n,e){var t=n.path,o=n.query;void 0===o&&(o={});var r=n.hash;return void 0===r&&(r=""),(t||"/")+(e||ca)(o)+r}function ga(n,e,t){return e===fa?n===e:!!e&&(n.path&&e.path?n.path.replace(ua,"")===e.path.replace(ua,"")&&(t||n.hash===e.hash&&va(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&va(n.query,e.query)&&va(n.params,e.params))))}function va(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),o=Object.keys(e).sort();return t.length===o.length&&t.every((function(t,r){var a=n[t];if(o[r]!==t)return!1;var s=e[t];return null==a||null==s?a===s:"object"==typeof a&&"object"==typeof s?va(a,s):String(a)===String(s)}))}function ba(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var o in t.instances){var r=t.instances[o],a=t.enteredCbs[o];if(r&&a){delete t.enteredCbs[o];for(var s=0;s<a.length;s++)r._isBeingDestroyed||a[s](r)}}}}var ya={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,o=e.children,r=e.parent,a=e.data;a.routerView=!0;for(var s=r.$createElement,i=t.name,l=r.$route,c=r._routerViewCache||(r._routerViewCache={}),u=0,p=!1;r&&r._routerRoot!==r;){var d=r.$vnode?r.$vnode.data:{};d.routerView&&u++,d.keepAlive&&r._directInactive&&r._inactive&&(p=!0),r=r.$parent}if(a.routerViewDepth=u,p){var f=c[i],h=f&&f.component;return h?(f.configProps&&xa(h,a,f.route,f.configProps),s(h,a,o)):s()}var m=l.matched[u],g=m&&m.components[i];if(!m||!g)return c[i]=null,s();c[i]={component:g},a.registerRouteInstance=function(n,e){var t=m.instances[i];(e&&t!==n||!e&&t===n)&&(m.instances[i]=e)},(a.hook||(a.hook={})).prepatch=function(n,e){m.instances[i]=e.componentInstance},a.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==m.instances[i]&&(m.instances[i]=n.componentInstance),ba(l)};var v=m.props&&m.props[i];return v&&(ea(c[i],{route:l,configProps:v}),xa(g,a,l,v)),s(g,a,o)}};function xa(n,e,t,o){var r=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,o);if(r){r=e.props=ea({},r);var a=e.attrs=e.attrs||{};for(var s in r)n.props&&s in n.props||(a[s]=r[s],delete r[s])}}function wa(n,e,t){var o=n.charAt(0);if("/"===o)return n;if("?"===o||"#"===o)return e+n;var r=e.split("/");t&&r[r.length-1]||r.pop();for(var a=n.replace(/^\//,"").split("/"),s=0;s<a.length;s++){var i=a[s];".."===i?r.pop():"."!==i&&r.push(i)}return""!==r[0]&&r.unshift(""),r.join("/")}function ja(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var ka=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},_a=Ma,Sa=Oa,Ea=function(n,e){return Pa(Oa(n,e),e)},Aa=Pa,Ta=Da,Ca=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Oa(n,e){for(var t,o=[],r=0,a=0,s="",i=e&&e.delimiter||"/";null!=(t=Ca.exec(n));){var l=t[0],c=t[1],u=t.index;if(s+=n.slice(a,u),a=u+l.length,c)s+=c[1];else{var p=n[a],d=t[2],f=t[3],h=t[4],m=t[5],g=t[6],v=t[7];s&&(o.push(s),s="");var b=null!=d&&null!=p&&p!==d,y="+"===g||"*"===g,x="?"===g||"*"===g,w=t[2]||i,j=h||m;o.push({name:f||r++,prefix:d||"",delimiter:w,optional:x,repeat:y,partial:b,asterisk:!!v,pattern:j?za(j):v?".*":"[^"+Ia(w)+"]+?"})}}return a<n.length&&(s+=n.substr(a)),s&&o.push(s),o}function $a(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function Pa(n,e){for(var t=new Array(n.length),o=0;o<n.length;o++)"object"==typeof n[o]&&(t[o]=new RegExp("^(?:"+n[o].pattern+")$",Ra(e)));return function(e,o){for(var r="",a=e||{},s=(o||{}).pretty?$a:encodeURIComponent,i=0;i<n.length;i++){var l=n[i];if("string"!=typeof l){var c,u=a[l.name];if(null==u){if(l.optional){l.partial&&(r+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(ka(u)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var p=0;p<u.length;p++){if(c=s(u[p]),!t[i].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");r+=(0===p?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(u).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):s(u),!t[i].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');r+=l.prefix+c}}else r+=l}return r}}function Ia(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function za(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function Ba(n,e){return n.keys=e,n}function Ra(n){return n&&n.sensitive?"":"i"}function Da(n,e,t){ka(e)||(t=e||t,e=[]);for(var o=(t=t||{}).strict,r=!1!==t.end,a="",s=0;s<n.length;s++){var i=n[s];if("string"==typeof i)a+=Ia(i);else{var l=Ia(i.prefix),c="(?:"+i.pattern+")";e.push(i),i.repeat&&(c+="(?:"+l+c+")*"),a+=c=i.optional?i.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var u=Ia(t.delimiter||"/"),p=a.slice(-u.length)===u;return o||(a=(p?a.slice(0,-u.length):a)+"(?:"+u+"(?=$))?"),a+=r?"$":o&&p?"":"(?="+u+"|$)",Ba(new RegExp("^"+a,Ra(t)),e)}function Ma(n,e,t){return ka(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var o=0;o<t.length;o++)e.push({name:o,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Ba(n,e)}(n,e):ka(n)?function(n,e,t){for(var o=[],r=0;r<n.length;r++)o.push(Ma(n[r],e,t).source);return Ba(new RegExp("(?:"+o.join("|")+")",Ra(t)),e)}(n,e,t):function(n,e,t){return Da(Oa(n,t),e,t)}(n,e,t)}_a.parse=Sa,_a.compile=Ea,_a.tokensToFunction=Aa,_a.tokensToRegExp=Ta;var La=Object.create(null);function Na(n,e,t){e=e||{};try{var o=La[n]||(La[n]=_a.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),o(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function qa(n,e,t,o){var r="string"==typeof n?{path:n}:n;if(r._normalized)return r;if(r.name){var a=(r=ea({},n)).params;return a&&"object"==typeof a&&(r.params=ea({},a)),r}if(!r.path&&r.params&&e){(r=ea({},r))._normalized=!0;var s=ea(ea({},e.params),r.params);if(e.name)r.name=e.name,r.params=s;else if(e.matched.length){var i=e.matched[e.matched.length-1].path;r.path=Na(i,s,e.path)}else 0;return r}var l=function(n){var e="",t="",o=n.indexOf("#");o>=0&&(e=n.slice(o),n=n.slice(0,o));var r=n.indexOf("?");return r>=0&&(t=n.slice(r+1),n=n.slice(0,r)),{path:n,query:t,hash:e}}(r.path||""),c=e&&e.path||"/",u=l.path?wa(l.path,c,t||r.append):c,p=function(n,e,t){void 0===e&&(e={});var o,r=t||la;try{o=r(n||"")}catch(n){o={}}for(var a in e){var s=e[a];o[a]=Array.isArray(s)?s.map(ia):ia(s)}return o}(l.query,r.query,o&&o.options.parseQuery),d=r.hash||l.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:u,query:p,hash:d}}var Fa,Ua=function(){},Wa={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,o=this.$route,r=t.resolve(this.to,o,this.append),a=r.location,s=r.route,i=r.href,l={},c=t.options.linkActiveClass,u=t.options.linkExactActiveClass,p=null==c?"router-link-active":c,d=null==u?"router-link-exact-active":u,f=null==this.activeClass?p:this.activeClass,h=null==this.exactActiveClass?d:this.exactActiveClass,m=s.redirectedFrom?pa(null,qa(s.redirectedFrom),null,t):s;l[h]=ga(o,m,this.exactPath),l[f]=this.exact||this.exactPath?l[h]:function(n,e){return 0===n.path.replace(ua,"/").indexOf(e.path.replace(ua,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(o,m);var g=l[h]?this.ariaCurrentValue:null,v=function(n){Ha(n)&&(e.replace?t.replace(a,Ua):t.push(a,Ua))},b={click:Ha};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=v})):b[this.event]=v;var y={class:l},x=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:i,route:s,navigate:v,isActive:l[f],isExactActive:l[h]});if(x){if(1===x.length)return x[0];if(x.length>1||!x.length)return 0===x.length?n():n("span",{},x)}if("a"===this.tag)y.on=b,y.attrs={href:i,"aria-current":g};else{var w=function n(e){var t;if(e)for(var o=0;o<e.length;o++){if("a"===(t=e[o]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(w){w.isStatic=!1;var j=w.data=ea({},w.data);for(var k in j.on=j.on||{},j.on){var _=j.on[k];k in b&&(j.on[k]=Array.isArray(_)?_:[_])}for(var S in b)S in j.on?j.on[S].push(b[S]):j.on[S]=v;var E=w.data.attrs=ea({},w.data.attrs);E.href=i,E["aria-current"]=g}else y.on=b}return n(this.tag,y,this.$slots.default)}};function Ha(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Ja="undefined"!=typeof window;function Va(n,e,t,o,r){var a=e||[],s=t||Object.create(null),i=o||Object.create(null);n.forEach((function(n){!function n(e,t,o,r,a,s){var i=r.path,l=r.name;0;var c=r.pathToRegexpOptions||{},u=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return ja(e.path+"/"+n)}(i,a,c.strict);"boolean"==typeof r.caseSensitive&&(c.sensitive=r.caseSensitive);var p={path:u,regex:Xa(u,c),components:r.components||{default:r.component},alias:r.alias?"string"==typeof r.alias?[r.alias]:r.alias:[],instances:{},enteredCbs:{},name:l,parent:a,matchAs:s,redirect:r.redirect,beforeEnter:r.beforeEnter,meta:r.meta||{},props:null==r.props?{}:r.components?r.props:{default:r.props}};r.children&&r.children.forEach((function(r){var a=s?ja(s+"/"+r.path):void 0;n(e,t,o,r,p,a)}));t[p.path]||(e.push(p.path),t[p.path]=p);if(void 0!==r.alias)for(var d=Array.isArray(r.alias)?r.alias:[r.alias],f=0;f<d.length;++f){0;var h={path:d[f],children:r.children};n(e,t,o,h,a,p.path||"/")}l&&(o[l]||(o[l]=p))}(a,s,i,n,r)}));for(var l=0,c=a.length;l<c;l++)"*"===a[l]&&(a.push(a.splice(l,1)[0]),c--,l--);return{pathList:a,pathMap:s,nameMap:i}}function Xa(n,e){return _a(n,[],e)}function Ga(n,e){var t=Va(n),o=t.pathList,r=t.pathMap,a=t.nameMap;function s(n,t,s){var i=qa(n,t,!1,e),c=i.name;if(c){var u=a[c];if(!u)return l(null,i);var p=u.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof i.params&&(i.params={}),t&&"object"==typeof t.params)for(var d in t.params)!(d in i.params)&&p.indexOf(d)>-1&&(i.params[d]=t.params[d]);return i.path=Na(u.path,i.params),l(u,i,s)}if(i.path){i.params={};for(var f=0;f<o.length;f++){var h=o[f],m=r[h];if(Za(m.regex,i.path,i.params))return l(m,i,s)}}return l(null,i)}function i(n,t){var o=n.redirect,r="function"==typeof o?o(pa(n,t,null,e)):o;if("string"==typeof r&&(r={path:r}),!r||"object"!=typeof r)return l(null,t);var i=r,c=i.name,u=i.path,p=t.query,d=t.hash,f=t.params;if(p=i.hasOwnProperty("query")?i.query:p,d=i.hasOwnProperty("hash")?i.hash:d,f=i.hasOwnProperty("params")?i.params:f,c){a[c];return s({_normalized:!0,name:c,query:p,hash:d,params:f},void 0,t)}if(u){var h=function(n,e){return wa(n,e.parent?e.parent.path:"/",!0)}(u,n);return s({_normalized:!0,path:Na(h,f),query:p,hash:d},void 0,t)}return l(null,t)}function l(n,t,o){return n&&n.redirect?i(n,o||t):n&&n.matchAs?function(n,e,t){var o=s({_normalized:!0,path:Na(t,e.params)});if(o){var r=o.matched,a=r[r.length-1];return e.params=o.params,l(a,e)}return l(null,e)}(0,t,n.matchAs):pa(n,t,o,e)}return{match:s,addRoute:function(n,e){var t="object"!=typeof n?a[n]:void 0;Va([e||n],o,r,a,t),t&&t.alias.length&&Va(t.alias.map((function(n){return{path:n,children:[e]}})),o,r,a,t)},getRoutes:function(){return o.map((function(n){return r[n]}))},addRoutes:function(n){Va(n,o,r,a)}}}function Za(n,e,t){var o=e.match(n);if(!o)return!1;if(!t)return!0;for(var r=1,a=o.length;r<a;++r){var s=n.keys[r-1];s&&(t[s.name||"pathMatch"]="string"==typeof o[r]?sa(o[r]):o[r])}return!0}var Ka=Ja&&window.performance&&window.performance.now?window.performance:Date;function Ya(){return Ka.now().toFixed(3)}var Qa=Ya();function ns(){return Qa}function es(n){return Qa=n}var ts=Object.create(null);function os(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=ea({},window.history.state);return t.key=ns(),window.history.replaceState(t,"",e),window.addEventListener("popstate",ss),function(){window.removeEventListener("popstate",ss)}}function rs(n,e,t,o){if(n.app){var r=n.options.scrollBehavior;r&&n.app.$nextTick((function(){var a=function(){var n=ns();if(n)return ts[n]}(),s=r.call(n,e,t,o?a:null);s&&("function"==typeof s.then?s.then((function(n){ps(n,a)})).catch((function(n){0})):ps(s,a))}))}}function as(){var n=ns();n&&(ts[n]={x:window.pageXOffset,y:window.pageYOffset})}function ss(n){as(),n.state&&n.state.key&&es(n.state.key)}function is(n){return cs(n.x)||cs(n.y)}function ls(n){return{x:cs(n.x)?n.x:window.pageXOffset,y:cs(n.y)?n.y:window.pageYOffset}}function cs(n){return"number"==typeof n}var us=/^#\d/;function ps(n,e){var t,o="object"==typeof n;if(o&&"string"==typeof n.selector){var r=us.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(r){var a=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),o=n.getBoundingClientRect();return{x:o.left-t.left-e.x,y:o.top-t.top-e.y}}(r,a={x:cs((t=a).x)?t.x:0,y:cs(t.y)?t.y:0})}else is(n)&&(e=ls(n))}else o&&is(n)&&(e=ls(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var ds,fs=Ja&&((-1===(ds=window.navigator.userAgent).indexOf("Android 2.")&&-1===ds.indexOf("Android 4.0")||-1===ds.indexOf("Mobile Safari")||-1!==ds.indexOf("Chrome")||-1!==ds.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function hs(n,e){as();var t=window.history;try{if(e){var o=ea({},t.state);o.key=ns(),t.replaceState(o,"",n)}else t.pushState({key:es(Ya())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function ms(n){hs(n,!0)}function gs(n,e,t){var o=function(r){r>=n.length?t():n[r]?e(n[r],(function(){o(r+1)})):o(r+1)};o(0)}var vs={redirected:2,aborted:4,cancelled:8,duplicated:16};function bs(n,e){return xs(n,e,vs.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return ws.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function ys(n,e){return xs(n,e,vs.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function xs(n,e,t,o){var r=new Error(o);return r._isRouter=!0,r.from=n,r.to=e,r.type=t,r}var ws=["params","query","hash"];function js(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function ks(n,e){return js(n)&&n._isRouter&&(null==e||n.type===e)}function _s(n){return function(e,t,o){var r=!1,a=0,s=null;Ss(n,(function(n,e,t,i){if("function"==typeof n&&void 0===n.cid){r=!0,a++;var l,c=Ts((function(e){var r;((r=e).__esModule||As&&"Module"===r[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:Fa.extend(e),t.components[i]=e,--a<=0&&o()})),u=Ts((function(n){var e="Failed to resolve async component "+i+": "+n;s||(s=js(n)?n:new Error(e),o(s))}));try{l=n(c,u)}catch(n){u(n)}if(l)if("function"==typeof l.then)l.then(c,u);else{var p=l.component;p&&"function"==typeof p.then&&p.then(c,u)}}})),r||o()}}function Ss(n,e){return Es(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function Es(n){return Array.prototype.concat.apply([],n)}var As="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Ts(n){var e=!1;return function(){for(var t=[],o=arguments.length;o--;)t[o]=arguments[o];if(!e)return e=!0,n.apply(this,t)}}var Cs=function(n,e){this.router=n,this.base=function(n){if(!n)if(Ja){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=fa,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Os(n,e,t,o){var r=Ss(n,(function(n,o,r,a){var s=function(n,e){"function"!=typeof n&&(n=Fa.extend(n));return n.options[e]}(n,e);if(s)return Array.isArray(s)?s.map((function(n){return t(n,o,r,a)})):t(s,o,r,a)}));return Es(o?r.reverse():r)}function $s(n,e){if(e)return function(){return n.apply(e,arguments)}}Cs.prototype.listen=function(n){this.cb=n},Cs.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},Cs.prototype.onError=function(n){this.errorCbs.push(n)},Cs.prototype.transitionTo=function(n,e,t){var o,r=this;try{o=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var a=this.current;this.confirmTransition(o,(function(){r.updateRoute(o),e&&e(o),r.ensureURL(),r.router.afterHooks.forEach((function(n){n&&n(o,a)})),r.ready||(r.ready=!0,r.readyCbs.forEach((function(n){n(o)})))}),(function(n){t&&t(n),n&&!r.ready&&(ks(n,vs.redirected)&&a===fa||(r.ready=!0,r.readyErrorCbs.forEach((function(e){e(n)}))))}))},Cs.prototype.confirmTransition=function(n,e,t){var o=this,r=this.current;this.pending=n;var a,s,i=function(n){!ks(n)&&js(n)&&(o.errorCbs.length?o.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},l=n.matched.length-1,c=r.matched.length-1;if(ga(n,r)&&l===c&&n.matched[l]===r.matched[c])return this.ensureURL(),n.hash&&rs(this.router,r,n,!1),i(((s=xs(a=r,n,vs.duplicated,'Avoided redundant navigation to current location: "'+a.fullPath+'".')).name="NavigationDuplicated",s));var u=function(n,e){var t,o=Math.max(n.length,e.length);for(t=0;t<o&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),p=u.updated,d=u.deactivated,f=u.activated,h=[].concat(function(n){return Os(n,"beforeRouteLeave",$s,!0)}(d),this.router.beforeHooks,function(n){return Os(n,"beforeRouteUpdate",$s)}(p),f.map((function(n){return n.beforeEnter})),_s(f)),m=function(e,t){if(o.pending!==n)return i(ys(r,n));try{e(n,r,(function(e){!1===e?(o.ensureURL(!0),i(function(n,e){return xs(n,e,vs.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(r,n))):js(e)?(o.ensureURL(!0),i(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(i(bs(r,n)),"object"==typeof e&&e.replace?o.replace(e):o.push(e)):t(e)}))}catch(n){i(n)}};gs(h,m,(function(){gs(function(n){return Os(n,"beforeRouteEnter",(function(n,e,t,o){return function(n,e,t){return function(o,r,a){return n(o,r,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),a(n)}))}}(n,t,o)}))}(f).concat(o.router.resolveHooks),m,(function(){if(o.pending!==n)return i(ys(r,n));o.pending=null,e(n),o.router.app&&o.router.app.$nextTick((function(){ba(n)}))}))}))},Cs.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},Cs.prototype.setupListeners=function(){},Cs.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=fa,this.pending=null};var Ps=function(n){function e(e,t){n.call(this,e,t),this._startLocation=Is(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,o=fs&&t;o&&this.listeners.push(os());var r=function(){var t=n.current,r=Is(n.base);n.current===fa&&r===n._startLocation||n.transitionTo(r,(function(n){o&&rs(e,n,t,!0)}))};window.addEventListener("popstate",r),this.listeners.push((function(){window.removeEventListener("popstate",r)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,(function(n){hs(ja(o.base+n.fullPath)),rs(o.router,n,r,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,(function(n){ms(ja(o.base+n.fullPath)),rs(o.router,n,r,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(Is(this.base)!==this.current.fullPath){var e=ja(this.base+this.current.fullPath);n?hs(e):ms(e)}},e.prototype.getCurrentLocation=function(){return Is(this.base)},e}(Cs);function Is(n){var e=window.location.pathname,t=e.toLowerCase(),o=n.toLowerCase();return!n||t!==o&&0!==t.indexOf(ja(o+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var zs=function(n){function e(e,t,o){n.call(this,e,t),o&&function(n){var e=Is(n);if(!/^\/#/.test(e))return window.location.replace(ja(n+"/#"+e)),!0}(this.base)||Bs()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=fs&&e;t&&this.listeners.push(os());var o=function(){var e=n.current;Bs()&&n.transitionTo(Rs(),(function(o){t&&rs(n.router,o,e,!0),fs||Ls(o.fullPath)}))},r=fs?"popstate":"hashchange";window.addEventListener(r,o),this.listeners.push((function(){window.removeEventListener(r,o)}))}},e.prototype.push=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,(function(n){Ms(n.fullPath),rs(o.router,n,r,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var o=this,r=this.current;this.transitionTo(n,(function(n){Ls(n.fullPath),rs(o.router,n,r,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;Rs()!==e&&(n?Ms(e):Ls(e))},e.prototype.getCurrentLocation=function(){return Rs()},e}(Cs);function Bs(){var n=Rs();return"/"===n.charAt(0)||(Ls("/"+n),!1)}function Rs(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function Ds(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function Ms(n){fs?hs(Ds(n)):window.location.hash=n}function Ls(n){fs?ms(Ds(n)):window.location.replace(Ds(n))}var Ns=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var o=this;this.transitionTo(n,(function(n){o.stack=o.stack.slice(0,o.index+1).concat(n),o.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var o=this;this.transitionTo(n,(function(n){o.stack=o.stack.slice(0,o.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var o=this.stack[t];this.confirmTransition(o,(function(){var n=e.current;e.index=t,e.updateRoute(o),e.router.afterHooks.forEach((function(e){e&&e(o,n)}))}),(function(n){ks(n,vs.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(Cs),qs=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Ga(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!fs&&!1!==n.fallback,this.fallback&&(e="hash"),Ja||(e="abstract"),this.mode=e,e){case"history":this.history=new Ps(this,n.base);break;case"hash":this.history=new zs(this,n.base,this.fallback);break;case"abstract":this.history=new Ns(this,n.base);break;default:0}},Fs={currentRoute:{configurable:!0}};function Us(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}qs.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Fs.currentRoute.get=function(){return this.history&&this.history.current},qs.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof Ps||t instanceof zs){var o=function(n){t.setupListeners(),function(n){var o=t.current,r=e.options.scrollBehavior;fs&&r&&"fullPath"in n&&rs(e,n,o,!1)}(n)};t.transitionTo(t.getCurrentLocation(),o,o)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},qs.prototype.beforeEach=function(n){return Us(this.beforeHooks,n)},qs.prototype.beforeResolve=function(n){return Us(this.resolveHooks,n)},qs.prototype.afterEach=function(n){return Us(this.afterHooks,n)},qs.prototype.onReady=function(n,e){this.history.onReady(n,e)},qs.prototype.onError=function(n){this.history.onError(n)},qs.prototype.push=function(n,e,t){var o=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){o.history.push(n,e,t)}));this.history.push(n,e,t)},qs.prototype.replace=function(n,e,t){var o=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){o.history.replace(n,e,t)}));this.history.replace(n,e,t)},qs.prototype.go=function(n){this.history.go(n)},qs.prototype.back=function(){this.go(-1)},qs.prototype.forward=function(){this.go(1)},qs.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},qs.prototype.resolve=function(n,e,t){var o=qa(n,e=e||this.history.current,t,this),r=this.match(o,e),a=r.redirectedFrom||r.fullPath;return{location:o,route:r,href:function(n,e,t){var o="hash"===t?"#"+e:e;return n?ja(n+"/"+o):o}(this.history.base,a,this.mode),normalizedTo:o,resolved:r}},qs.prototype.getRoutes=function(){return this.matcher.getRoutes()},qs.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==fa&&this.history.transitionTo(this.history.getCurrentLocation())},qs.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==fa&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(qs.prototype,Fs),qs.install=function n(e){if(!n.installed||Fa!==e){n.installed=!0,Fa=e;var t=function(n){return void 0!==n},o=function(n,e){var o=n.$options._parentVnode;t(o)&&t(o=o.data)&&t(o=o.registerRouteInstance)&&o(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,o(this,this)},destroyed:function(){o(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",ya),e.component("RouterLink",Wa);var r=e.config.optionMergeStrategies;r.beforeRouteEnter=r.beforeRouteLeave=r.beforeRouteUpdate=r.created}},qs.version="3.5.4",qs.isNavigationFailure=ks,qs.NavigationFailureType=vs,qs.START_LOCATION=fa,Ja&&window.Vue&&window.Vue.use(qs);var Ws=qs;t(101);t(124);var Hs={NotFound:()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,322)),Layout:()=>Promise.all([t.e(0),t.e(2)]).then(t.bind(null,321))},Js={"v-54234663":()=>t.e(7).then(t.bind(null,325)),"v-e1101d8e":()=>t.e(8).then(t.bind(null,326)),"v-d8aa6a68":()=>t.e(9).then(t.bind(null,327)),"v-3365eaaf":()=>t.e(11).then(t.bind(null,328)),"v-04fabcd3":()=>t.e(12).then(t.bind(null,329)),"v-f01574d0":()=>t.e(10).then(t.bind(null,330)),"v-27398a6f":()=>t.e(13).then(t.bind(null,331)),"v-3cf5e2c4":()=>t.e(16).then(t.bind(null,332)),"v-5bdbb46b":()=>t.e(14).then(t.bind(null,333)),"v-63785efd":()=>t.e(17).then(t.bind(null,334)),"v-32c23b1d":()=>t.e(18).then(t.bind(null,335)),"v-5641805b":()=>t.e(19).then(t.bind(null,336)),"v-df044332":()=>t.e(15).then(t.bind(null,337)),"v-619050cb":()=>t.e(21).then(t.bind(null,338)),"v-6206fec9":()=>t.e(20).then(t.bind(null,339)),"v-250f9aa0":()=>t.e(22).then(t.bind(null,340)),"v-088e9c1c":()=>t.e(23).then(t.bind(null,341)),"v-9edb151c":()=>t.e(24).then(t.bind(null,342)),"v-cfc2ace0":()=>t.e(25).then(t.bind(null,343)),"v-5074f853":()=>t.e(26).then(t.bind(null,344)),"v-4afec253":()=>t.e(27).then(t.bind(null,345)),"v-937cc918":()=>t.e(29).then(t.bind(null,346)),"v-40c54964":()=>t.e(28).then(t.bind(null,347)),"v-abd1b318":()=>t.e(30).then(t.bind(null,348)),"v-5a56b1d0":()=>t.e(32).then(t.bind(null,349)),"v-0d80233e":()=>t.e(31).then(t.bind(null,350)),"v-d240f2ea":()=>t.e(35).then(t.bind(null,351)),"v-1a064d8d":()=>t.e(33).then(t.bind(null,352)),"v-d9ea4ff8":()=>t.e(36).then(t.bind(null,353)),"v-544d8b0c":()=>t.e(34).then(t.bind(null,354)),"v-5cec38b8":()=>t.e(38).then(t.bind(null,355)),"v-8167de90":()=>t.e(37).then(t.bind(null,356))};function Vs(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const Xs=/-(\w)/g,Gs=Vs(n=>n.replace(Xs,(n,e)=>e?e.toUpperCase():"")),Zs=/\B([A-Z])/g,Ks=Vs(n=>n.replace(Zs,"-$1").toLowerCase()),Ys=Vs(n=>n.charAt(0).toUpperCase()+n.slice(1));function Qs(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(Ys(Gs(e))):n(Ys(e))||n(Ks(e))}const ni=Object.assign({},Hs,Js),ei=n=>ni[n],ti=n=>Js[n],oi=n=>Hs[n],ri=n=>Ht.component(n);function ai(n){return Qs(ti,n)}function si(n){return Qs(oi,n)}function ii(n){return Qs(ei,n)}function li(n){return Qs(ri,n)}function ci(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!li(n)&&ii(n)){const e=await ii(n)();Ht.component(n,e.default)}}))}function ui(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var pi=t(90),di=t.n(pi),fi=t(91),hi=t.n(fi),mi={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${hi()(n[t])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=vi(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=bi(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return di()([{name:"description",content:this.$description}],n,this.siteMeta,yi)},updateCanonicalLink(){gi(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",vi(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){bi(null,this.currentMetaTags),gi()}};function gi(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function vi(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function bi(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function yi(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}var xi=t(49),wi={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(xi)()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),o=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),r=window.innerHeight+t;for(let n=0;n<e.length;n++){const a=e[n],s=e[n+1],i=0===n&&0===t||t>=a.parentElement.offsetTop+10&&(!s||t<s.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(i&&l!==decodeURIComponent(a.hash)){const t=a;if(r===o)for(let t=n+1;t<e.length;t++)if(l===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},ji=t(23),ki=t.n(ji),_i={mounted(){ki.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||Ht.component(n.name)||ki.a.start(),t()}),this.$router.afterEach(()=>{ki.a.done(),this.isSidebarOpen=!1})}};t(231),t(232);class Si{constructor(){this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}show({text:n="",duration:e=3e3}){let t=document.createElement("div");t.className="message move-in",t.innerHTML=`\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">${n}</div>\n    `,this.containerEl.appendChild(t),e>0&&setTimeout(()=>{this.close(t)},e)}close(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",()=>{n.remove()})}}var Ei={mounted(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy(){setTimeout(()=>{(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach(n=>{document.querySelectorAll(n).forEach(this.generateCopyButton)})},1e3)},generateCopyButton(n){if(n.classList.contains("codecopy-enabled"))return;const e=document.createElement("i");e.className="code-copy",e.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',e.title="Copy to clipboard",e.addEventListener("click",()=>{this.copyToClipboard(n.innerText)}),n.appendChild(e),n.classList.add("codecopy-enabled")},copyToClipboard(n){const e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);const t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy");(new Si).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}},Ai="auto",Ti="zoom-in",Ci="zoom-out",Oi="grab",$i="move";function Pi(n,e,t){var o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],r={passive:!1};o?n.addEventListener(e,t,r):n.removeEventListener(e,t,r)}function Ii(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function zi(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Bi(n,e,t){!function(n){var e=Ri,t=Di;if(n.transition){var o=n.transition;delete n.transition,n[e]=o}if(n.transform){var r=n.transform;delete n.transform,n[t]=r}}(e);var o=n.style,r={};for(var a in e)t&&(r[a]=o[a]||""),o[a]=e[a];return r}var Ri="transition",Di="transform",Mi="transform",Li="transitionend";var Ni=function(){},qi={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:Ni,onClose:Ni,onGrab:Ni,onMove:Ni,onRelease:Ni,onBeforeOpen:Ni,onBeforeClose:Ni,onBeforeGrab:Ni,onBeforeRelease:Ni,onImageLoading:Ni,onImageLoaded:Ni},Fi={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),Wi(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var o=this.lastScrollPosition.x-e,r=this.lastScrollPosition.y-t,a=this.options.scrollThreshold;(Math.abs(r)>=a||Math.abs(o)>=a)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(Ui(n)&&!Wi(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){Ui(n)&&!Wi(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,o=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,o)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,o=e.clientY;this.move(t,o)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function Ui(n){return 0===n.button}function Wi(n){return n.metaKey||n.ctrlKey}var Hi={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Bi(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Pi(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Bi(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},Ji="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Vi=function(){function n(n,e){for(var t=0;t<e.length;t++){var o=e[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(n,o.key,o)}}return function(e,t,o){return t&&n(e.prototype,t),o&&n(e,o),e}}(),Xi=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n},Gi={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=zi(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,o=n.transitionDuration,r=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?Oi:Ci,transition:Mi+"\n        "+o+"s\n        "+r,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Bi(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Bi(this.el,{transform:"none"})},grab:function(n,e,t){var o=Zi(),r=o.x-n,a=o.y-e;Bi(this.el,{cursor:$i,transform:"translate3d(\n        "+(this.translate.x+r)+"px, "+(this.translate.y+a)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var o=Zi(),r=o.x-n,a=o.y-e;Bi(this.el,{transition:Mi,transform:"translate3d(\n        "+(this.translate.x+r)+"px, "+(this.translate.y+a)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Bi(this.el,this.styleClose)},restoreOpenStyle:function(){Bi(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=Zi(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,o=this.instance.options,r=o.customSize,a=o.scaleBase;if(!r&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(r&&"object"===(void 0===r?"undefined":Ji(r)))return{x:r.width/this.rect.width,y:r.height/this.rect.height};var s=this.rect.width/2,i=this.rect.height/2,l=Zi(),c={x:l.x-s,y:l.y-i},u=c.x/s,p=c.y/i,d=a+Math.min(u,p);if(r&&"string"==typeof r){var f=t||this.el.naturalWidth,h=e||this.el.naturalHeight,m=parseFloat(r)*f/(100*this.rect.width),g=parseFloat(r)*h/(100*this.rect.height);if(d>m||d>g)return{x:m,y:g}}return{x:d,y:d}}};function Zi(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function Ki(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(o){Pi(n,o,e[o],t)}))}var Yi=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(Gi),this.overlay=Object.create(Hi),this.handler=Object.create(Fi),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=Xi({},qi,e),this.overlay.init(this),this.handler.init(this)}return Vi(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Ti,Pi(n,"click",this.handler.click),this.options.preloadImage&&Ii(zi(n)));return this}},{key:"config",value:function(n){return n?(Xi(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var o="string"==typeof n?document.querySelector(n):n;if("IMG"===o.tagName){if(this.options.onBeforeOpen(o),this.target.init(o,this),!this.options.preloadImage){var r=this.target.srcOriginal;null!=r&&(this.options.onImageLoading(o),Ii(r,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Pi(document,"scroll",this.handler.scroll),Pi(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Pi(window,"resize",this.handler.resizeWindow);var a=function n(){Pi(o,Li,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&Ki(document,e.handler,!0),t(o)};return Pi(o,Li,a),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Ai,this.overlay.fadeOut(),this.target.zoomOut(),Pi(document,"scroll",this.handler.scroll,!1),Pi(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Pi(window,"resize",this.handler.resizeWindow,!1);var o=function o(){Pi(t,Li,o,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&Ki(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Pi(t,Li,o),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var r=this.target.el;this.options.onBeforeGrab(r),this.released=!1,this.target.grab(n,e,t);var a=function n(){Pi(r,Li,n,!1),o(r)};return Pi(r,Li,a),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=$i,this.target.move(n,e,t);var r=this.target.el,a=function n(){Pi(r,Li,n,!1),o(r)};return Pi(r,Li,a),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Ai,this.target.restoreOpenStyle();var o=function o(){Pi(t,Li,o,!1),n.lock=!1,n.released=!0,e(t)};return Pi(t,Li,o),this}}}]),n}();const Qi=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),nl=Number("500");class el{constructor(){this.instance=new Yi(Qi)}update(n=".theme-vdoing-content img:not(.no-zoom)"){"undefined"!=typeof window&&this.instance.listen(n)}updateDelay(n=".theme-vdoing-content img:not(.no-zoom)",e=nl){setTimeout(()=>this.update(n),e)}}var tl=[mi,wi,_i,Ei,{watch:{"$page.path"(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted(){this.$vuepress.zooming=new el,this.$vuepress.zooming.updateDelay()}}],ol={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return ui("layout",n),Ht.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},rl=t(6),al=Object(rl.a)(ol,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}(al,"mixins",tl);const sl=[{name:"v-54234663",path:"/pages/e24a44/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-54234663").then(t)}},{path:"/pages/e24a44/index.html",redirect:"/pages/e24a44/"},{path:"/01.前端/01.学过的习/01.CSS样式与权重.html",redirect:"/pages/e24a44/"},{name:"v-e1101d8e",path:"/pages/7873d2/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-e1101d8e").then(t)}},{path:"/pages/7873d2/index.html",redirect:"/pages/7873d2/"},{path:"/01.前端/01.学过的习/02.事件冒泡和事件捕获.html",redirect:"/pages/7873d2/"},{name:"v-d8aa6a68",path:"/pages/9c2bfc/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-d8aa6a68").then(t)}},{path:"/pages/9c2bfc/index.html",redirect:"/pages/9c2bfc/"},{path:"/01.前端/01.学过的习/03.JS模块对外暴露函数.html",redirect:"/pages/9c2bfc/"},{name:"v-3365eaaf",path:"/pages/cc931f/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-3365eaaf").then(t)}},{path:"/pages/cc931f/index.html",redirect:"/pages/cc931f/"},{path:"/01.前端/01.学过的习/05.js作用域链.html",redirect:"/pages/cc931f/"},{name:"v-04fabcd3",path:"/pages/17c816/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-04fabcd3").then(t)}},{path:"/pages/17c816/index.html",redirect:"/pages/17c816/"},{path:"/01.前端/01.学过的习/06.控制台暴露vue.html",redirect:"/pages/17c816/"},{name:"v-f01574d0",path:"/pages/991cc6/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-f01574d0").then(t)}},{path:"/pages/991cc6/index.html",redirect:"/pages/991cc6/"},{path:"/01.前端/01.学过的习/04.js中的内存泄漏和内存溢出.html",redirect:"/pages/991cc6/"},{name:"v-27398a6f",path:"/pages/515843/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-27398a6f").then(t)}},{path:"/pages/515843/index.html",redirect:"/pages/515843/"},{path:"/01.前端/01.学过的习/07.es5常用知识总结.html",redirect:"/pages/515843/"},{name:"v-3cf5e2c4",path:"/pages/6616c2/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-3cf5e2c4").then(t)}},{path:"/pages/6616c2/index.html",redirect:"/pages/6616c2/"},{path:"/01.前端/01.学过的习/10.js模块化.html",redirect:"/pages/6616c2/"},{name:"v-5bdbb46b",path:"/pages/34049a/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-5bdbb46b").then(t)}},{path:"/pages/34049a/index.html",redirect:"/pages/34049a/"},{path:"/01.前端/01.学过的习/08.es6常用知识总结.html",redirect:"/pages/34049a/"},{name:"v-63785efd",path:"/pages/937e4b/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-63785efd").then(t)}},{path:"/pages/937e4b/index.html",redirect:"/pages/937e4b/"},{path:"/01.前端/01.学过的习/11.nodeJs学习.html",redirect:"/pages/937e4b/"},{name:"v-32c23b1d",path:"/pages/0a1991/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-32c23b1d").then(t)}},{path:"/pages/0a1991/index.html",redirect:"/pages/0a1991/"},{path:"/01.前端/01.学过的习/12.node搭建服务器.html",redirect:"/pages/0a1991/"},{name:"v-5641805b",path:"/pages/fc31e6/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-5641805b").then(t)}},{path:"/pages/fc31e6/index.html",redirect:"/pages/fc31e6/"},{path:"/01.前端/01.学过的习/13.webPack学习.html",redirect:"/pages/fc31e6/"},{name:"v-df044332",path:"/pages/29f30f/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-df044332").then(t)}},{path:"/pages/29f30f/index.html",redirect:"/pages/29f30f/"},{path:"/01.前端/01.学过的习/09.es7常用知识总结.html",redirect:"/pages/29f30f/"},{name:"v-619050cb",path:"/pages/8e9745/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-619050cb").then(t)}},{path:"/pages/8e9745/index.html",redirect:"/pages/8e9745/"},{path:"/01.前端/01.学过的习/15.css阻塞与js阻塞.html",redirect:"/pages/8e9745/"},{name:"v-6206fec9",path:"/pages/debc20/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-6206fec9").then(t)}},{path:"/pages/debc20/index.html",redirect:"/pages/debc20/"},{path:"/01.前端/01.学过的习/14.js原型对象和原型链的理解.html",redirect:"/pages/debc20/"},{name:"v-250f9aa0",path:"/pages/9be584/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-250f9aa0").then(t)}},{path:"/pages/9be584/index.html",redirect:"/pages/9be584/"},{path:"/01.前端/01.学过的习/16.ajax的学习.html",redirect:"/pages/9be584/"},{name:"v-088e9c1c",path:"/pages/4f10b9/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-088e9c1c").then(t)}},{path:"/pages/4f10b9/index.html",redirect:"/pages/4f10b9/"},{path:"/01.前端/01.学过的习/17.浏览器的重绘与重排.html",redirect:"/pages/4f10b9/"},{name:"v-9edb151c",path:"/pages/1273e8/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-9edb151c").then(t)}},{path:"/pages/1273e8/index.html",redirect:"/pages/1273e8/"},{path:"/01.前端/01.学过的习/18.函数防抖与函数节流学习记录.html",redirect:"/pages/1273e8/"},{name:"v-cfc2ace0",path:"/pages/0acb8e/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-cfc2ace0").then(t)}},{path:"/pages/0acb8e/index.html",redirect:"/pages/0acb8e/"},{path:"/01.前端/01.学过的习/19.浏览器储存学习.html",redirect:"/pages/0acb8e/"},{name:"v-5074f853",path:"/pages/3eb294/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-5074f853").then(t)}},{path:"/pages/3eb294/index.html",redirect:"/pages/3eb294/"},{path:"/01.前端/01.学过的习/20.React学习1.html",redirect:"/pages/3eb294/"},{name:"v-4afec253",path:"/pages/a87c4e/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-4afec253").then(t)}},{path:"/pages/a87c4e/index.html",redirect:"/pages/a87c4e/"},{path:"/01.前端/01.学过的习/21.React学习2.html",redirect:"/pages/a87c4e/"},{name:"v-937cc918",path:"/pages/07bbe9/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-937cc918").then(t)}},{path:"/pages/07bbe9/index.html",redirect:"/pages/07bbe9/"},{path:"/01.前端/01.学过的习/27.vue中$attrs和$listeners的使用.html",redirect:"/pages/07bbe9/"},{name:"v-40c54964",path:"/pages/3dc609/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-40c54964").then(t)}},{path:"/pages/3dc609/index.html",redirect:"/pages/3dc609/"},{path:"/01.前端/01.学过的习/25.React项目搭建.html",redirect:"/pages/3dc609/"},{name:"v-abd1b318",path:"/pages/44df8d/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-abd1b318").then(t)}},{path:"/pages/44df8d/index.html",redirect:"/pages/44df8d/"},{path:"/01.前端/01.学过的习/28.js的精度问题.html",redirect:"/pages/44df8d/"},{name:"v-5a56b1d0",path:"/pages/b3a247/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-5a56b1d0").then(t)}},{path:"/pages/b3a247/index.html",redirect:"/pages/b3a247/"},{path:"/01.前端/01.学过的习/31.yarn和npm的对比.html",redirect:"/pages/b3a247/"},{name:"v-0d80233e",path:"/pages/91d1b5/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-0d80233e").then(t)}},{path:"/pages/91d1b5/index.html",redirect:"/pages/91d1b5/"},{path:"/01.前端/01.学过的习/29.React的状态管理.html",redirect:"/pages/91d1b5/"},{name:"v-d240f2ea",path:"/pages/3fea03/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-d240f2ea").then(t)}},{path:"/pages/3fea03/index.html",redirect:"/pages/3fea03/"},{path:"/01.前端/03.踩过的坑/01.elementUI使用问题.html",redirect:"/pages/3fea03/"},{name:"v-1a064d8d",path:"/pages/37e8bf/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-1a064d8d").then(t)}},{path:"/pages/37e8bf/index.html",redirect:"/pages/37e8bf/"},{path:"/01.前端/01.学过的习/32.websocket的使用.html",redirect:"/pages/37e8bf/"},{name:"v-d9ea4ff8",path:"/pages/eca0d9/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-d9ea4ff8").then(t)}},{path:"/pages/eca0d9/index.html",redirect:"/pages/eca0d9/"},{path:"/01.前端/03.踩过的坑/02.待整理的坑 .html",redirect:"/pages/eca0d9/"},{name:"v-544d8b0c",path:"/pages/9a1e83/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-544d8b0c").then(t)}},{path:"/pages/9a1e83/index.html",redirect:"/pages/9a1e83/"},{path:"/01.前端/02.想过的事/01.随笔.html",redirect:"/pages/9a1e83/"},{name:"v-5cec38b8",path:"/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-5cec38b8").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-8167de90",path:"/tags/",component:al,beforeEnter:(n,e,t)=>{ci("Layout","v-8167de90").then(t)}},{path:"/tags/index.html",redirect:"/tags/"},{path:"/@pages/tagsPage.html",redirect:"/tags/"},{path:"*",component:al}],il={title:"小火柴的博客笔记",description:"个人使用的笔记",base:"/",headTags:[["link",{rel:"icon",href:"/img/favicon.ico"}],["meta",{name:"keywords",content:"vuepress,theme,blog,vdoing"}],["meta",{name:"theme-color",content:"#11a8cd"}]],pages:[{title:"CSS的样式优先级权重",frontmatter:{title:"CSS的样式优先级权重","//":null,permalink:"/pages/e24a44/",categories:["前端","CSS"],tags:["CSS"],date:"2019-11-11T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/01.CSS%E6%A0%B7%E5%BC%8F%E4%B8%8E%E6%9D%83%E9%87%8D.html",relativePath:"01.前端/01.学过的习/01.CSS样式与权重.md",key:"v-54234663",path:"/pages/e24a44/",headers:[{level:2,title:"CSS的样式优先级权重",slug:"css的样式优先级权重",normalizedTitle:"css的样式优先级权重",charIndex:2}],headersStr:"CSS的样式优先级权重",content:"# CSS的样式优先级权重\n\nCSS 样式的权重是指一个元素最终样式的确定方式。当多个样式定义涉及到同一个元素时，需要使用样式权重确定最终样式。\n\n * 通用选择器（*）、子选择器（>）、相邻选择器（+）、同胞选择器（~）、浏览器的默认样式、权重值为0\n * 标签选择器和伪元素选择器，如：div、p、:before 权重值为1\n * 类，伪类和属性选择器，如： .content、:hover、[data-v-7668812d] 权重值为10\n * ID选择器，如：#content，权重值为100\n * 内联样式，如：style=””，权重值为1000\n * !important，加在样式属性值后，权重值为 10000\n\n\n如果多个样式的权重相同，则后面的样式会覆盖前面的样式。因此，通常使用权重高的样式定义特殊样式，而使用权重低的样式定义基本样式。\n\n注： 我们在设计组件的时候，如果样式直接使用scope的话，便会增加样式的权重，导致在外部组件引用时，修改样式的权重增加。所以我们在设计组件的样式的时候，在对私有化的样式使用scope标签，公共的样式使用普通的style标签。便于在后续使用组件的时候，方便修改样式。（vue文件中如果不在style标签中增加scope的话，会影响项目整体样式。）",normalizedContent:"# css的样式优先级权重\n\ncss 样式的权重是指一个元素最终样式的确定方式。当多个样式定义涉及到同一个元素时，需要使用样式权重确定最终样式。\n\n * 通用选择器（*）、子选择器（>）、相邻选择器（+）、同胞选择器（~）、浏览器的默认样式、权重值为0\n * 标签选择器和伪元素选择器，如：div、p、:before 权重值为1\n * 类，伪类和属性选择器，如： .content、:hover、[data-v-7668812d] 权重值为10\n * id选择器，如：#content，权重值为100\n * 内联样式，如：style=””，权重值为1000\n * !important，加在样式属性值后，权重值为 10000\n\n\n如果多个样式的权重相同，则后面的样式会覆盖前面的样式。因此，通常使用权重高的样式定义特殊样式，而使用权重低的样式定义基本样式。\n\n注： 我们在设计组件的时候，如果样式直接使用scope的话，便会增加样式的权重，导致在外部组件引用时，修改样式的权重增加。所以我们在设计组件的样式的时候，在对私有化的样式使用scope标签，公共的样式使用普通的style标签。便于在后续使用组件的时候，方便修改样式。（vue文件中如果不在style标签中增加scope的话，会影响项目整体样式。）",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675742318e3},{title:"事件冒泡和事件捕获",frontmatter:{title:"事件冒泡和事件捕获",date:"2019-11-12T00:00:00.000Z",permalink:"/pages/7873d2/",tags:[null]},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/02.%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E4%BA%8B%E4%BB%B6%E6%8D%95%E8%8E%B7.html",relativePath:"01.前端/01.学过的习/02.事件冒泡和事件捕获.md",key:"v-e1101d8e",path:"/pages/7873d2/",headers:[{level:2,title:"事件流：事件发生顺序",slug:"事件流-事件发生顺序",normalizedTitle:"事件流：事件发生顺序",charIndex:2},{level:2,title:"事件冒泡：",slug:"事件冒泡",normalizedTitle:"事件冒泡：",charIndex:123},{level:2,title:"事件捕获:",slug:"事件捕获",normalizedTitle:"事件捕获:",charIndex:266},{level:2,title:"addEventListener的使用",slug:"addeventlistener的使用",normalizedTitle:"addeventlistener的使用",charIndex:392},{level:2,title:"阻止事件冒泡:",slug:"阻止事件冒泡",normalizedTitle:"阻止事件冒泡:",charIndex:574},{level:2,title:"事件委托/事件代理：",slug:"事件委托-事件代理",normalizedTitle:"事件委托/事件代理：",charIndex:1043}],headersStr:"事件流：事件发生顺序 事件冒泡： 事件捕获: addEventListener的使用 阻止事件冒泡: 事件委托/事件代理：",content:'# 事件流：事件发生顺序\n\n<div id="outer">\n    <div id="inner">Click me!</div>\n</div>\n\n\n如果outer和inner都有click事件，那么点击inner，哪个事件会被触发？\n\n\n# 事件冒泡：\n\n事件冒泡可以形象地比喻为把一颗石头投入水中，泡泡会一直从水底冒出水面。 也就是说，事件会从最内层的元素开始发生，一直向上传播，直到document对象。\n\ndiv(inner) -> div(outer) -> body -> html -> document\n\n\n\n# 事件捕获:\n\n与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。 上面的例子在事件捕获的概念下发生click事件的顺序应该是\n\ndocument -> html -> body -> div(outer) -> div(inner)\n\n\n\n# addEventListener的使用\n\nelement.addEventListener(event, function, useCapture) - useCapture: - true - 事件句柄在捕获阶段执行（即在事件捕获阶段调用处理函数） - false- false- 默认。事件句柄在冒泡阶段执行（即表示在事件冒泡的阶段调用事件处理函数）\n\n\n# 阻止事件冒泡:\n\n * 给子级加 event.stopPropagation( ):\n   \n    $("#div1").mousedown(function(e){\n      var e=event||window.event;\n      event.stopPropagation();\n     });\n   \n\n * 在事件处理函数中返回 false\n   \n     $("#div1").mousedown(function(event){\n           var e=e||window.event;\n           return false;\n     });\n   \n\n注：但是这两种方式是有区别的。return false 不仅阻止了事件往上冒泡，而且阻止了事件本身(默认事件)。 event.stopPropagation()则只阻止事件往上冒泡，不阻止事件本身。\n\n * 在回调函数中利用event.target==event.currentTarget来进行判断，在成立的时候处理逻辑\n\n\n# 事件委托/事件代理：\n\n由于事件会在冒泡阶段向上传播到父节点，可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。\n\n一般尽可能使用事件冒泡，因为相对于事件委托，兼容性更好。\n\n比如给ul标签下的一万个li标签绑定监听处理点击li的逻辑: 可以在ul上绑定监听，每次点击li的时候都会在ul监听到，然后通过判断event.target来判断点击来源，处理逻辑。',normalizedContent:'# 事件流：事件发生顺序\n\n<div id="outer">\n    <div id="inner">click me!</div>\n</div>\n\n\n如果outer和inner都有click事件，那么点击inner，哪个事件会被触发？\n\n\n# 事件冒泡：\n\n事件冒泡可以形象地比喻为把一颗石头投入水中，泡泡会一直从水底冒出水面。 也就是说，事件会从最内层的元素开始发生，一直向上传播，直到document对象。\n\ndiv(inner) -> div(outer) -> body -> html -> document\n\n\n\n# 事件捕获:\n\n与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。 上面的例子在事件捕获的概念下发生click事件的顺序应该是\n\ndocument -> html -> body -> div(outer) -> div(inner)\n\n\n\n# addeventlistener的使用\n\nelement.addeventlistener(event, function, usecapture) - usecapture: - true - 事件句柄在捕获阶段执行（即在事件捕获阶段调用处理函数） - false- false- 默认。事件句柄在冒泡阶段执行（即表示在事件冒泡的阶段调用事件处理函数）\n\n\n# 阻止事件冒泡:\n\n * 给子级加 event.stoppropagation( ):\n   \n    $("#div1").mousedown(function(e){\n      var e=event||window.event;\n      event.stoppropagation();\n     });\n   \n\n * 在事件处理函数中返回 false\n   \n     $("#div1").mousedown(function(event){\n           var e=e||window.event;\n           return false;\n     });\n   \n\n注：但是这两种方式是有区别的。return false 不仅阻止了事件往上冒泡，而且阻止了事件本身(默认事件)。 event.stoppropagation()则只阻止事件往上冒泡，不阻止事件本身。\n\n * 在回调函数中利用event.target==event.currenttarget来进行判断，在成立的时候处理逻辑\n\n\n# 事件委托/事件代理：\n\n由于事件会在冒泡阶段向上传播到父节点，可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。\n\n一般尽可能使用事件冒泡，因为相对于事件委托，兼容性更好。\n\n比如给ul标签下的一万个li标签绑定监听处理点击li的逻辑: 可以在ul上绑定监听，每次点击li的时候都会在ul监听到，然后通过判断event.target来判断点击来源，处理逻辑。',charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675751906e3},{title:"js模块可以通过两种方式对外暴露函数",frontmatter:{title:"js模块可以通过两种方式对外暴露函数",permalink:"/pages/9c2bfc/",categories:["前端","技术文章"],tags:["JS"],date:"2019-12-10T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/03.JS%E6%A8%A1%E5%9D%97%E5%AF%B9%E5%A4%96%E6%9A%B4%E9%9C%B2%E5%87%BD%E6%95%B0.html",relativePath:"01.前端/01.学过的习/03.JS模块对外暴露函数.md",key:"v-d8aa6a68",path:"/pages/9c2bfc/",headers:[{level:2,title:"js模块可以通过两种方式对外暴露函数",slug:"js模块可以通过两种方式对外暴露函数",normalizedTitle:"js模块可以通过两种方式对外暴露函数",charIndex:2},{level:3,title:"1、通过返回一个函数对象或一个对象来暴露一个或者多个的内部的函数，内部函数通过闭包的方式，调用外部的属性或者其他的函数，从而能够达到对内部的属性保密的作用，调用时通过",slug:"_1、通过返回一个函数对象或一个对象来暴露一个或者多个的内部的函数-内部函数通过闭包的方式-调用外部的属性或者其他的函数-从而能够达到对内部的属性保密的作用-调用时通过",normalizedTitle:"1、通过返回一个函数对象或一个对象来暴露一个或者多个的内部的函数，内部函数通过闭包的方式，调用外部的属性或者其他的函数，从而能够达到对内部的属性保密的作用，调用时通过",charIndex:25},{level:3,title:"2、通过用window.函数名的方式暴露，这种方式可以在引入js文件后，window对象下可以直接具有对应的属性方法",slug:"_2、通过用window-函数名的方式暴露-这种方式可以在引入js文件后-window对象下可以直接具有对应的属性方法",normalizedTitle:"2、通过用window.函数名的方式暴露，这种方式可以在引入js文件后，window对象下可以直接具有对应的属性方法",charIndex:162}],headersStr:"js模块可以通过两种方式对外暴露函数 1、通过返回一个函数对象或一个对象来暴露一个或者多个的内部的函数，内部函数通过闭包的方式，调用外部的属性或者其他的函数，从而能够达到对内部的属性保密的作用，调用时通过 2、通过用window.函数名的方式暴露，这种方式可以在引入js文件后，window对象下可以直接具有对应的属性方法",content:"# js模块可以通过两种方式对外暴露函数\n\n\n# 1、通过返回一个函数对象或一个对象来暴露一个或者多个的内部的函数，内部函数通过闭包的方式，调用外部的属性或者其他的函数，从而能够达到对内部的属性保密的作用，调用时通过\n\n1、引入js文件 mytest\n2、申明变量接收js函数 var  f = mytest()\n\n\n\n# 2、通过用window.函数名的方式暴露，这种方式可以在引入js文件后，window对象下可以直接具有对应的属性方法\n\n1、引入js文件 mytest\n2、直接调用方法\n",normalizedContent:"# js模块可以通过两种方式对外暴露函数\n\n\n# 1、通过返回一个函数对象或一个对象来暴露一个或者多个的内部的函数，内部函数通过闭包的方式，调用外部的属性或者其他的函数，从而能够达到对内部的属性保密的作用，调用时通过\n\n1、引入js文件 mytest\n2、申明变量接收js函数 var  f = mytest()\n\n\n\n# 2、通过用window.函数名的方式暴露，这种方式可以在引入js文件后，window对象下可以直接具有对应的属性方法\n\n1、引入js文件 mytest\n2、直接调用方法\n",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1668764429e3},{title:"js作用域链",frontmatter:{title:"js作用域链",permalink:"/pages/cc931f/",categories:["前端","技术文章"],tags:["JS"],date:"2020-01-21T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/05.js%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE.html",relativePath:"01.前端/01.学过的习/05.js作用域链.md",key:"v-3365eaaf",path:"/pages/cc931f/",headers:[{level:2,title:"js作用域链",slug:"js作用域链",normalizedTitle:"js作用域链",charIndex:2},{level:3,title:"分享几个关于js'链的题目",slug:"分享几个关于js-链的题目",normalizedTitle:"分享几个关于js'链的题目",charIndex:528}],headersStr:"js作用域链 分享几个关于js'链的题目",content:"# js作用域链\n\nJavaScript 中的作用域链是一种数据结构，用于管理变量和函数的访问权限。它表示 JavaScript 程序中从当前执行环境到全局执行环境的一个链式列表。\n\n作用域链中的每一个执行环境（一般是函数或块级作用域）都包含一个变量对象，该对象保存了该执行环境内的所有变量和函数声明。\n\n当 JavaScript 程序试图访问一个变量或函数时，它会沿着作用域链从当前执行环境向上搜索，直到找到该变量或函数为止。如果没有找到，则会抛出 ReferenceError。\n\nvar x = 10;\n\nfunction foo() {\n  var y = 20;\n\n  function bar() {\n    var z = 30;\n    console.log(x + y + z);\n  }\n\n  bar();\n}\n\nfoo();\n// 输出 60\n\n\n说明：有三个变量：x，y 和 z。当 bar 函数被调用时，它会创建一个新的执行环境，并在该执行环境中声明一个新的变量 z。\n\n当 bar 函数试图访问变量 x 时，由于它不在当前执行环境中，因此 JavaScript 引擎会在其作用域链（从当前执行环境向上）中寻找该变量。\n\n\n# 分享几个关于js'链的题目\n\n1、\n  var x = 10;\n\n  function fn() {\n\n    console.log(x);\n\n  }\n\n  function show(f) {\n\n    var x = 20;\n\n    f();\n\n  }\n\n  show(fn);\n\n--------------------------10---------------\n原型链的查找是按照函数定义时的位置开始查找，与函数调用位置无关\n\n2、\n  var x = 10;\n\n  function fn() {\n\n    console.log(x);\n\n  }\n\n  function show(f) {\n\n    x = 20;\n\n    f();\n\n  }\n\n  show(fn);\n\n\n--------------------------------------20-------------------------\n\n3、\n  var fn = function () {\n\n    console.log(fn)\n\n  }\n\n  fn()\n\n  var obj = {\n\n    fn2: function () {\n\n      console.log(fn2)\n\n    }\n\n  }\n\n  obj.fn2()\n\n----------------------------------------------\nf(){\nconsole.log(fn)\n}\n\nReferenceError\n\n\n\n\n\n",normalizedContent:"# js作用域链\n\njavascript 中的作用域链是一种数据结构，用于管理变量和函数的访问权限。它表示 javascript 程序中从当前执行环境到全局执行环境的一个链式列表。\n\n作用域链中的每一个执行环境（一般是函数或块级作用域）都包含一个变量对象，该对象保存了该执行环境内的所有变量和函数声明。\n\n当 javascript 程序试图访问一个变量或函数时，它会沿着作用域链从当前执行环境向上搜索，直到找到该变量或函数为止。如果没有找到，则会抛出 referenceerror。\n\nvar x = 10;\n\nfunction foo() {\n  var y = 20;\n\n  function bar() {\n    var z = 30;\n    console.log(x + y + z);\n  }\n\n  bar();\n}\n\nfoo();\n// 输出 60\n\n\n说明：有三个变量：x，y 和 z。当 bar 函数被调用时，它会创建一个新的执行环境，并在该执行环境中声明一个新的变量 z。\n\n当 bar 函数试图访问变量 x 时，由于它不在当前执行环境中，因此 javascript 引擎会在其作用域链（从当前执行环境向上）中寻找该变量。\n\n\n# 分享几个关于js'链的题目\n\n1、\n  var x = 10;\n\n  function fn() {\n\n    console.log(x);\n\n  }\n\n  function show(f) {\n\n    var x = 20;\n\n    f();\n\n  }\n\n  show(fn);\n\n--------------------------10---------------\n原型链的查找是按照函数定义时的位置开始查找，与函数调用位置无关\n\n2、\n  var x = 10;\n\n  function fn() {\n\n    console.log(x);\n\n  }\n\n  function show(f) {\n\n    x = 20;\n\n    f();\n\n  }\n\n  show(fn);\n\n\n--------------------------------------20-------------------------\n\n3、\n  var fn = function () {\n\n    console.log(fn)\n\n  }\n\n  fn()\n\n  var obj = {\n\n    fn2: function () {\n\n      console.log(fn2)\n\n    }\n\n  }\n\n  obj.fn2()\n\n----------------------------------------------\nf(){\nconsole.log(fn)\n}\n\nreferenceerror\n\n\n\n\n\n",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675751906e3},{title:"控制台暴露vue",frontmatter:{title:"控制台暴露vue",permalink:"/pages/17c816/",categories:["前端","技术文章"],tags:["VUE"],date:"2020-02-10T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/06.%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%9A%B4%E9%9C%B2vue.html",relativePath:"01.前端/01.学过的习/06.控制台暴露vue.md",key:"v-04fabcd3",path:"/pages/17c816/",headers:[{level:3,title:"在vue页面中，我们可以直接在控制台中调用vue实例中方法",slug:"在vue页面中-我们可以直接在控制台中调用vue实例中方法",normalizedTitle:"在vue页面中，我们可以直接在控制台中调用vue实例中方法",charIndex:2}],headersStr:"在vue页面中，我们可以直接在控制台中调用vue实例中方法",content:"# 在vue页面中，我们可以直接在控制台中调用vue实例中方法\n\nmounted(){\n    window.vue=this;\n}\n\n\n将vue实例暴露出去，打开相应的页面，在 控制台 中直接用vue.method()就可以调用对应的方法了",normalizedContent:"# 在vue页面中，我们可以直接在控制台中调用vue实例中方法\n\nmounted(){\n    window.vue=this;\n}\n\n\n将vue实例暴露出去，打开相应的页面，在 控制台 中直接用vue.method()就可以调用对应的方法了",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1668764429e3},{title:"js中的内存泄漏和内存溢出",frontmatter:{title:"js中的内存泄漏和内存溢出",permalink:"/pages/991cc6/",categories:["前端","技术文章"],tags:["JS"],date:"2020-01-10T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/04.js%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%92%8C%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA.html",relativePath:"01.前端/01.学过的习/04.js中的内存泄漏和内存溢出.md",key:"v-f01574d0",path:"/pages/991cc6/",headers:[{level:2,title:"内存泄漏",slug:"内存泄漏",normalizedTitle:"内存泄漏",charIndex:2},{level:2,title:"内存溢出",slug:"内存溢出",normalizedTitle:"内存溢出",charIndex:453}],headersStr:"内存泄漏 内存溢出",content:"# 内存泄漏\n\n指的是在不再使用的对象仍然占用内存，因此导致系统内存不断增加，最终可能导致系统内存不足崩溃。在JS中，这通常是由于某些对象没有正确地被垃圾回收机制回收。常见原因：\n\n * 循环引用：当两个对象相互引用时，垃圾回收机制无法判断它们是否不再使用，从而导致内存泄漏。\n * 未销毁的事件监听器：如果没有移除事件监听器，它们将一直在内存中保存，导致内存泄漏。\n * 用闭包保存大量数据：闭包会保存其引用的变量，因此，如果闭包中保存了大量数据，这些数据将一直保存在内存中，导致内存泄漏。\n * 未销毁的定时器：如果没有移除定时器，它们将一直在内存中保存，导致内存泄漏。\n * 未正确释放内存：如果对象在创建后没有正确释放，它们将一直在内存中保存，导致内存泄漏。\n * 未正确使用 weakMap：如果没有正确使用 weakMap，它们将不会被垃圾回收机制回收，从而导致内存泄漏。 避免内存泄漏需要结合代码实际情况，注意在不再使用的对象时释放它们，并避免循环引用。比如对象置null\n\n\n\n\n\n\n\n# 内存溢出\n\n指的是程序试图分配的内存超过了系统的可用内存，导致系统停止运行。在JS中，这通常是由于程序运行时间长、分配内存量大等因素导致。常见原因：\n\n * 递归算法的堆栈溢出：递归算法的堆栈大小可能会变得很大，如果递归次数较多，容易导致内存溢出。\n * 大量数据的处理：处理过多数据，特别是大量数组或大量字符串，容易导致内存溢出。\n * 未正确释放内存：如果对象在创建后没有正确释放，它们将占用大量内存，从而导致内存溢出。\n * 无限循环：无限循环可能会导致内存溢出。\n * 创建过多对象：创建过多对象，特别是对象数量较多，容易导致内存溢出。 要避免内存溢出，需要注意设计代码，使其在处理数据时不会占用过多内存，并且避免无限循环和创建过多对象。",normalizedContent:"# 内存泄漏\n\n指的是在不再使用的对象仍然占用内存，因此导致系统内存不断增加，最终可能导致系统内存不足崩溃。在js中，这通常是由于某些对象没有正确地被垃圾回收机制回收。常见原因：\n\n * 循环引用：当两个对象相互引用时，垃圾回收机制无法判断它们是否不再使用，从而导致内存泄漏。\n * 未销毁的事件监听器：如果没有移除事件监听器，它们将一直在内存中保存，导致内存泄漏。\n * 用闭包保存大量数据：闭包会保存其引用的变量，因此，如果闭包中保存了大量数据，这些数据将一直保存在内存中，导致内存泄漏。\n * 未销毁的定时器：如果没有移除定时器，它们将一直在内存中保存，导致内存泄漏。\n * 未正确释放内存：如果对象在创建后没有正确释放，它们将一直在内存中保存，导致内存泄漏。\n * 未正确使用 weakmap：如果没有正确使用 weakmap，它们将不会被垃圾回收机制回收，从而导致内存泄漏。 避免内存泄漏需要结合代码实际情况，注意在不再使用的对象时释放它们，并避免循环引用。比如对象置null\n\n\n\n\n\n\n\n# 内存溢出\n\n指的是程序试图分配的内存超过了系统的可用内存，导致系统停止运行。在js中，这通常是由于程序运行时间长、分配内存量大等因素导致。常见原因：\n\n * 递归算法的堆栈溢出：递归算法的堆栈大小可能会变得很大，如果递归次数较多，容易导致内存溢出。\n * 大量数据的处理：处理过多数据，特别是大量数组或大量字符串，容易导致内存溢出。\n * 未正确释放内存：如果对象在创建后没有正确释放，它们将占用大量内存，从而导致内存溢出。\n * 无限循环：无限循环可能会导致内存溢出。\n * 创建过多对象：创建过多对象，特别是对象数量较多，容易导致内存溢出。 要避免内存溢出，需要注意设计代码，使其在处理数据时不会占用过多内存，并且避免无限循环和创建过多对象。",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675742318e3},{title:"es5常用知识总结",frontmatter:{title:"es5常用知识总结",permalink:"/pages/515843/",categories:["前端","技术文章"],tags:["JS"],date:"2020-03-05T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/07.es5%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.html",relativePath:"01.前端/01.学过的习/07.es5常用知识总结.md",key:"v-27398a6f",path:"/pages/515843/",headers:[{level:3,title:"一、严格模式",slug:"一、严格模式",normalizedTitle:"一、严格模式",charIndex:2},{level:3,title:"二、JSON 对象",slug:"二、json-对象",normalizedTitle:"二、json 对象",charIndex:778},{level:3,title:"三、Object对象的方法",slug:"三、object对象的方法",normalizedTitle:"三、object对象的方法",charIndex:1172},{level:3,title:"四、数组常用方法学习",slug:"四、数组常用方法学习",normalizedTitle:"四、数组常用方法学习",charIndex:3057},{level:3,title:"五、Function常用方法",slug:"五、function常用方法",normalizedTitle:"五、function常用方法",charIndex:3852}],headersStr:"一、严格模式 二、JSON 对象 三、Object对象的方法 四、数组常用方法学习 五、Function常用方法",content:"# 一、严格模式\n\n理解：严格模式是为了让js在更严格的语法条件下运行，减少代码的不安全之处，保证代码的运行，并且为未来的新版本js做好铺垫。 使用：在全局或函数的第一条语句定义为: 'use strict'; 1、必须使用var申明变量 2、禁止自定义的函数的this指向window 3、创建eval作用域 4、对象不能有重名的属性\n\n<script type=\"text/javascript\">\n    'use strict';\n    //必须使用var申明变量\n    var age = 12;\n    console.log(age);\n    \n    //禁止自定义的函数的this指向window\n    function Person(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n   Person('kobe', 39);//自调用时，this指向window，会报错 \n    new Person('kobe', 39);//new时，this指向实例，不会报错\n\n    //* 创建eval作用域,在没有严格模式的作用下，输出的那么是anverson，在严格模式下，输出的那么仍为kobe\n    var name = 'kobe';\n    eval('var name = \"anverson\";alert(name)');\n    console.log(name);\n\n    //对象不能有重名的属性\n    var obj = {\n        name : 'kobe',\n        name : 'weide'\n    };\n    console.log(obj);\n\n<\/script>\n\n\n\n# 二、JSON 对象\n\n1、JSON.stringify(obj/arr)：js对象(数组)转换为json对象(数组) 2、JSON.parse(json)：json对象(数组)转换为js对象(数组) 通常我们会使用JSON.parse(JSON.stringify(obj/arr))对js的对象进行深拷贝\n\n<script type=\"text/javascript\">\n    var obj = {\n        name : 'kobe',\n        age : 39\n    };\n    obj = JSON.stringify(obj);\n    console.log( typeof obj);//string\n   \n    obj = JSON.parse(obj);\n    console.log(obj); 转化为对象\n\n<\/script>\n\n\n\n# 三、Object对象的方法\n\n1、Object.create(prototype, [descriptors]) 用途：以指定对象为原型创建新的对象，为新的对象指定新的属性, 并对属性进行描述 value : 指定值 writable : 标识当前属性值是否是可修改的, 默认为false configurable: 标识当前属性是否可以被删除 默认为false enumerable： 标识当前属性是否能用for in 枚举 默认为false\n\n    var obj = {name : 'curry', age : 29}\n    var obj1 = {};\n    obj1 = Object.create(obj, {\n        sex : {\n            value : '男',\n            writable : true,\n            configurable: true,\n            enumerable: true,\n        }\n    });\n     console.log(obj1);//结果如截图所示\n    obj1.sex = '女';\n    console.log(obj1.sex);//不设置writable的情况下是不可以修改的\n\n\n2. Object.defineProperties(object, descriptors) 用途：为指定的对象扩展多个属性 get/set:都是回调函数，get一般是为了获取当前属性使用的，set一般是为了修改属性值使用的\n\nvar obj2 = {\n        firstName : 'curry',\n        lastName : 'stephen'\n    };\n    Object.defineProperties(obj2, {\n        fullName : {\n            get : function () {\n                return this.firstName + '-' + this.lastName\n            },\n            set : function (data) {\n                var names = data.split('-');\n                this.firstName = names[0];\n                this.lastName = names[1];\n            }\n        }\n    });\n    console.log(obj2);//如截图所示\n    console.log(obj2.fullName);\n    obj2.firstName = 'tim';\n    obj2.lastName = 'duncan';\n    console.log(obj2.fullName);\n    obj2.fullName = 'kobe-bryant';\n    console.log(obj2.fullName);\n\n\n也可以使用对象本身的两个方法： 1、get***（）{} 用来得到当前属性值的回调函数 2、set***（）{} 用来监视当前属性值变化的回调函数\n\n    var obj = {\n        firstName : 'kobe',\n        lastName : 'bryant',\n        get fullName(){\n            return this.firstName + ' ' + this.lastName\n        },\n        set fullName(data){\n            var names = data.split(' ');\n            this.firstName = names[0];\n            this.lastName = names[1];\n        }\n    };\n    console.log(obj)//结果如截图所示\n    console.log(obj.fullName);\n    obj.fullName = 'curry stephen';\n    console.log(obj.fullName);\n\n\n\n\n\n# 四、数组常用方法学习\n\n 1. Array.prototype.indexOf(value) : 得到值在数组中的第一个下标\n 2. Array.prototype.lastIndexOf(value) : 得到值在数组中的最后一个下标\n 3. Array.prototype.forEach(function(item, index){}) : 遍历数组\n 4. Array.prototype.map(function(item, index){}) : 遍历数组返回一个新的数组，返回加工之后的值,主要可以用来对数组进行一定的加工，并不会改动原数组。\n\n   //Array.prototype.forEach(function(item, index){}) : 遍历数组\n   arr.forEach(function (item, index) {\n       console.log(item, index);\n   });\n\n   //Array.prototype.map(function(item, index){}) : 遍历数组返回一个新的数组，返回加工之后的值\n   var arr1 = arr.map(function (item, index) {\n       return item + 10\n   });\n   console.log(arr, arr1);\n\n   //Array.prototype.filter(function(item, index){}) : 遍历过滤出一个新的子数组， 返回条件为true的值\n   var arr2 = arr.filter(function (item, index) {\n       return item > 4\n   });\n   console.log(arr, arr2);\n\n\n\n# 五、Function常用方法\n\n# 之bind，call，apply的区别\n\n1、call()/apply()是立即调用函数,传参方式上，call接收的是字符串，而apply接收的是数组。 2、bind是将绑定好的函数返回，并不会直接调用\n\n    function fun(age) {\n        this.name = 'kobe';\n        this.age = age;\n        console.log(this)\n    }\n    var obj = {};\n    //call()/apply()是立即调用函数,传参方式不同\n    fun.call(obj,\"zl\")\n    fun.apply(obj,['zl'])\n    fun.bind(obj, 12)();\n",normalizedContent:"# 一、严格模式\n\n理解：严格模式是为了让js在更严格的语法条件下运行，减少代码的不安全之处，保证代码的运行，并且为未来的新版本js做好铺垫。 使用：在全局或函数的第一条语句定义为: 'use strict'; 1、必须使用var申明变量 2、禁止自定义的函数的this指向window 3、创建eval作用域 4、对象不能有重名的属性\n\n<script type=\"text/javascript\">\n    'use strict';\n    //必须使用var申明变量\n    var age = 12;\n    console.log(age);\n    \n    //禁止自定义的函数的this指向window\n    function person(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n   person('kobe', 39);//自调用时，this指向window，会报错 \n    new person('kobe', 39);//new时，this指向实例，不会报错\n\n    //* 创建eval作用域,在没有严格模式的作用下，输出的那么是anverson，在严格模式下，输出的那么仍为kobe\n    var name = 'kobe';\n    eval('var name = \"anverson\";alert(name)');\n    console.log(name);\n\n    //对象不能有重名的属性\n    var obj = {\n        name : 'kobe',\n        name : 'weide'\n    };\n    console.log(obj);\n\n<\/script>\n\n\n\n# 二、json 对象\n\n1、json.stringify(obj/arr)：js对象(数组)转换为json对象(数组) 2、json.parse(json)：json对象(数组)转换为js对象(数组) 通常我们会使用json.parse(json.stringify(obj/arr))对js的对象进行深拷贝\n\n<script type=\"text/javascript\">\n    var obj = {\n        name : 'kobe',\n        age : 39\n    };\n    obj = json.stringify(obj);\n    console.log( typeof obj);//string\n   \n    obj = json.parse(obj);\n    console.log(obj); 转化为对象\n\n<\/script>\n\n\n\n# 三、object对象的方法\n\n1、object.create(prototype, [descriptors]) 用途：以指定对象为原型创建新的对象，为新的对象指定新的属性, 并对属性进行描述 value : 指定值 writable : 标识当前属性值是否是可修改的, 默认为false configurable: 标识当前属性是否可以被删除 默认为false enumerable： 标识当前属性是否能用for in 枚举 默认为false\n\n    var obj = {name : 'curry', age : 29}\n    var obj1 = {};\n    obj1 = object.create(obj, {\n        sex : {\n            value : '男',\n            writable : true,\n            configurable: true,\n            enumerable: true,\n        }\n    });\n     console.log(obj1);//结果如截图所示\n    obj1.sex = '女';\n    console.log(obj1.sex);//不设置writable的情况下是不可以修改的\n\n\n2. object.defineproperties(object, descriptors) 用途：为指定的对象扩展多个属性 get/set:都是回调函数，get一般是为了获取当前属性使用的，set一般是为了修改属性值使用的\n\nvar obj2 = {\n        firstname : 'curry',\n        lastname : 'stephen'\n    };\n    object.defineproperties(obj2, {\n        fullname : {\n            get : function () {\n                return this.firstname + '-' + this.lastname\n            },\n            set : function (data) {\n                var names = data.split('-');\n                this.firstname = names[0];\n                this.lastname = names[1];\n            }\n        }\n    });\n    console.log(obj2);//如截图所示\n    console.log(obj2.fullname);\n    obj2.firstname = 'tim';\n    obj2.lastname = 'duncan';\n    console.log(obj2.fullname);\n    obj2.fullname = 'kobe-bryant';\n    console.log(obj2.fullname);\n\n\n也可以使用对象本身的两个方法： 1、get***（）{} 用来得到当前属性值的回调函数 2、set***（）{} 用来监视当前属性值变化的回调函数\n\n    var obj = {\n        firstname : 'kobe',\n        lastname : 'bryant',\n        get fullname(){\n            return this.firstname + ' ' + this.lastname\n        },\n        set fullname(data){\n            var names = data.split(' ');\n            this.firstname = names[0];\n            this.lastname = names[1];\n        }\n    };\n    console.log(obj)//结果如截图所示\n    console.log(obj.fullname);\n    obj.fullname = 'curry stephen';\n    console.log(obj.fullname);\n\n\n\n\n\n# 四、数组常用方法学习\n\n 1. array.prototype.indexof(value) : 得到值在数组中的第一个下标\n 2. array.prototype.lastindexof(value) : 得到值在数组中的最后一个下标\n 3. array.prototype.foreach(function(item, index){}) : 遍历数组\n 4. array.prototype.map(function(item, index){}) : 遍历数组返回一个新的数组，返回加工之后的值,主要可以用来对数组进行一定的加工，并不会改动原数组。\n\n   //array.prototype.foreach(function(item, index){}) : 遍历数组\n   arr.foreach(function (item, index) {\n       console.log(item, index);\n   });\n\n   //array.prototype.map(function(item, index){}) : 遍历数组返回一个新的数组，返回加工之后的值\n   var arr1 = arr.map(function (item, index) {\n       return item + 10\n   });\n   console.log(arr, arr1);\n\n   //array.prototype.filter(function(item, index){}) : 遍历过滤出一个新的子数组， 返回条件为true的值\n   var arr2 = arr.filter(function (item, index) {\n       return item > 4\n   });\n   console.log(arr, arr2);\n\n\n\n# 五、function常用方法\n\n# 之bind，call，apply的区别\n\n1、call()/apply()是立即调用函数,传参方式上，call接收的是字符串，而apply接收的是数组。 2、bind是将绑定好的函数返回，并不会直接调用\n\n    function fun(age) {\n        this.name = 'kobe';\n        this.age = age;\n        console.log(this)\n    }\n    var obj = {};\n    //call()/apply()是立即调用函数,传参方式不同\n    fun.call(obj,\"zl\")\n    fun.apply(obj,['zl'])\n    fun.bind(obj, 12)();\n",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675751906e3},{title:"js模块化",frontmatter:{title:"js模块化",permalink:"/pages/6616c2/",categories:["前端","技术文章"],tags:["JS"],date:"2020-05-08T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/10.js%E6%A8%A1%E5%9D%97%E5%8C%96.html",relativePath:"01.前端/01.学过的习/10.js模块化.md",key:"v-3cf5e2c4",path:"/pages/6616c2/",headers:[{level:3,title:"一、可以暴露函数的方式：",slug:"一、可以暴露函数的方式",normalizedTitle:"一、可以暴露函数的方式：",charIndex:2},{level:3,title:"二、js模块化",slug:"二、js模块化",normalizedTitle:"二、js模块化",charIndex:1156}],headersStr:"一、可以暴露函数的方式： 二、js模块化",content:"# 一、可以暴露函数的方式：\n\n1、 全局函数模式: 将不同的功能封装成不同的全局函数 问题: Global被污染了, 很容易引起命名冲突，比如两个js文件暴露的函数对象命名是相同的，在HTML同时引入时，会导致命名产生冲突。\n\n2、 namespace模式: 简单对象封装，减少了全局变量。（用对象来暴露功能） 问题: 不安全(数据不是私有的, 外部可以直接修改)\n\n3、 IIFE模式: 匿名函数自调用(闭包)，immediately-invoked function expression(立即调用函数表达式) 作用: 数据是私有的, 外部只能通过暴露的方法操作\n\n(function (window) {\n  //数据\n  let data = 'test'\n\n  //操作数据的函数\n  function foo() { //用于暴露有函数\n    console.log(`foo() ${data}`)\n  }\n\n  function bar() {//用于暴露有函数\n    console.log(`bar() ${data}`)\n    otherFun() //内部调用\n  }\n\n  function otherFun() { //内部私有的函数\n    console.log('otherFun()')\n  }\n\n  //暴露行为\n  window.myModule = {foo, bar}\n})(window)\n\n\n4、IIFE模式增强 : 引入依赖，是现代模块实现的基石\n\n(function (window, $) {\n  //数据\n  let data = 'test'\n\n  //操作数据的函数\n  function foo() { //用于暴露有函数\n    console.log(`foo() ${data}`)\n    $('body').css('background', 'red')\n  }\n\n  function bar() {//用于暴露有函数\n    console.log(`bar() ${data}`)\n    otherFun() //内部调用\n  }\n\n  function otherFun() { //内部私有的函数\n    console.log('otherFun()')\n  }\n\n  //暴露行为\n  window.myModule = {foo, bar}\n})(window, jQuery)\n\n\n# 问题： 当HTML使用多个js文件时：\n\n 1. 一个页面需要引入多个js文件\n 2. 问题: 1). 请求过多，需要多个js请求 2). 依赖模糊，模块间可能会相互依赖，要求引入的顺序不能出错。 3). 难以维护\n\n\n# 二、js模块化\n\njs模块化是将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起，块的内部数据/实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信\n\n组成： 1、 数据---\x3e内部的属性 2、操作数据的行为---\x3e内部的函数 模块化： 编码时是按照模块一个一个编码的, 整个项目就是一个模块化的项目\n\n1、CommonJS： 暴露方式： module.exports = value 向外暴露一个对象 module.exports = value 向外暴露一个函数 exports.xxx = value 向外暴露一个对象，这种方式可以在一个js文件中暴露多个对象\n\n引入方式： var module = require(模块名或模块路径);\n\n//commonJS-test1.js\n\nmodule.exports = {\n    name:'tom',\n    age:18,\n    say:function(){\n        console.log('this is tom say')\n    }\n}\nmodule.exports.otherAttr = 'other'\n\nexports.foo = function () {\n  console.log('foo() ....')\n}\n\nexports.bar = function () {\n  console.log('bar() .....')\n}\n\n//commonJs-test2.js\n\nlet a = require('./commonJS-test1');\nconsole.log(a,'this is test1')\n\n//结果：{ name: 'tom', age: 18, say: [Function: say], otherAttr: 'other' } bar和foo不在其中\n\n\n\n\n\n//commonJS-test1.js\n\n// module.exports = {\n//     name:'tom',\n//     age:18,\n//     say:function(){\n//         console.log('this is tom say')\n//     }\n// }\nmodule.exports.otherAttr = 'other'\n\nexports.foo = function () {\n  console.log('foo() ....')\n}\n\nexports.bar = function () {\n  console.log('bar() .....')\n}\n\n//commonJs-test2.js\n\nlet a = require('./commonJS-test1');\nconsole.log(a,'this is test1')\n\n//结果：{ otherAttr: 'other', foo: [Function (anonymous)], bar: [Function (anonymous)]}\n\n\n\nNode.js模块化，服务器端。运行时, 动态同步引入\n  |-modules\n    |-module1.js\n    |-module2.js\n    |-module3.js\n  |-app.js\n  |-package.json\n    {\n      \"name\": \"commonJS-node\",\n      \"version\": \"1.0.0\"\n    }\n    \nBrowserify模块化，浏览器端  也称为js的打包工具，在运行前对模块进行编译/转译/打包的处理(已经将依赖的模块包含进来了), 运行的是打包生成的js, 运行时不存在需要再从远程引入依赖模块\n\n  |-js\n    |-dist //打包生成文件的目录\n    |-src //源码所在的目录\n      |-module1.js\n      |-module2.js\n      |-module3.js\n      |-app.js //应用主源文件\n  |-index.html\n  |-package.json\n    {\n      \"name\": \"browserify-test\",\n      \"version\": \"1.0.0\"\n    }\n\n\n1、module1.js\n   module.exports = {\n      foo() {\n        console.log('moudle1 foo()')\n      }\n    }\n\n2、module2.js\n   module.exports = function () {\n      console.log('module2()')\n    }\n\n3、module3.js\n    exports.foo = function () {\n      console.log('module3 foo()')\n    }\n    \n    exports.bar = function () {\n      console.log('module3 bar()')\n    }\n\n\n4、app.js\n    let module1 = require('./module1')\n    let module2 = require('./module2')\n    let module3 = require('./module3')\n    \n    let uniq = require('uniq')\n    \n    //使用模块\n    module1.foo()\n    module2()\n    module3.foo()\n    module3.bar()\n\n\n\n2、AMD-RequireJS 模块化（浏览器端） 定义暴露模块: define([依赖模块名], function(){return 模块对象}) 引入模块: require(['模块1', '模块2', '模块3'], function(m1, m2){//使用模块对象}) 配置:\n\n        require.config({\n          //基本路径\n          baseUrl : 'js/',\n          //标识名称与路径的映射\n          paths : {\n            '模块1' : 'modules/模块1',\n            '模块2' : 'modules/模块2',\n            'angular' : 'libs/angular',\n            'angular-messages' : 'libs/angular-messages'\n          },\n          //非AMD的模块\n          shim : {\n            'angular' : {\n                exports : 'angular'\n            },\n            'angular-messages' : {\n                exports : 'angular-messages',\n                deps : ['angular']\n            }\n          }\n        })\n\n\n3、CMD-SeaJs模块化（浏览器端） 定义暴露模块:\n\n        define(function(require, module, exports){\n          通过require引入依赖模块\n          通过module/exports来暴露模块\n          exports.xxx = value\n        })\n\n\n使用模块：seajs.use(['模块1', '模块2'])\n\n4、ES6模块化，ES6内置了模块化 定义暴露模块 : export\n\n暴露一个对象: \n         export default 对象\n\n暴露多个: \n\n          export var xxx = value1\n          export let yyy = value2\n          或者\n          var xxx = value1\n          let yyy = value2\n          export {xxx, yyy}\n\n\n引入使用模块 : import\n\ndefault模块:\n        import xxx  from '模块路径/模块名'\n\n其它模块\n        import {xxx, yyy} from '模块路径/模块名'\n        import * as module1 from '模块路径/模块名'\n\n\n问题: 所有浏览器还不能直接识别ES6模块化的语法\n解决: 1、 使用Babel将ES6---\x3eES5(使用了CommonJS) ----浏览器还不能直接支行 2、使用Browserify---\x3e打包处理----浏览器可以运行",normalizedContent:"# 一、可以暴露函数的方式：\n\n1、 全局函数模式: 将不同的功能封装成不同的全局函数 问题: global被污染了, 很容易引起命名冲突，比如两个js文件暴露的函数对象命名是相同的，在html同时引入时，会导致命名产生冲突。\n\n2、 namespace模式: 简单对象封装，减少了全局变量。（用对象来暴露功能） 问题: 不安全(数据不是私有的, 外部可以直接修改)\n\n3、 iife模式: 匿名函数自调用(闭包)，immediately-invoked function expression(立即调用函数表达式) 作用: 数据是私有的, 外部只能通过暴露的方法操作\n\n(function (window) {\n  //数据\n  let data = 'test'\n\n  //操作数据的函数\n  function foo() { //用于暴露有函数\n    console.log(`foo() ${data}`)\n  }\n\n  function bar() {//用于暴露有函数\n    console.log(`bar() ${data}`)\n    otherfun() //内部调用\n  }\n\n  function otherfun() { //内部私有的函数\n    console.log('otherfun()')\n  }\n\n  //暴露行为\n  window.mymodule = {foo, bar}\n})(window)\n\n\n4、iife模式增强 : 引入依赖，是现代模块实现的基石\n\n(function (window, $) {\n  //数据\n  let data = 'test'\n\n  //操作数据的函数\n  function foo() { //用于暴露有函数\n    console.log(`foo() ${data}`)\n    $('body').css('background', 'red')\n  }\n\n  function bar() {//用于暴露有函数\n    console.log(`bar() ${data}`)\n    otherfun() //内部调用\n  }\n\n  function otherfun() { //内部私有的函数\n    console.log('otherfun()')\n  }\n\n  //暴露行为\n  window.mymodule = {foo, bar}\n})(window, jquery)\n\n\n# 问题： 当html使用多个js文件时：\n\n 1. 一个页面需要引入多个js文件\n 2. 问题: 1). 请求过多，需要多个js请求 2). 依赖模糊，模块间可能会相互依赖，要求引入的顺序不能出错。 3). 难以维护\n\n\n# 二、js模块化\n\njs模块化是将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起，块的内部数据/实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信\n\n组成： 1、 数据---\x3e内部的属性 2、操作数据的行为---\x3e内部的函数 模块化： 编码时是按照模块一个一个编码的, 整个项目就是一个模块化的项目\n\n1、commonjs： 暴露方式： module.exports = value 向外暴露一个对象 module.exports = value 向外暴露一个函数 exports.xxx = value 向外暴露一个对象，这种方式可以在一个js文件中暴露多个对象\n\n引入方式： var module = require(模块名或模块路径);\n\n//commonjs-test1.js\n\nmodule.exports = {\n    name:'tom',\n    age:18,\n    say:function(){\n        console.log('this is tom say')\n    }\n}\nmodule.exports.otherattr = 'other'\n\nexports.foo = function () {\n  console.log('foo() ....')\n}\n\nexports.bar = function () {\n  console.log('bar() .....')\n}\n\n//commonjs-test2.js\n\nlet a = require('./commonjs-test1');\nconsole.log(a,'this is test1')\n\n//结果：{ name: 'tom', age: 18, say: [function: say], otherattr: 'other' } bar和foo不在其中\n\n\n\n\n\n//commonjs-test1.js\n\n// module.exports = {\n//     name:'tom',\n//     age:18,\n//     say:function(){\n//         console.log('this is tom say')\n//     }\n// }\nmodule.exports.otherattr = 'other'\n\nexports.foo = function () {\n  console.log('foo() ....')\n}\n\nexports.bar = function () {\n  console.log('bar() .....')\n}\n\n//commonjs-test2.js\n\nlet a = require('./commonjs-test1');\nconsole.log(a,'this is test1')\n\n//结果：{ otherattr: 'other', foo: [function (anonymous)], bar: [function (anonymous)]}\n\n\n\nnode.js模块化，服务器端。运行时, 动态同步引入\n  |-modules\n    |-module1.js\n    |-module2.js\n    |-module3.js\n  |-app.js\n  |-package.json\n    {\n      \"name\": \"commonjs-node\",\n      \"version\": \"1.0.0\"\n    }\n    \nbrowserify模块化，浏览器端  也称为js的打包工具，在运行前对模块进行编译/转译/打包的处理(已经将依赖的模块包含进来了), 运行的是打包生成的js, 运行时不存在需要再从远程引入依赖模块\n\n  |-js\n    |-dist //打包生成文件的目录\n    |-src //源码所在的目录\n      |-module1.js\n      |-module2.js\n      |-module3.js\n      |-app.js //应用主源文件\n  |-index.html\n  |-package.json\n    {\n      \"name\": \"browserify-test\",\n      \"version\": \"1.0.0\"\n    }\n\n\n1、module1.js\n   module.exports = {\n      foo() {\n        console.log('moudle1 foo()')\n      }\n    }\n\n2、module2.js\n   module.exports = function () {\n      console.log('module2()')\n    }\n\n3、module3.js\n    exports.foo = function () {\n      console.log('module3 foo()')\n    }\n    \n    exports.bar = function () {\n      console.log('module3 bar()')\n    }\n\n\n4、app.js\n    let module1 = require('./module1')\n    let module2 = require('./module2')\n    let module3 = require('./module3')\n    \n    let uniq = require('uniq')\n    \n    //使用模块\n    module1.foo()\n    module2()\n    module3.foo()\n    module3.bar()\n\n\n\n2、amd-requirejs 模块化（浏览器端） 定义暴露模块: define([依赖模块名], function(){return 模块对象}) 引入模块: require(['模块1', '模块2', '模块3'], function(m1, m2){//使用模块对象}) 配置:\n\n        require.config({\n          //基本路径\n          baseurl : 'js/',\n          //标识名称与路径的映射\n          paths : {\n            '模块1' : 'modules/模块1',\n            '模块2' : 'modules/模块2',\n            'angular' : 'libs/angular',\n            'angular-messages' : 'libs/angular-messages'\n          },\n          //非amd的模块\n          shim : {\n            'angular' : {\n                exports : 'angular'\n            },\n            'angular-messages' : {\n                exports : 'angular-messages',\n                deps : ['angular']\n            }\n          }\n        })\n\n\n3、cmd-seajs模块化（浏览器端） 定义暴露模块:\n\n        define(function(require, module, exports){\n          通过require引入依赖模块\n          通过module/exports来暴露模块\n          exports.xxx = value\n        })\n\n\n使用模块：seajs.use(['模块1', '模块2'])\n\n4、es6模块化，es6内置了模块化 定义暴露模块 : export\n\n暴露一个对象: \n         export default 对象\n\n暴露多个: \n\n          export var xxx = value1\n          export let yyy = value2\n          或者\n          var xxx = value1\n          let yyy = value2\n          export {xxx, yyy}\n\n\n引入使用模块 : import\n\ndefault模块:\n        import xxx  from '模块路径/模块名'\n\n其它模块\n        import {xxx, yyy} from '模块路径/模块名'\n        import * as module1 from '模块路径/模块名'\n\n\n问题: 所有浏览器还不能直接识别es6模块化的语法\n解决: 1、 使用babel将es6---\x3ees5(使用了commonjs) ----浏览器还不能直接支行 2、使用browserify---\x3e打包处理----浏览器可以运行",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675751906e3},{title:"es6常用知识总结",frontmatter:{title:"es6常用知识总结",permalink:"/pages/34049a/",categories:["前端","技术文章"],tags:["JS"],date:"2020-03-15T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/08.es6%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.html",relativePath:"01.前端/01.学过的习/08.es6常用知识总结.md",key:"v-5bdbb46b",path:"/pages/34049a/",headers:[{level:3,title:"一、let 的使用",slug:"一、let-的使用",normalizedTitle:"一、let 的使用",charIndex:2},{level:3,title:"二、const的使用",slug:"二、const的使用",normalizedTitle:"二、const的使用",charIndex:399},{level:3,title:"三、变量的结构和赋值",slug:"三、变量的结构和赋值",normalizedTitle:"三、变量的结构和赋值",charIndex:608},{level:3,title:"四、模板字符串的拼接",slug:"四、模板字符串的拼接",normalizedTitle:"四、模板字符串的拼接",charIndex:1226},{level:3,title:"五、对象的简化写法",slug:"五、对象的简化写法",normalizedTitle:"五、对象的简化写法",charIndex:1440},{level:3,title:"六、箭头函数",slug:"六、箭头函数",normalizedTitle:"六、箭头函数",charIndex:1804},{level:3,title:"七、点点点运算符",slug:"七、点点点运算符",normalizedTitle:"七、点点点运算符",charIndex:2970},{level:3,title:"八、形参默认值",slug:"八、形参默认值",normalizedTitle:"八、形参默认值",charIndex:3562},{level:3,title:"九、Promise对象",slug:"九、promise对象",normalizedTitle:"九、promise对象",charIndex:3796},{level:3,title:"十、Symbol数据类型",slug:"十、symbol数据类型",normalizedTitle:"十、symbol数据类型",charIndex:5612},{level:3,title:"十一、Iterator遍历器",slug:"十一、iterator遍历器",normalizedTitle:"十一、iterator遍历器",charIndex:6232},{level:3,title:"十二、Generator函数",slug:"十二、generator函数",normalizedTitle:"十二、generator函数",charIndex:7252},{level:3,title:"十三、async函数",slug:"十三、async函数",normalizedTitle:"十三、async函数",charIndex:9057},{level:3,title:"十四、class类",slug:"十四、class类",normalizedTitle:"十四、class类",charIndex:9762},{level:3,title:"十六、字符串方法的扩展",slug:"十六、字符串方法的扩展",normalizedTitle:"十六、字符串方法的扩展",charIndex:11297},{level:3,title:"十七、数值方法的拓展",slug:"十七、数值方法的拓展",normalizedTitle:"十七、数值方法的拓展",charIndex:11886},{level:3,title:"十八、数组方法的拓展",slug:"十八、数组方法的拓展",normalizedTitle:"十八、数组方法的拓展",charIndex:12784},{level:3,title:"十九、对象方法的扩展",slug:"十九、对象方法的扩展",normalizedTitle:"十九、对象方法的扩展",charIndex:13835},{level:3,title:"二十、set 和 map 的常用方法",slug:"二十、set-和-map-的常用方法",normalizedTitle:"二十、set 和 map 的常用方法",charIndex:14658},{level:3,title:"二十一、for...of...使用总结",slug:"二十一、for-of-使用总结",normalizedTitle:"二十一、for...of...使用总结",charIndex:15656},{level:3,title:"二十二、深度克隆",slug:"二十二、深度克隆",normalizedTitle:"二十二、深度克隆",charIndex:15778}],headersStr:"一、let 的使用 二、const的使用 三、变量的结构和赋值 四、模板字符串的拼接 五、对象的简化写法 六、箭头函数 七、点点点运算符 八、形参默认值 九、Promise对象 十、Symbol数据类型 十一、Iterator遍历器 十二、Generator函数 十三、async函数 十四、class类 十六、字符串方法的扩展 十七、数值方法的拓展 十八、数组方法的拓展 十九、对象方法的扩展 二十、set 和 map 的常用方法 二十一、for...of...使用总结 二十二、深度克隆",content:"# 一、let 的使用\n\nlet的作用与var类似, 用于声明一个变量，主要有三个特点： 1、作用域在块内：{} 2、不能够重复声明 3、不会预处理（var会在编译时变量提升）\n\n\n  //console.log(age);// age is not defined\n  let age = 12;\n  //let age = 13;不能重复声明\n  console.log(age);\n  let btns = document.getElementsByTagName('button');\n  for(let i = 0;i<btns.length;i++){//这里如果是var时，会导致alter出来的结果都是3\n          btns[i].onclick = function () {\n              alert(i);\n          }\n  }\n\n\n\n# 二、const的使用\n\nconst的作用是定义一个常量，过去定义常量时，用var声明，虽然全部大写，来表示常量，但是实际上是允许修改的，const声明的常量是不允许修改的。主要特点： 1、作用域在块内：{}， 2、不能够重复声明 3、不会预处理\n\n  const sex = '男';\n  console.log(sex);\n  //sex = '女';//不能修改\n  console.log(sex);\n\n\n\n# 三、变量的结构和赋值\n\n可以用一条语句给多个变量赋值： 1、对象： let {n, a} = {n:'tom', a:12} 2、数组： let [a,b] = [1, 'atguigu'];\n\n\n  let obj = {name : 'kobe', age : 39};\n  //对象的解构赋值\n  let {age} = obj;\n  console.log(age);\n//    let {name, age} = {name : 'kobe', age : 39};\n//    console.log(name, age);\n\n  //3. 数组的解构赋值  不经常用\n  let arr = ['abc', 23, true,4581];\n  let [a, b, c, d] = arr;\n  console.log(a, b, c, d);\n   let [, , , e] = arr;//找第四个位置的变量\n  console.log(e);\n  \n  function person(p) {//不用解构赋值\n      console.log(p.name, p.age);\n  }\n  person(obj);\n\n  function person1({name, age}) {\n   console.log(name, age);\n  }\n  person1(obj);//可以直接传递对象\n\n\n\n# 四、模板字符串的拼接\n\n用来简化字符串的拼接，使用``内...${xxx}...\n\n\n  let obj = {\n      name : 'anverson',\n      age : 41\n  };\n  console.log('我叫:' + obj.name + ', 我的年龄是：' + obj.age);\n  console.log(`我叫:${obj.name}, 我的年龄是：${obj.age}`);\n\n\n\n# 五、对象的简化写法\n\n1、可以省略的对象中的同名属性值 2、省略方法的function\n\n\n  let x = 3;\n  let y = 5;\n  //普通写法\n//    let obj = {\n//        x : x,\n//        y : y,\n//        getPoint : function () {\n//            return this.x + this.y\n//        }\n//    };\n  //简化的写法\n  let obj = {\n      x,\n      y,\n      getPoint(){\n          return this.x\n      }\n  };\n  console.log(obj, obj.getPoint());\n\n\n\n# 六、箭头函数\n\n箭头函数主要的作用就是定义匿名函数，多用来定义回调函数。 基本语法： 1、没有参数: () => console.log('x') 2、一个参数: i => i+8 3、大于一个参数: (i,j) => i+j 4、函数体不用大括号: 默认返回结果，可以省略return语句，打印时可以体现。 5、 函数体如果有多个语句, 需要用{}包围，若有需要返回的内容，需要手动返回\n\n   let fun = function () {\n       console.log('fun()');\n   };\n   fun();\n   //没有形参，并且函数体只有一条语句，可以改写成\n   let fun1 = () => console.log('fun1()');\n   fun1();\n   console.log(fun1());\n  \n  \n    //一个形参，并且函数体只有一条语句\n    let fun2 = x => x;\n    console.log(fun2(5));\n  \n  \n    //形参是一个以上\n    let fun3 = (x, y) => x + y;\n    console.log(fun3(25, 39));//64\n  \n  \n    //函数体有多条语句\n    let fun4 = (x, y) => {\n        console.log(x, y);\n        return x + y;\n    };\n    console.log(fun4(34, 48));//82，如果不return的话，打印的是没有结果的\n  \n  \n    //setTimeout会将当中的this指向window对象\n    setTimeout(() => {\n        console.log(this);\n    },1000)\n  \n    function Person() {\n       this.obj = {\n           showThis : () => {\n               console.log(this);\n           }\n        }\n    }\n    let fun5 = new Person();\n    fun5.obj.showThis();//Person函数\n\n\n箭头函数中最重要的就是this的指向问题 官方定义：箭头函数没有自己的this，箭头函数的this不是调用的时候决定的，而是在定义的时候处在的对象就是它的this 判断方法：箭头函数的this看外层的是否有函数，如果有，外层函数的this就是内部箭头函数的this，如果没有，则this是window。\n\n\n# 七、点点点运算符\n\narguments：主要是在函数内部获取形参的伪数组，内部并没有数组的遍历方法，提供了callee函数来指向函数本身（多用来迭代使用） 点点点运算符: 1、可变参数：用在函数内部，是真正的数组，可以调用数组相关的方法的。 2、扩展运算符：为了拼接数组更加的方便（暂时）\n\n\n    function fun(...values) {\n        console.log(arguments);\n//        arguments.forEach(function (item, index) {\n//            console.log(item, index);//是无法使用的\n//        });\n        console.log(values);//真正的数组，可以调用数组的方法\n        values.forEach(function (item, index) {\n            console.log(item, index);\n        })\n    }\n    fun(1,2,3);\n    2、\n    let arr = [2,3,4,5,6];\n    let arr1 = ['abc',...arr, '123132'];\n    console.log(arr1);\n\n\n\n# 八、形参默认值\n\n形参默认值是函数有形参的情况下，调用函数时未传参，使用的默认值\n\n  function Point(x=12, y=12) { //如果不传参的情况下，xy默认为12\n      this.x = x;\n      this.y = y;\n  }\n  let point = new Point(25, 36);\n  console.log(point);\n  let p = new Point();\n  console.log(p);\n\n\n\n# 九、Promise对象\n\n代表了未来将要发生的事，有三个状态：pending（初始化状态），fullfilled（成功状态）， rejected（ 失败状态） 作用：可以将异步的操作用同步的流程表达出来，避免了层层嵌套的回调（回调地狱：异步操作执行成功后继续进行回调，会产生多层的回调，出错时，很难定位错误的位置，代码的可读性也不高。）\n\n  \n//创建一个promise实例对象\nlet promise = new Promise((resolve, reject) => {\n\n    //初始化promise的状态为pending----\x3e初始化状态\n    console.log('1111');//同步执行\n\n    //启动异步任务\n    setTimeout(function () {\n        console.log('3333');\n        //resolve('atguigu.com');\n        //修改promise的状态pending----\x3efullfilled（成功状态）\n        reject('xxxx');\n        //修改promise的状态pending-----\x3erejected(失败状态)\n    },1000)\n\n});\npromise.then((data) => {\n    console.log('成功了。。。' + data);\n}, (error) => {\n    console.log('失败了' + error);\n});\nconsole.log('2222');\n\n最终的打印结果为：1111,2222,3333，失败了\n\n\n主要应用可以用来封装ajax请求：\n\n//定义一个用ajax的方法\nfunction getNews(url) {\n  //创建一个promise对象\n  let promise = new Promise((resolve, reject) => {\n      //初始化promise状态为pending\n      \n      //启动异步任务\n      let request = new XMLHttpRequest();\n      \n      //设置监听\n      request.onreadystatechange = function () {\n          if(request.readyState === 4){\n              if(request.status === 200){\n                  let news = request.response;\n                  resolve(news);\n              }else{\n                  reject('请求失败了。。。');\n              }\n          }\n      };\n      \n      request.responseType = 'json';//设置返回的数据类型\n      request.open(\"GET\", url);//规定请求的方法，创建链接\n      request.send();//发送\n  })\n  return promise;\n}\n\n\n返回的promise对象可以调用then（）：\n\n  promise.then(function(\n    result => console.log(result),\n    errorMsg => alert(errorMsg)\n  ))\n\n\n实际使用：（接上）\n\n  getNews('xxx') .then((data) => {//返回值是一个promise对象\n      console.log(data);\n      return getNews('xxx'+data.xxx);//可以继续调用\n  }, (error) => {\n      alert(error);\n  })\n  .then((data) => {\n      console.log(data);\n  }, (error) => {\n      alert(error);\n  })\n\n\n\n# 十、Symbol数据类型\n\nSymbol 是ES6中添加的一种原始的数据类型（String, Number, boolean, null, undefined, 对象），他具有以下特点： 1、Symbol属性对应的值是唯一的，可以解决对象的命名冲突问题 2、Symbol值不能与其他数据进行计算，包括同字符串拼串 3、for in, for of遍历时不会遍历symbol属性。\n\n  let symbol = Symbol();//产生symbol是不需要进行new，可以直接产生。\n  //let symbol = Symbol('one');//也可以直接参数使用\n  //let symbol2 = Symbol('two');\n  console.log(typeof symbol); //symbol\n  console.log(symbol);  //Symbol\n  \n  // 用作对象的属性(唯一)\n  let obj = {username: 'kobe', age: 39};\n  obj[symbol] = 'hello';\n  obj[symbol] = 'symbol';\n  console.log(obj);//打印的结果如下\n\n  for(let i in obj){\n    console.log(i); //遍历的结果中没有Symbol(),使用for of 遍历时会报错\n  }\n\n\n\n\n\n# 十一、Iterator遍历器\n\niterator是一种接口机制，为各种不同的数据结构提供统一的访问机制，使满足的数据成员可以按照某种次序排列，并且主要是满足了for..of 的使用。 工作原理： 1.创建一个指针对象，指向数据结构的起始位置。 2.第一次调用next方法，指针自动指向数据结构的第一个成员（第一次调用时才会指向第一个成员！！！） 3.接下来不断调用next方法，指针会一直往后移动，直到指向最后一个成员 4.每调用next方法返回的是一个包含value和done的对象，value表示当前成员的值，done对应的布尔值表示当前的数据的结构是否遍历结束。当遍历结束的时候返回的value值是undefined，done值为true，其他时候的done为false。 目前可以直接使用Iterator遍历器功能的对象为： 1、Array 2、arguments 3、set容器 4、map容器 5、String等\n\n  // 原生测试  数组\n  let arr3 = [1, 2, 'kobe', true];\n  for(let i of arr3){\n    console.log(i);\n  }\n  // 字符串  string\n  let str = 'abcdefg';\n  for(let item of str){\n    console.log(item);\n  }\n  \n  //模拟Iterator遍历器功能的函数\n  function mockIterator(arr) {\n    let nextIndex = 0;\n    return {\n      next: function () {\n        return nextIndex<arr.length?{value: arr[nextIndex++], done: false}:{value: undefined, done: true}\n      }\n    }\n  }\n  \n  let arr = [1,2,3,4,5];\n  let iteratorObj = mockIterator(arr);\n  console.log(iteratorObj.next());\n  console.log(iteratorObj.next());\n  console.log(iteratorObj.next());\n\n\n\n# 十二、Generator函数\n\nGenerator函数是ES6提供的解决异步编程方案之一，他其实是一个状态机，内部用yield来实现对不同状态的控制。可以生成遍历器对象。可以配合对象的Symbol.iterator属性来使对象具有for of 的使用方法。\n\n主要特点： 1、function 与函数名之间有一个星号 2、内部用yield表达式来定义不同的状态\n\n  function* generatorExample(){\n    let result = yield 'hello';  // 状态值为hello\n    yield 'generator'; // 状态值为generator\n  }\n\n\n3、generator函数返回的是指针对象(接iterator)，而不会执行函数内部逻辑 4、调用next方法函数内部逻辑开始执行，遇到yield表达式停止，返回{value: yield后的表达式结果/undefined, done: false/true} 5、再次调用next方法会从上一次停止时的yield处开始，直到最后\n\n  function* generatorTest() {\n    console.log('函数开始执行');\n    yield 'hello';\n    console.log('函数暂停后再次启动');\n    yield 'generator';\n  }\n  // 生成遍历器对象\n  let Gt = generatorTest();\n  // 执行函数，遇到yield后即暂停\n  console.log(Gt); // 遍历器对象\n  let result = Gt.next(); // 函数执行,遇到yield暂停\n  console.log(result); // {value: \"hello\", done: false}\n  result = Gt.next(); // 函数再次启动\n  console.log(result); // {value: 'generator', done: false}\n  result = Gt.next();\n  console.log(result); // {value: undefined, done: true}表示函数内部状态已经遍历完毕\n\n\n\n6、可以配合对象的Symbol.iterator属性来使对象具有for of 的使用方法。\n\n  // 对象的Symbol.iterator属性;\n  let myIterable = {};\n  myIterable[Symbol.iterator] = function* () {\n    yield 1;\n    yield 2;\n    yield 4;\n  };\n  for(let i of myIterable){\n    console.log(i);// 1 2 4 \n  }\n  let obj = [...myIterable];\n  console.log(obj); //[1,2,4]\n\n\n7、yield语句返回结果通常为undefined， 当调用next方法时传参内容会作为启动时yield语句的返回值。\n\n  function getNews(url) {\n    $.get(url, function (data) { //使用jQuery的方式发送ajax请求\n      console.log(data);\n      let commentsUrl = data.commentsUrl;\n      let url = 'xxx' + commentsUrl;\n      \n      // 调用next传参会作为上次暂停是yield的返回值\n      sx.next(url); //通过next传参的操作是要在yield的下一步进行的\n    })\n  }\n  \n  function* sendXml() {\n    // url为next传参进来的数据\n    let url = yield getNews('xxx');\n    yield getNews(url);\n  }\n  \n  let sx = sendXml();\n  sx.next();\n    \n\n\n\n# 十三、async函数\n\nasync函数是ES2017的内容，主要是解决异步回调的问题，用同步流程来解决异步操作，属于Generator的语法糖\n\n  async function foo(){\n    await 异步操作;\n    await 异步操作；\n  }\n\n\n主要特点： 1、不需要像Generator去调用next方法，遇到await等待，当前的异步操作完成就往下执行 2、返回的总是Promise对象，可以用then方法进行下一步操作 3、async取代Generator函数的星号*，await取代Generator的yield\n\n  //定义一个异步函数,返回的是Promise对象\n  async function timeout(ms) {\n      return new Promise(resolve => {\n        setTimeout(resolve, ms);\n      })\n    }\n    \n    \n    async function asyncPrint(value, ms) {\n      console.log('函数执行', new Date().toTimeString());\n      await timeout(ms);//等待异步函数执行结束，才会继续的向下执行\n      console.log('延时时间', new Date().toTimeString());\n      console.log(value);\n    }\n  \n  \n    asyncPrint('hello async', 2000)\n\n\n\n# 十四、class类\n\nES6可以通过定义class类实现构造方法，类的继承。可以通过new来创建实例，用extends实现类的继承\n\nclass Person {\n\n    //调用类的构造方法\n    constructor(name, age){\n        this.name = name;\n        this.age = age;\n    }\n    \n    //定义一般的方法\n    showName(){\n        console.log(this.name, this.age);\n    }\n}\nlet person = new Person('kobe', 39);\nconsole.log(person, person.showName());//方法在实例的原型上，可以直接调用\n\n\n\n//定义一个子类\nclass StrPerson extends Person{\n\n    constructor(name, age, salary){\n        super(name, age);//调用父类的构造方法，需要将参数传入\n        this.salary = salary;\n    }\n    \n    //在子类自身定义方法，相当于重写了父类的方法\n    showName(){\n        console.log(this.name, this.age, this.salary);\n    }\n}\nlet str = new StrPerson('weide', 38, 1000000000);\nconsole.log(str);\nstr.showName();\n\n\n 1. 通过class定义类/实现类的继承\n 2. 在类中通过constructor定义构造方法\n 3. 通过new来创建类的实例\n 4. 通过extends来实现类的继承\n 5. 通过super调用父类的构造方法\n 6. 重写从父类中继承的一般方法\n\n<script type=\"text/javascript\">\n  class Person {\n      //调用类的构造方法\n      constructor(name, age){\n          this.name = name;\n          this.age = age;\n\n      }\n      //定义一般的方法\n      showName(){\n          console.log(this.name, this.age);\n      }\n  }\n  let person = new Person('kobe', 39);\n  console.log(person, person.showName());\n\n  //定义一个子类\n  class StrPerson extends Person{\n      constructor(name, age, salary){\n          super(name, age);//调用父类的构造方法\n          this.salary = salary;\n      }\n      showName(){//在子类自身定义方法\n          console.log(this.name, this.age, this.salary);\n      }\n  }\n  let str = new StrPerson('weide', 38, 1000000000);\n  console.log(str);\n  str.showName();\n\n\n\n# 十六、字符串方法的扩展\n\n 1. includes(str) : 判断是否包含指定的字符串\n 2. startsWith(str) : 判断是否以指定字符串开头\n 3. endsWith(str) : 判断是否以指定字符串结尾\n 4. repeat(count) : 重复指定次数\n\n  let str = 'abcdefg';\n  console.log(str.includes('a'));//true\n  console.log(str.includes('h'));//false\n  \n  //startsWith(str) : 判断是否以指定字符串开头\n  console.log(str.startsWith('a'));//true\n  console.log(str.startsWith('d'));//false\n  \n  //endsWith(str) : 判断是否以指定字符串结尾\n  console.log(str.endsWith('g'));//true\n  console.log(str.endsWith('d'));//false\n  \n  //repeat(count) : 重复指定次数a\n  console.log(str.repeat(5));//abcdefgabcdefgabcdefgabcdefgabcdefg\n\n\n\n# 十七、数值方法的拓展\n\n 1. 二进制与八进制数值表示法: 二进制用0b, 八进制用0o\n 2. Number.isFinite(i) : 判断是否是有限大的数\n 3. Number.isNaN(i) : 判断是否是NaN\n 4. Number.isInteger(i) : 判断是否是整数\n 5. Number.parseInt(str) : 将字符串转换为对应的数值\n 6. Math.trunc(i) : 直接去除小数部分\n\n  console.log(0b1010);//10\n  console.log(0o56);//46\n  \n  //Number.isFinite(i) : 判断是否是有限大的数\n  console.log(Number.isFinite(NaN));//false\n  console.log(Number.isFinite(5));//true\n  \n  //Number.isNaN(i) : 判断是否是NaN\n  console.log(Number.isNaN(NaN));//true\n  console.log(Number.isNaN(5));//falsse\n  \n  //Number.isInteger(i) : 判断是否是整数\n  console.log(Number.isInteger(5.23));//false\n  console.log(Number.isInteger(5.0));//true  这也属于整数\n  console.log(Number.isInteger(5));//true\n  \n  //Number.parseInt(str) : 将字符串转换为对应的数值\n  console.log(Number.parseInt('123abc'));//123\n  console.log(Number.parseInt('a123abc'));//NaN\n  \n  // Math.trunc(i) : 直接去除小数部分\n  console.log(Math.trunc(13.123));//13\n\n\n\n# 十八、数组方法的拓展\n\n 1. Array.from(v) : 将伪数组对象或可遍历对象转换为真数组\n 2. Array.of(v1, v2, v3) : 将一系列值转换成数组\n 3. find(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素\n 4. findIndex(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素下标\n\n  //Array.from(v) : 将伪数组对象或可遍历对象转换为真数组\n  let btns = document.getElementsByTagName('button');//伪数组\n  console.log(btns.length);//3\n  Array.from(btns).forEach(function (item, index) {\n      console.log(item, index);\n  });\n  \n  //Array.of(v1, v2, v3) : 将一系列值转换成数组\n  let arr = Array.of(1, 'abc', true);\n  console.log(arr);\n  \n  //find(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素\n  let arr1 = [1,3,5,2,6,7,3];\n  let result = arr1.find(function (item, index) {\n      return item >3 \n  });\n  let result2  = arr1.find((item)=>{\n        return item > 6     //表达式要返回正确的值\n  })\n  console.log(result);//5\n  \n  \n  //findIndex(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素下标\n  let result1 = arr1.findIndex(function (item, index) {\n      return item >3\n  });\n  console.log(result1);//2\n\n\n\n# 十九、对象方法的扩展\n\n 1. Object.is(v1, v2)：判断2个数据是否完全相等\n 2. Object.assign(target, source1, source2..)： 将源对象的属性复制到目标对象上\n 3. 直接操作 proto 属性：（隐式原型）\n\n  console.log(Object.is('abc', 'abc'));//true\n  \n  console.log(NaN == NaN);//false NaN与任何的数都不相等\n   console.log(0 == -0);//true\n   \n   //这两个属于特殊情况，底层在实现的时候用了字符串进行比较\n  console.log(Object.is(NaN, NaN));//true  \n  console.log(Object.is(0, -0));//false\n  \n  //Object.assign(target, source1, source2..)\n  let obj = {name : 'kobe', age : 39, c: {d: 2}};\n  let obj2 = {name : 'jignisgniasjfdi', sex: \"test\", c: {d: 2}}; \n  let obj1 = {};\n  Object.assign(obj1, obj,obj2);\n  console.log(obj1, obj1.name);//结果如图所示，注意属性的覆盖\n  \n  //直接操作 __proto__ 属性\n  let obj3 = {name : 'anverson', age : 41};\n  let obj4 = {};\n  obj4.__proto__ = obj3;\n  console.log(obj4, obj4.name, obj4.age);//可以调用原型上面的属性和方法\n\n\n\n\n\n# 二十、set 和 map 的常用方法\n\n1、set：无序不可重复的多个value的集合体\n\n * Set() ：通个过new Set（）生成set 对象\n * Set(array) ：通过数组生成set对象\n * add(value)\n * delete(value)\n * has(value)\n * clear()\n * size\n   2、 Map容器 : 无序的 key不重复的多个key-value的集合体\n * Map()：通过new Map() 生成map对象\n * Map(array)：通过数组生成map对象\n * set(key, value)\n * get(key)\n * delete(key)\n * has(key)\n * clear()\n * size\n\n  let set = new Set([1,2,3,4,3,2,1,6]);\n  console.log(set);\n  set.add('abc');\n  console.log(set, set.size);//会将重复的自动删除\n  //delete(value)\n  set.delete(2);\n  console.log(set);\n  //has(value)\n  console.log(set.has(2));//false\n  console.log(set.has(1));//true\n  //clear()\n  set.clear();\n  console.log(set);\n  \n  \n  \n  let map = new Map([['abc', 12],[25, 'age']]);//注意是二维数组，数组里面如果出现超过两个，自动去除，就要前两个\n  console.log(map);\n  map.set('男', '性别');\n  console.log(map);\n  console.log(map.get(25));//age\n  //delete(key)\n  map.delete('男');\n  console.log(map);\n  console.log(map.has('男'));//false\n  console.log(map.has('abc'));//true\n  map.clear();\n  console.log(map);\n\n\n\n# 二十一、for...of...使用总结\n\nfor(let value of target) { }：循环遍历\n\n 1. 遍历数组\n 2. 遍历Set：可以用来对数组进行去重。\n 3. 遍历Map\n 4. 遍历字符串\n 5. 遍历伪数组\n\n\n# 二十二、深度克隆\n\n数据类型： 数据分为基本的数据类型(String, Number, boolean, Null, Undefined)和对象数据类型。基本数据类型存储的是该对象的实际数据，对象数据类型存储的是该对象在栈中引用，真实的数据存放在堆内存里。 克隆数据的区别： 1、基础数据的复制是可以直接复制的，因为存放的就是实际的数据。 2、对象直接复制时，复制的是对象在栈内存中的引用 常用的拷贝： 1、直接复制，属于 浅拷贝 2、Object.assign() 浅拷贝 3、Array.prototype.concat() 浅拷贝 4、Array.prototype.slice() 浅拷贝 5、JSON.parse(JSON.stringify())深拷贝\n\n参考老师的自定义深度克隆方法。\n主要：\n1、Object.prototype.toString.call()可以判断是对象还是数组\n2、for ..in..数组是下标，对象是key，都可以用obj[item]来调用\n\n//获取类型\nfunction getType(target){\n\treturn Object.prototype.toString.call(target).slice(8,-1)  \n}\n//返回结果\nfunction getClone(target){\n\tlet type = this.getType(target);\n\tlet result;\n\tif(type==='Object'){  //为了每次递归时数据不用覆盖\n\t\tresult={}\n\t}else if(type==='Array'){\n\t\tresult=[]\n\t}else{\n\t\treturn target;\n\t}\n\t\n  for(let i in target){\n  \tif(this.getType(target[i])==='Object'||this.getType(target[i])==='Array'){\n  \t\tresult[i]=this.getClone(target[i])  //进行递归\n  \t}else{\n  \t\tresult[i]=target[i]\n  \t}\n  }\n  return result;\n}\n\n\nlet a={\n\tx:1,\n\ty:2,\n\tz:[232,232434]\n}\nb=this.getClone(a)\nb.x=4748;\nb.z[0]=989999999\nconsole.log(b,b.z)\n  \n \n\n\n//手写深拷贝\nfunction deepClone(obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj\n  }\n\n  let newObj\n  if (Array.isArray(obj)) {\n    newObj = []\n  } else {\n    newObj = {}\n  }\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      newObj[key] = deepClone(obj[key])\n    }\n  }\n\n  return newObj\n}\n\n\n说明：上面的代码首先判断输入的对象是否为对象或数组，如果不是则直接返回原对象。 否则，根据对象的类型创建一个新的空对象，然后递归遍历对象的每一个属性，并将该属性的值拷贝到新对象上。 注意：该代码仅适用于简单的对象，如果需要复制循环引用的对象，则需要额外处理。对于循环引用的对象，我们可以使用一个 WeakMap 来记录已经处理过的对象，以避免无限递归：\n\nfunction deepClone(obj, seen = new WeakMap()) {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj\n  }\n\n  if (seen.has(obj)) {\n    return seen.get(obj)\n  }\n\n  let newObj\n  if (Array.isArray(obj)) {\n    newObj = []\n  } else {\n    newObj = {}\n  }\n\n  seen.set(obj, newObj)\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      newObj[key] = deepClone(obj[key], seen)\n    }\n  }\n\n  return newObj\n}\n",normalizedContent:"# 一、let 的使用\n\nlet的作用与var类似, 用于声明一个变量，主要有三个特点： 1、作用域在块内：{} 2、不能够重复声明 3、不会预处理（var会在编译时变量提升）\n\n\n  //console.log(age);// age is not defined\n  let age = 12;\n  //let age = 13;不能重复声明\n  console.log(age);\n  let btns = document.getelementsbytagname('button');\n  for(let i = 0;i<btns.length;i++){//这里如果是var时，会导致alter出来的结果都是3\n          btns[i].onclick = function () {\n              alert(i);\n          }\n  }\n\n\n\n# 二、const的使用\n\nconst的作用是定义一个常量，过去定义常量时，用var声明，虽然全部大写，来表示常量，但是实际上是允许修改的，const声明的常量是不允许修改的。主要特点： 1、作用域在块内：{}， 2、不能够重复声明 3、不会预处理\n\n  const sex = '男';\n  console.log(sex);\n  //sex = '女';//不能修改\n  console.log(sex);\n\n\n\n# 三、变量的结构和赋值\n\n可以用一条语句给多个变量赋值： 1、对象： let {n, a} = {n:'tom', a:12} 2、数组： let [a,b] = [1, 'atguigu'];\n\n\n  let obj = {name : 'kobe', age : 39};\n  //对象的解构赋值\n  let {age} = obj;\n  console.log(age);\n//    let {name, age} = {name : 'kobe', age : 39};\n//    console.log(name, age);\n\n  //3. 数组的解构赋值  不经常用\n  let arr = ['abc', 23, true,4581];\n  let [a, b, c, d] = arr;\n  console.log(a, b, c, d);\n   let [, , , e] = arr;//找第四个位置的变量\n  console.log(e);\n  \n  function person(p) {//不用解构赋值\n      console.log(p.name, p.age);\n  }\n  person(obj);\n\n  function person1({name, age}) {\n   console.log(name, age);\n  }\n  person1(obj);//可以直接传递对象\n\n\n\n# 四、模板字符串的拼接\n\n用来简化字符串的拼接，使用``内...${xxx}...\n\n\n  let obj = {\n      name : 'anverson',\n      age : 41\n  };\n  console.log('我叫:' + obj.name + ', 我的年龄是：' + obj.age);\n  console.log(`我叫:${obj.name}, 我的年龄是：${obj.age}`);\n\n\n\n# 五、对象的简化写法\n\n1、可以省略的对象中的同名属性值 2、省略方法的function\n\n\n  let x = 3;\n  let y = 5;\n  //普通写法\n//    let obj = {\n//        x : x,\n//        y : y,\n//        getpoint : function () {\n//            return this.x + this.y\n//        }\n//    };\n  //简化的写法\n  let obj = {\n      x,\n      y,\n      getpoint(){\n          return this.x\n      }\n  };\n  console.log(obj, obj.getpoint());\n\n\n\n# 六、箭头函数\n\n箭头函数主要的作用就是定义匿名函数，多用来定义回调函数。 基本语法： 1、没有参数: () => console.log('x') 2、一个参数: i => i+8 3、大于一个参数: (i,j) => i+j 4、函数体不用大括号: 默认返回结果，可以省略return语句，打印时可以体现。 5、 函数体如果有多个语句, 需要用{}包围，若有需要返回的内容，需要手动返回\n\n   let fun = function () {\n       console.log('fun()');\n   };\n   fun();\n   //没有形参，并且函数体只有一条语句，可以改写成\n   let fun1 = () => console.log('fun1()');\n   fun1();\n   console.log(fun1());\n  \n  \n    //一个形参，并且函数体只有一条语句\n    let fun2 = x => x;\n    console.log(fun2(5));\n  \n  \n    //形参是一个以上\n    let fun3 = (x, y) => x + y;\n    console.log(fun3(25, 39));//64\n  \n  \n    //函数体有多条语句\n    let fun4 = (x, y) => {\n        console.log(x, y);\n        return x + y;\n    };\n    console.log(fun4(34, 48));//82，如果不return的话，打印的是没有结果的\n  \n  \n    //settimeout会将当中的this指向window对象\n    settimeout(() => {\n        console.log(this);\n    },1000)\n  \n    function person() {\n       this.obj = {\n           showthis : () => {\n               console.log(this);\n           }\n        }\n    }\n    let fun5 = new person();\n    fun5.obj.showthis();//person函数\n\n\n箭头函数中最重要的就是this的指向问题 官方定义：箭头函数没有自己的this，箭头函数的this不是调用的时候决定的，而是在定义的时候处在的对象就是它的this 判断方法：箭头函数的this看外层的是否有函数，如果有，外层函数的this就是内部箭头函数的this，如果没有，则this是window。\n\n\n# 七、点点点运算符\n\narguments：主要是在函数内部获取形参的伪数组，内部并没有数组的遍历方法，提供了callee函数来指向函数本身（多用来迭代使用） 点点点运算符: 1、可变参数：用在函数内部，是真正的数组，可以调用数组相关的方法的。 2、扩展运算符：为了拼接数组更加的方便（暂时）\n\n\n    function fun(...values) {\n        console.log(arguments);\n//        arguments.foreach(function (item, index) {\n//            console.log(item, index);//是无法使用的\n//        });\n        console.log(values);//真正的数组，可以调用数组的方法\n        values.foreach(function (item, index) {\n            console.log(item, index);\n        })\n    }\n    fun(1,2,3);\n    2、\n    let arr = [2,3,4,5,6];\n    let arr1 = ['abc',...arr, '123132'];\n    console.log(arr1);\n\n\n\n# 八、形参默认值\n\n形参默认值是函数有形参的情况下，调用函数时未传参，使用的默认值\n\n  function point(x=12, y=12) { //如果不传参的情况下，xy默认为12\n      this.x = x;\n      this.y = y;\n  }\n  let point = new point(25, 36);\n  console.log(point);\n  let p = new point();\n  console.log(p);\n\n\n\n# 九、promise对象\n\n代表了未来将要发生的事，有三个状态：pending（初始化状态），fullfilled（成功状态）， rejected（ 失败状态） 作用：可以将异步的操作用同步的流程表达出来，避免了层层嵌套的回调（回调地狱：异步操作执行成功后继续进行回调，会产生多层的回调，出错时，很难定位错误的位置，代码的可读性也不高。）\n\n  \n//创建一个promise实例对象\nlet promise = new promise((resolve, reject) => {\n\n    //初始化promise的状态为pending----\x3e初始化状态\n    console.log('1111');//同步执行\n\n    //启动异步任务\n    settimeout(function () {\n        console.log('3333');\n        //resolve('atguigu.com');\n        //修改promise的状态pending----\x3efullfilled（成功状态）\n        reject('xxxx');\n        //修改promise的状态pending-----\x3erejected(失败状态)\n    },1000)\n\n});\npromise.then((data) => {\n    console.log('成功了。。。' + data);\n}, (error) => {\n    console.log('失败了' + error);\n});\nconsole.log('2222');\n\n最终的打印结果为：1111,2222,3333，失败了\n\n\n主要应用可以用来封装ajax请求：\n\n//定义一个用ajax的方法\nfunction getnews(url) {\n  //创建一个promise对象\n  let promise = new promise((resolve, reject) => {\n      //初始化promise状态为pending\n      \n      //启动异步任务\n      let request = new xmlhttprequest();\n      \n      //设置监听\n      request.onreadystatechange = function () {\n          if(request.readystate === 4){\n              if(request.status === 200){\n                  let news = request.response;\n                  resolve(news);\n              }else{\n                  reject('请求失败了。。。');\n              }\n          }\n      };\n      \n      request.responsetype = 'json';//设置返回的数据类型\n      request.open(\"get\", url);//规定请求的方法，创建链接\n      request.send();//发送\n  })\n  return promise;\n}\n\n\n返回的promise对象可以调用then（）：\n\n  promise.then(function(\n    result => console.log(result),\n    errormsg => alert(errormsg)\n  ))\n\n\n实际使用：（接上）\n\n  getnews('xxx') .then((data) => {//返回值是一个promise对象\n      console.log(data);\n      return getnews('xxx'+data.xxx);//可以继续调用\n  }, (error) => {\n      alert(error);\n  })\n  .then((data) => {\n      console.log(data);\n  }, (error) => {\n      alert(error);\n  })\n\n\n\n# 十、symbol数据类型\n\nsymbol 是es6中添加的一种原始的数据类型（string, number, boolean, null, undefined, 对象），他具有以下特点： 1、symbol属性对应的值是唯一的，可以解决对象的命名冲突问题 2、symbol值不能与其他数据进行计算，包括同字符串拼串 3、for in, for of遍历时不会遍历symbol属性。\n\n  let symbol = symbol();//产生symbol是不需要进行new，可以直接产生。\n  //let symbol = symbol('one');//也可以直接参数使用\n  //let symbol2 = symbol('two');\n  console.log(typeof symbol); //symbol\n  console.log(symbol);  //symbol\n  \n  // 用作对象的属性(唯一)\n  let obj = {username: 'kobe', age: 39};\n  obj[symbol] = 'hello';\n  obj[symbol] = 'symbol';\n  console.log(obj);//打印的结果如下\n\n  for(let i in obj){\n    console.log(i); //遍历的结果中没有symbol(),使用for of 遍历时会报错\n  }\n\n\n\n\n\n# 十一、iterator遍历器\n\niterator是一种接口机制，为各种不同的数据结构提供统一的访问机制，使满足的数据成员可以按照某种次序排列，并且主要是满足了for..of 的使用。 工作原理： 1.创建一个指针对象，指向数据结构的起始位置。 2.第一次调用next方法，指针自动指向数据结构的第一个成员（第一次调用时才会指向第一个成员！！！） 3.接下来不断调用next方法，指针会一直往后移动，直到指向最后一个成员 4.每调用next方法返回的是一个包含value和done的对象，value表示当前成员的值，done对应的布尔值表示当前的数据的结构是否遍历结束。当遍历结束的时候返回的value值是undefined，done值为true，其他时候的done为false。 目前可以直接使用iterator遍历器功能的对象为： 1、array 2、arguments 3、set容器 4、map容器 5、string等\n\n  // 原生测试  数组\n  let arr3 = [1, 2, 'kobe', true];\n  for(let i of arr3){\n    console.log(i);\n  }\n  // 字符串  string\n  let str = 'abcdefg';\n  for(let item of str){\n    console.log(item);\n  }\n  \n  //模拟iterator遍历器功能的函数\n  function mockiterator(arr) {\n    let nextindex = 0;\n    return {\n      next: function () {\n        return nextindex<arr.length?{value: arr[nextindex++], done: false}:{value: undefined, done: true}\n      }\n    }\n  }\n  \n  let arr = [1,2,3,4,5];\n  let iteratorobj = mockiterator(arr);\n  console.log(iteratorobj.next());\n  console.log(iteratorobj.next());\n  console.log(iteratorobj.next());\n\n\n\n# 十二、generator函数\n\ngenerator函数是es6提供的解决异步编程方案之一，他其实是一个状态机，内部用yield来实现对不同状态的控制。可以生成遍历器对象。可以配合对象的symbol.iterator属性来使对象具有for of 的使用方法。\n\n主要特点： 1、function 与函数名之间有一个星号 2、内部用yield表达式来定义不同的状态\n\n  function* generatorexample(){\n    let result = yield 'hello';  // 状态值为hello\n    yield 'generator'; // 状态值为generator\n  }\n\n\n3、generator函数返回的是指针对象(接iterator)，而不会执行函数内部逻辑 4、调用next方法函数内部逻辑开始执行，遇到yield表达式停止，返回{value: yield后的表达式结果/undefined, done: false/true} 5、再次调用next方法会从上一次停止时的yield处开始，直到最后\n\n  function* generatortest() {\n    console.log('函数开始执行');\n    yield 'hello';\n    console.log('函数暂停后再次启动');\n    yield 'generator';\n  }\n  // 生成遍历器对象\n  let gt = generatortest();\n  // 执行函数，遇到yield后即暂停\n  console.log(gt); // 遍历器对象\n  let result = gt.next(); // 函数执行,遇到yield暂停\n  console.log(result); // {value: \"hello\", done: false}\n  result = gt.next(); // 函数再次启动\n  console.log(result); // {value: 'generator', done: false}\n  result = gt.next();\n  console.log(result); // {value: undefined, done: true}表示函数内部状态已经遍历完毕\n\n\n\n6、可以配合对象的symbol.iterator属性来使对象具有for of 的使用方法。\n\n  // 对象的symbol.iterator属性;\n  let myiterable = {};\n  myiterable[symbol.iterator] = function* () {\n    yield 1;\n    yield 2;\n    yield 4;\n  };\n  for(let i of myiterable){\n    console.log(i);// 1 2 4 \n  }\n  let obj = [...myiterable];\n  console.log(obj); //[1,2,4]\n\n\n7、yield语句返回结果通常为undefined， 当调用next方法时传参内容会作为启动时yield语句的返回值。\n\n  function getnews(url) {\n    $.get(url, function (data) { //使用jquery的方式发送ajax请求\n      console.log(data);\n      let commentsurl = data.commentsurl;\n      let url = 'xxx' + commentsurl;\n      \n      // 调用next传参会作为上次暂停是yield的返回值\n      sx.next(url); //通过next传参的操作是要在yield的下一步进行的\n    })\n  }\n  \n  function* sendxml() {\n    // url为next传参进来的数据\n    let url = yield getnews('xxx');\n    yield getnews(url);\n  }\n  \n  let sx = sendxml();\n  sx.next();\n    \n\n\n\n# 十三、async函数\n\nasync函数是es2017的内容，主要是解决异步回调的问题，用同步流程来解决异步操作，属于generator的语法糖\n\n  async function foo(){\n    await 异步操作;\n    await 异步操作；\n  }\n\n\n主要特点： 1、不需要像generator去调用next方法，遇到await等待，当前的异步操作完成就往下执行 2、返回的总是promise对象，可以用then方法进行下一步操作 3、async取代generator函数的星号*，await取代generator的yield\n\n  //定义一个异步函数,返回的是promise对象\n  async function timeout(ms) {\n      return new promise(resolve => {\n        settimeout(resolve, ms);\n      })\n    }\n    \n    \n    async function asyncprint(value, ms) {\n      console.log('函数执行', new date().totimestring());\n      await timeout(ms);//等待异步函数执行结束，才会继续的向下执行\n      console.log('延时时间', new date().totimestring());\n      console.log(value);\n    }\n  \n  \n    asyncprint('hello async', 2000)\n\n\n\n# 十四、class类\n\nes6可以通过定义class类实现构造方法，类的继承。可以通过new来创建实例，用extends实现类的继承\n\nclass person {\n\n    //调用类的构造方法\n    constructor(name, age){\n        this.name = name;\n        this.age = age;\n    }\n    \n    //定义一般的方法\n    showname(){\n        console.log(this.name, this.age);\n    }\n}\nlet person = new person('kobe', 39);\nconsole.log(person, person.showname());//方法在实例的原型上，可以直接调用\n\n\n\n//定义一个子类\nclass strperson extends person{\n\n    constructor(name, age, salary){\n        super(name, age);//调用父类的构造方法，需要将参数传入\n        this.salary = salary;\n    }\n    \n    //在子类自身定义方法，相当于重写了父类的方法\n    showname(){\n        console.log(this.name, this.age, this.salary);\n    }\n}\nlet str = new strperson('weide', 38, 1000000000);\nconsole.log(str);\nstr.showname();\n\n\n 1. 通过class定义类/实现类的继承\n 2. 在类中通过constructor定义构造方法\n 3. 通过new来创建类的实例\n 4. 通过extends来实现类的继承\n 5. 通过super调用父类的构造方法\n 6. 重写从父类中继承的一般方法\n\n<script type=\"text/javascript\">\n  class person {\n      //调用类的构造方法\n      constructor(name, age){\n          this.name = name;\n          this.age = age;\n\n      }\n      //定义一般的方法\n      showname(){\n          console.log(this.name, this.age);\n      }\n  }\n  let person = new person('kobe', 39);\n  console.log(person, person.showname());\n\n  //定义一个子类\n  class strperson extends person{\n      constructor(name, age, salary){\n          super(name, age);//调用父类的构造方法\n          this.salary = salary;\n      }\n      showname(){//在子类自身定义方法\n          console.log(this.name, this.age, this.salary);\n      }\n  }\n  let str = new strperson('weide', 38, 1000000000);\n  console.log(str);\n  str.showname();\n\n\n\n# 十六、字符串方法的扩展\n\n 1. includes(str) : 判断是否包含指定的字符串\n 2. startswith(str) : 判断是否以指定字符串开头\n 3. endswith(str) : 判断是否以指定字符串结尾\n 4. repeat(count) : 重复指定次数\n\n  let str = 'abcdefg';\n  console.log(str.includes('a'));//true\n  console.log(str.includes('h'));//false\n  \n  //startswith(str) : 判断是否以指定字符串开头\n  console.log(str.startswith('a'));//true\n  console.log(str.startswith('d'));//false\n  \n  //endswith(str) : 判断是否以指定字符串结尾\n  console.log(str.endswith('g'));//true\n  console.log(str.endswith('d'));//false\n  \n  //repeat(count) : 重复指定次数a\n  console.log(str.repeat(5));//abcdefgabcdefgabcdefgabcdefgabcdefg\n\n\n\n# 十七、数值方法的拓展\n\n 1. 二进制与八进制数值表示法: 二进制用0b, 八进制用0o\n 2. number.isfinite(i) : 判断是否是有限大的数\n 3. number.isnan(i) : 判断是否是nan\n 4. number.isinteger(i) : 判断是否是整数\n 5. number.parseint(str) : 将字符串转换为对应的数值\n 6. math.trunc(i) : 直接去除小数部分\n\n  console.log(0b1010);//10\n  console.log(0o56);//46\n  \n  //number.isfinite(i) : 判断是否是有限大的数\n  console.log(number.isfinite(nan));//false\n  console.log(number.isfinite(5));//true\n  \n  //number.isnan(i) : 判断是否是nan\n  console.log(number.isnan(nan));//true\n  console.log(number.isnan(5));//falsse\n  \n  //number.isinteger(i) : 判断是否是整数\n  console.log(number.isinteger(5.23));//false\n  console.log(number.isinteger(5.0));//true  这也属于整数\n  console.log(number.isinteger(5));//true\n  \n  //number.parseint(str) : 将字符串转换为对应的数值\n  console.log(number.parseint('123abc'));//123\n  console.log(number.parseint('a123abc'));//nan\n  \n  // math.trunc(i) : 直接去除小数部分\n  console.log(math.trunc(13.123));//13\n\n\n\n# 十八、数组方法的拓展\n\n 1. array.from(v) : 将伪数组对象或可遍历对象转换为真数组\n 2. array.of(v1, v2, v3) : 将一系列值转换成数组\n 3. find(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素\n 4. findindex(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素下标\n\n  //array.from(v) : 将伪数组对象或可遍历对象转换为真数组\n  let btns = document.getelementsbytagname('button');//伪数组\n  console.log(btns.length);//3\n  array.from(btns).foreach(function (item, index) {\n      console.log(item, index);\n  });\n  \n  //array.of(v1, v2, v3) : 将一系列值转换成数组\n  let arr = array.of(1, 'abc', true);\n  console.log(arr);\n  \n  //find(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素\n  let arr1 = [1,3,5,2,6,7,3];\n  let result = arr1.find(function (item, index) {\n      return item >3 \n  });\n  let result2  = arr1.find((item)=>{\n        return item > 6     //表达式要返回正确的值\n  })\n  console.log(result);//5\n  \n  \n  //findindex(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素下标\n  let result1 = arr1.findindex(function (item, index) {\n      return item >3\n  });\n  console.log(result1);//2\n\n\n\n# 十九、对象方法的扩展\n\n 1. object.is(v1, v2)：判断2个数据是否完全相等\n 2. object.assign(target, source1, source2..)： 将源对象的属性复制到目标对象上\n 3. 直接操作 proto 属性：（隐式原型）\n\n  console.log(object.is('abc', 'abc'));//true\n  \n  console.log(nan == nan);//false nan与任何的数都不相等\n   console.log(0 == -0);//true\n   \n   //这两个属于特殊情况，底层在实现的时候用了字符串进行比较\n  console.log(object.is(nan, nan));//true  \n  console.log(object.is(0, -0));//false\n  \n  //object.assign(target, source1, source2..)\n  let obj = {name : 'kobe', age : 39, c: {d: 2}};\n  let obj2 = {name : 'jignisgniasjfdi', sex: \"test\", c: {d: 2}}; \n  let obj1 = {};\n  object.assign(obj1, obj,obj2);\n  console.log(obj1, obj1.name);//结果如图所示，注意属性的覆盖\n  \n  //直接操作 __proto__ 属性\n  let obj3 = {name : 'anverson', age : 41};\n  let obj4 = {};\n  obj4.__proto__ = obj3;\n  console.log(obj4, obj4.name, obj4.age);//可以调用原型上面的属性和方法\n\n\n\n\n\n# 二十、set 和 map 的常用方法\n\n1、set：无序不可重复的多个value的集合体\n\n * set() ：通个过new set（）生成set 对象\n * set(array) ：通过数组生成set对象\n * add(value)\n * delete(value)\n * has(value)\n * clear()\n * size\n   2、 map容器 : 无序的 key不重复的多个key-value的集合体\n * map()：通过new map() 生成map对象\n * map(array)：通过数组生成map对象\n * set(key, value)\n * get(key)\n * delete(key)\n * has(key)\n * clear()\n * size\n\n  let set = new set([1,2,3,4,3,2,1,6]);\n  console.log(set);\n  set.add('abc');\n  console.log(set, set.size);//会将重复的自动删除\n  //delete(value)\n  set.delete(2);\n  console.log(set);\n  //has(value)\n  console.log(set.has(2));//false\n  console.log(set.has(1));//true\n  //clear()\n  set.clear();\n  console.log(set);\n  \n  \n  \n  let map = new map([['abc', 12],[25, 'age']]);//注意是二维数组，数组里面如果出现超过两个，自动去除，就要前两个\n  console.log(map);\n  map.set('男', '性别');\n  console.log(map);\n  console.log(map.get(25));//age\n  //delete(key)\n  map.delete('男');\n  console.log(map);\n  console.log(map.has('男'));//false\n  console.log(map.has('abc'));//true\n  map.clear();\n  console.log(map);\n\n\n\n# 二十一、for...of...使用总结\n\nfor(let value of target) { }：循环遍历\n\n 1. 遍历数组\n 2. 遍历set：可以用来对数组进行去重。\n 3. 遍历map\n 4. 遍历字符串\n 5. 遍历伪数组\n\n\n# 二十二、深度克隆\n\n数据类型： 数据分为基本的数据类型(string, number, boolean, null, undefined)和对象数据类型。基本数据类型存储的是该对象的实际数据，对象数据类型存储的是该对象在栈中引用，真实的数据存放在堆内存里。 克隆数据的区别： 1、基础数据的复制是可以直接复制的，因为存放的就是实际的数据。 2、对象直接复制时，复制的是对象在栈内存中的引用 常用的拷贝： 1、直接复制，属于 浅拷贝 2、object.assign() 浅拷贝 3、array.prototype.concat() 浅拷贝 4、array.prototype.slice() 浅拷贝 5、json.parse(json.stringify())深拷贝\n\n参考老师的自定义深度克隆方法。\n主要：\n1、object.prototype.tostring.call()可以判断是对象还是数组\n2、for ..in..数组是下标，对象是key，都可以用obj[item]来调用\n\n//获取类型\nfunction gettype(target){\n\treturn object.prototype.tostring.call(target).slice(8,-1)  \n}\n//返回结果\nfunction getclone(target){\n\tlet type = this.gettype(target);\n\tlet result;\n\tif(type==='object'){  //为了每次递归时数据不用覆盖\n\t\tresult={}\n\t}else if(type==='array'){\n\t\tresult=[]\n\t}else{\n\t\treturn target;\n\t}\n\t\n  for(let i in target){\n  \tif(this.gettype(target[i])==='object'||this.gettype(target[i])==='array'){\n  \t\tresult[i]=this.getclone(target[i])  //进行递归\n  \t}else{\n  \t\tresult[i]=target[i]\n  \t}\n  }\n  return result;\n}\n\n\nlet a={\n\tx:1,\n\ty:2,\n\tz:[232,232434]\n}\nb=this.getclone(a)\nb.x=4748;\nb.z[0]=989999999\nconsole.log(b,b.z)\n  \n \n\n\n//手写深拷贝\nfunction deepclone(obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj\n  }\n\n  let newobj\n  if (array.isarray(obj)) {\n    newobj = []\n  } else {\n    newobj = {}\n  }\n\n  for (const key in obj) {\n    if (obj.hasownproperty(key)) {\n      newobj[key] = deepclone(obj[key])\n    }\n  }\n\n  return newobj\n}\n\n\n说明：上面的代码首先判断输入的对象是否为对象或数组，如果不是则直接返回原对象。 否则，根据对象的类型创建一个新的空对象，然后递归遍历对象的每一个属性，并将该属性的值拷贝到新对象上。 注意：该代码仅适用于简单的对象，如果需要复制循环引用的对象，则需要额外处理。对于循环引用的对象，我们可以使用一个 weakmap 来记录已经处理过的对象，以避免无限递归：\n\nfunction deepclone(obj, seen = new weakmap()) {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj\n  }\n\n  if (seen.has(obj)) {\n    return seen.get(obj)\n  }\n\n  let newobj\n  if (array.isarray(obj)) {\n    newobj = []\n  } else {\n    newobj = {}\n  }\n\n  seen.set(obj, newobj)\n\n  for (const key in obj) {\n    if (obj.hasownproperty(key)) {\n      newobj[key] = deepclone(obj[key], seen)\n    }\n  }\n\n  return newobj\n}\n",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675751906e3},{title:"nodeJs学习",frontmatter:{title:"nodeJs学习",permalink:"/pages/937e4b/",categories:["前端","技术文章"],tags:["node"],date:"2020-06-01T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/11.nodeJs%E5%AD%A6%E4%B9%A0.html",relativePath:"01.前端/01.学过的习/11.nodeJs学习.md",key:"v-63785efd",path:"/pages/937e4b/",headers:[{level:3,title:"知识储备",slug:"知识储备",normalizedTitle:"知识储备",charIndex:2},{level:3,title:"Node是什么",slug:"node是什么",normalizedTitle:"node是什么",charIndex:444},{level:3,title:"模块化",slug:"模块化",normalizedTitle:"模块化",charIndex:651},{level:3,title:"npm的命令",slug:"npm的命令",normalizedTitle:"npm的命令",charIndex:2562},{level:3,title:"包（package）",slug:"包-package",normalizedTitle:"包（package）",charIndex:2989},{level:3,title:"文件系统（File System）",slug:"文件系统-file-system",normalizedTitle:"文件系统（file system）",charIndex:3280}],headersStr:"知识储备 Node是什么 模块化 npm的命令 包（package） 文件系统（File System）",content:'# 知识储备\n\n1.命令行窗口\n\n   目录\n\t\t. 表示当前目录\n\t\t.. 表示上一级目录\n\t\n   常用的指令：\n\t\tdir 列出当前目录下的所有文件\n\t\tcd 目录名 进入到指定的目录\n\t\tmd 目录名 创建一个文件夹\n\t\trd 目录名 删除一个文件夹\t\n\t\n   环境变量（windows系统中变量）\t\n   path\n\t\tC:\\work\\jdk\\jdk1.7.0_75/bin;\n\t\t。。。。\n\t\tC:\\Users\\zl\\Desktop\\hello\n\t\t\n\t      当我们在命令行窗口打开一个文件，或调用一个程序时，\n\t系统会首先在当前目录下寻找文件程序，如果找到了则直接打开\n\t如果没有找到则会依次到环境变量path的路径中寻找，直到找到\n\t为止如果没找到则报错所以我们可以将一些经常需要访问的程序\n\t和文件的路径添加到path中，这样我们就可以在任意位置来访问\n\t这些文件和程序了\n\n\n2、I/O (Input/Output)，I/O操作指的是对磁盘的读写操作\n\n\n# Node是什么\n\n1、node是一款对ES标准实现的JS引擎\n\n2、通过node可以使js在服务器中运行\n\n3、node就是一款使用js编写的web服务器\n\n4、node底层是使用c++的编写的\n\n5、node的中js引擎使用的chrome的v8引擎\n\n6、node的特点：\n\n * a.非阻塞、异步的I/O\n * b.事件和回调函数\n * c.单线程（主线程单线程，后台I/O线程池）\n * d.跨平台\n\n\n# 模块化\n\n1、ES5中没有原生支持模块化，我们只能通过script标签引入js文件来实现模块化,ES6内置了模块化，定义暴露模块 : export\n\n2、在node中为了对模块管理，引入了CommonJS规范\n\n3、模块的引用\n\n\t\t使用 require()函数来引入一个模块\n\t    如：var 变量 = require("模块的标识");\n\n\n4、模块的标识\n\n       模块的标识就是模块的名字或路径，我们node通过模块的标识来寻找模块的\n\t   对于核心模块（npm中下载的模块），直接使用模块的名字\n\n\n5、模块的定义\n\n     在node中一个js文件就是一个模块， 默认情况下在js文件中编写的内容，都是运行在一个独立的函数中，外部的模块无法访问，但是我们可以导出变量和函数。\n   \n     导出变量和函数\n     1、使用 exports \n     例子：\n\t\t\texports.属性 = 属性值;\n\t\t\texports.方法 = 函数;\n\t\t\t\t\t\t\t\n     2、使用module.exports\n     例子：\n\t\t    module.exports.属性 = 属性值;\n\t\t\tmodule.exports.方法 = 函数;\n\t\t\tmodule.exports = {};\n\t\t\t\n     对其进行引入\n\t\t\tvar fs = require("xx");\n\t\t\tvar express = require("xx");\n\t\t\n\n\n\t\t\t\t\n     对于自定义的文件模块，需要通过文件的路径来对模块进行引入，路径可以是绝对路径，如果是相对路径必须以./或 ../开头\n\t    \tvar router = require("./router");\n]\n\t在node中，通过require()函数来引入外部的模块\n\t\trequire()可以传递一个文件的路径作为参数，node将会自动根据该路径来引入外部模块\n\t\t这里路径，如果使用相对路径，必须以.或..开头\n\n\t使用require()引入模块以后，该函数会返回一个对象，这个对象代表的是引入的模块\n\t我们使用require()引入外部模块时，使用的就是模块标识，我们可以通过模块标识来找到指定的模块\n    模块分成两大类\n\t\t核心模块\n\t\t\t- 由node引擎提供的模块\n\t\t\t- 核心模块的标识就是，模块的名字\n\t\t文件模块\n\t\t\t- 由用户自己创建的模块\n\t\t\t- 文件模块的标识就是文件的路径（绝对路径，相对路径）\n\t\t\t\t相对路径使用.或..开头\n\n\n\n\n\n\n\t在node中有一个全局对象 global，它的作用和网页中window类似\n\t\t在全局中创建的变量都会作为global的属性保存\n\t\t在全局中创建的函数都会作为global的方法保存\n\t\t\n\n\t当node在执行模块中的代码时，它会首先在代码的最顶部，添加如下代码\n \t\t\tfunction (exports, require, module, __filename, __dirname) {\n                   在代码的最底部，添加如下代码\n \t\t\t}\n\n \t实际上模块中的代码都是包装在一个函数中执行的，并且在函数执行时，同时传递进了5个实参\n\t\t exports\n\t\t \t- 该对象用来将变量或函数暴露到外部\n\t\t \t \n\t\t require\n\t\t \t- 函数，用来引入外部的模块\n\n\t\t module\n\t\t \t- module代表的是当前模块本身\n\t\t \t- exports就是module的属性\n\t\t \t- 既可以使用 exports 导出，也可以使用module.exports导出\n\t\t \t \n\t\t __filename\n \t\t\tC:\\Users\\zl\\WebstormProjects\\class0705\\01.node\\04.module.js\n \t\t\t- 当前模块的完整路径\n\n\t  \t __dirname\n \t\t\tC:\\Users\\zl\\WebstormProjects\\class0705\\01.node\n \t\t\t- 当前模块所在文件夹的完整路径\n\n\n\n   \texports 和 module.exports\n\t\t- 通过exports只能使用.的方式来向外暴露内部变量\n\t\t\texports.xxx = xxx\n\n\t\t- 而module.exports既可以通过.的形式，也可以直接赋值\n\t\t\tmodule.exports.xxx = xxxx\n\t\t\tmodule.exports = {}\n\n\n\n# npm的命令\n\n通过npm下载的包都放到node_modules文件夹中,我们通过npm下载的包，直接通过包名引入即可。node在使用模块名字来引入模块时，它会首先在当前目录的node_modules中寻找是否含有该模块 1、如果有则直接使用，如果没有则去上一级目录的node_modules中寻找 2、如果有则直接使用，如果没有则再去上一级目录寻找，直到找到为止 3、直到找到磁盘的根目录，如果依然没有，则报错\n\n\t npm -v 查看npm的版本\n\t npm version 查看所有模块的版本\n\t npm search 包名 搜索包\n\t npm install / i 包名 安装包\n\t npm remove / r 包名 删除包\n\t npm install 包名 --save 安装包并添加到依赖中\n\t npm install 下载当前项目所依赖的包\n\t npm install 包名 -g 全局安装包（全局安装的包一般都是一些工具）\n\n\n\n# 包（package）\n\n将多个模块组合为一个完整的功能，就是一个包\n包结构\n\tbin：\n\t\t 二进制的可执行文件，一般都是一些工具包中才有\n\tlib：\n\t\t js文件\n\tdoc：\n\t\t 文档\n\ttest：\n\t\t 测试代码\n\tpackage.json：\n\t\t 包的描述文件\n\t\t\n    package.json:\n\t    它是一个json格式的文件，在它里面保存了包各种相关的信息\n\t\t     name 包名\n\t\t     version 版本\n\t     \t dependencies 依赖\n\t    \t main 包的主要的文件\n\t\t     bin 可执行文件\n\n\n\n# 文件系统（File System）\n\n1、Buffer（缓冲区） Buffer和数组的结构的非常类似，Buffer是用来存储二进制数据的\n\n Buffer的方法：\n\t Buffer.from(字符串):将一个字符串中内容保存到一个buffer中\n\t  \n     buf.toString(): 将buffer转换为一个字符串\n     \n     Buffer.alloc(size)：创建一个指定大小的buffer对象\n     \n     Buffer.allocUnsafe(size)：创建一个指定大小的buffer对象，可以包含敏感数据（未将创建的内存区域的清空）\n\n\n更多内容：Node官网 方法\n\n2、fs模块 在Node通过fs模块来对系统中的文件进行操作，fs模块是node中已经继承好了，不需要在使用npm下载，直接引入即可\n\n1、引入fs\n\t  var fs = require("fs");\n\t\t\t\n2、fs模块中的大部分操作都提供了两种方法，同步方法和异步方法\n       同步方法带sync\n\t   异步方法没有sync，都需要回调函数\n\n\t\t\n3、方法（ 带sync的都是同行的方法，有callback回调函数的都是异步方法）\n   打开文件\n      fs.open(path, flags[, mode], callback)\n      fs.openSync(path, flags[, mode])\n   关闭文件\n      fs.close(fd, callback)\n      fs.closeSync(fd)\n\n\n   写入文件\n   \n\t    1.同步写入\n\t       fs.writeSync(fd, buffer, offset, length[, position])\n           fs.writeSync(fd, data[, position[, encoding]])\n           要完成同步写入文件，先需要通过openSync()打开文件来获取一个文件描述符，然后在通过writeSync()写入文件。\n           参数： – fd 文件描述符，通过openSync()获取\n                 – data 要写入的数据（String 或 Buffer）\n                 – offset buffer写入的偏移量\n                 – length 写入的长度\n                 – position 写入的起始位置\n                 – encoding 写入编码\n                 \n\t\t2.异步写入\n          fs.write(fd, buffer, offset, length[, position], callback)\n          fs.write(fd, data[, position[, encoding]], callback)\n          要使用异步写入文件，先需要通过open()打开文件，然后在回调函数中通过write()写入。\n          参数： – fd 文件描述符\n\t\t\t\t– data 要写入的数据（String 或 Buffer）\n\t\t\t\t– offset buffer写入的偏移量\n\t\t\t\t– length 写入的长度\n\t\t\t\t– position 写入的起始位置\n\t\t\t\t– encoding 写入编码\n\t\t\t\t\t\n\t\t3.简单写入\n\t\t\tfs.writeFile(file, data[, options], callback)\n\t\t    fs.writeFileSync(file, data[, options])\n\t\t    参数：  – file 文件路径\n\t               – data 被写入的内容，可以是String或Buffer\n\t               – options 对象，包含属性（encoding、mode、flag）\n\t               – callback 回调\n\t\t               \n\t\t4.流式写入\n\t\t往一个文件中写入大量数据时，最好的方法之一是使用流。\n        若要将数据异步传送到文件，首需要使用以下语法创建一个Writable对象：\n        fs.createWriteStream(path[, options])\n              -path 文件路径\n              -options {encoding:"",mode:"",flag:""}\n        一旦你打开了Writable文件流，就可以使用\n        write()方法来写入它，写入完成后，再调用end()方法来关闭流\n\n\n\n 读取文件\n\t\t1.同步读取\n\t\t   fs.readSync(fd, buffer, offset, length, position)\n           参数：\n\t\t\t\t-fd 文件描述符\n\t\t\t\t-buffer 读取文件的缓冲区\n\t\t\t\t-offset buffer的开始写入的位置\n\t\t\t\t-length 要读取的字节数\n\t\t\t\t-position 开始读取文件的位置\n\t\t\t\t\n\t\t\t\n\t\t2.异步读取\n\t\t   fs.read(fd, buffer, offset, length, position, callback)\n\t       参数：\n\t\t\t\t-fd 文件描述符\n\t\t\t\t-buffer 读取文件的缓冲区\n\t\t\t\t-offset buffer的开始写入的位置\n\t\t\t\t-length 要读取的字节数\n\t\t\t\t-position 开始读取文件的位置\n\t\t\t\t-callback 回调函数 参数err , bytesRead , buffer\n\n\n\t\t3.简单读取\n           fs.readFile(file[, options], callback)\n           fs.readFileSync(file[, options])\n\t\t   参数:    -file 文件路径或文件描述符\n\t\t           -options <Object> | <String>\n\t\t           -encoding <String> | <Null> 默认 = null\n\t\t           -flag <String> 默认 = \'r\'\n\t\t           -callback 回调函数，有两个参数err 、data\n\n\n\t\t4.流式读取\n           从一个文件中读取大量的数据时，最好的方法之一就是流式读取，这样将把一个文件作为Readable流的形式打开。要从异步从文件传输数据，首先需要通过以下语法创建一个Readable流对象：\n           fs.createReadStream(path[, options])\n           -path 文件路径\n           -options {encoding:"",mode:"",flag:""}\n           \n           当你打开Readable文件流以后，可以通过readable事件和read()请求，或通过data事件处理程序轻松地从它读出。\n\n\n其他方法：\n        验证路径是否存在\n        – fs.existsSync(path)\n        \n        获取文件信息\n\t\t– fs.stat(path, callback)\n\t\t– fs.statSync(path)\n\t\t\n\t\t删除文件\n\t\t– fs.unlink(path, callback)\n\t\t– fs.unlinkSync(path)\n\t\t\n\t\t列出文件\n\t\t– fs.readdir(path[, options], callback)\n\t\t– fs.readdirSync(path[, options])\n\t\t\n\t\t截断文件\n\t\t– fs.truncate(path, len, callback)\n\t\t– fs.truncateSync(path, len)\n\t\t\n\t\t建立目录\n\t\t– fs.mkdir(path[, mode], callback)\n\t\t– fs.mkdirSync(path[, mode])\n\t\t\n\t\t删除目录\n\t\t– fs.rmdir(path, callback)\n\t\t– fs.rmdirSync(path)\n\t\t\n\t\t重命名文件和目录\n\t\t– fs.rename(oldPath, newPath, callback)\n\t\t– fs.renameSync(oldPath, newPath)\n\t\t\n\t\t监视文件更改写入\n\t\t– fs.watchFile(filename[, options], listener)\n\t\t\t\t\t\n\n\n\n\n更多官方方法：Node官网 方法\n\n代码：\n\n1、Buffer(缓冲区)\n\n\t- Buffer的结构和数组很像，操作的方法也和数组类似\n\t- 数组中不能存储二进制的文件，而buffer就是专门用来存储二进制数据\n\t- 使用buffer不需要引入模块，直接使用即可\n\t- 在buffer中存储的都是二进制数据，但是在显示时都是以16进制的形式显示\n\tbuffer中每一个元素的范围是从00 - ff   0 - 255\n\t00000000 - 11111111\n\n\t计算机 一个0 或一个1 我们称为1位（bit）\n\n\t8bit = 1byte（字节）\n\t1024byte = 1kb\n\t1024kb = 1mb\n\t1024mb = 1gb\n\t1024gb = 1tb\n\n\tbuffer中的一个元素，占用内存的一个字节\n   \tBuffer的大小一旦确定，则不能修改，Buffer实际上是对底层内存的直接操作\n\n\tvar str = "Hello 尚硅谷";\n\t\n\t//将一个字符串保存到buffer中\n\tvar buf = Buffer.from(str);\n\t\n\t//console.log(buf.length); //占用内存的大小\n\t//console.log(str.length);//字符串的长度\n\t//console.log(buf);\n\t\n\t//创建一个指定大小的buffer\n\t//buffer构造函数都是不推荐使用的\n\t//var buf2 = new Buffer(10);//10个字节的buffer\n\t//console.log(buf2.length);\n\n\t//创建一个10个字节的buffer\n\tvar buf2 = Buffer.alloc(10);\n\t//通过索引，来操作buf中的元素\n\tbuf2[0] = 88;\n\tbuf2[1] = 255;\n\tbuf2[2] = 0xaa;\n\tbuf2[3] = 255;\n\n    只要数字在控制台或页面中输出一定是10进制\n    console.log(buf2[2].toString(16));\n\n\tfor(var i=0 ; i<buf2.length ; i++){\n\t\tconsole.log(buf2[i]);\n\t}\n\n\tBuffer.allocUnsafe(size) 创建一个指定大小的buffer，但是buffer中可能含有敏感数据\n\tvar buf3 = Buffer.allocUnsafe(10);\n\tconsole.log(buf3);\n\n\tBuffer.from(str) 将一个字符串转换为buffer\n\tBuffer.alloc(size) 创建一个指定大小的Buffer\n\tBuffer.alloUnsafe(size) 创建一个指定大小的Buffer，但是可能包含敏感数据\n \tbuf.toString() 将缓冲区中的数据转换为字符串\n\n   var buf4 = Buffer.from("我是一段文本数据");\n\n   console.log(buf4.toString());\n\n\n2、简单文件写入\n\n\n\t fs.writeFile(file, data[, options], callback)\n\t fs.writeFileSync(file, data[, options])\n\t\t- file 要操作的文件的路径\n\t\t- data 要写入的数据\n\t\t- options 选项，可以对写入进行一些设置\n\t\t- callback 当写入完成以后执行的函数\n\t\n\t\t- flag\n\t\t\tr 只读\n\t\t\tw 可写\n\t\t\ta 追加\n\n\t//引入fs模块\n\tvar fs = require("fs");\n\t\n\tfs.writeFile("hello3.txt","这是通过writeFile写入的内容",{flag:"r+"} , function (err) {\n\t\tif(!err){\n\t\t\tconsole.log("写入成功~~~");\n\t\t}else{\n\t\t\tconsole.log(err);\n\t\t}\n\t});\n\t\n\tfs.writeFile("C:/Users/zl/Desktop/hello.txt","这是通过writeFile写入的内容",{flag:"w"} , function (err) {\n\t\tif(!err){\n\t\t\tconsole.log("写入成功~~~");\n\t\t}else{\n\t\t\tconsole.log(err);\n\t\t}\n\t});\n\n\n3、异步文件写入\n\n\tfs.open(path, flags[, mode], callback)\n\t\t- 用来打开一个文件\n\t   - 异步调用的方法，结果都是通过回调函数的参数返回的\n\t\t- 回调函数两个参数：\n\t\t\terr 错误对象，如果没有错误则为null\n\t\t\tfd  文件的描述符\n\tfs.write(fd, string[, position[, encoding]], callback)\n\t\t- 用来异步写入一个文件\n\t\n\tfs.close(fd, callback)\n\t\t- 用来关闭文件\n\n\n\t//引入fs模块\n\tvar fs = require("fs");\n\t\n\t//打开文件\n\tfs.open("hello2.txt","w",function (err , fd) {\n\t\n\t//判断是否出错\n\tif(!err){\n\t\t//如果没有出错，则对文件进行写入操作\n\t\tfs.write(fd,"这是异步写入的内容",function (err) {\n\t\t\tif(!err){\n\t\t\t\tconsole.log("写入成功~~");\n\t\t\t}\n\t\t\t//关闭文件\n\t\t\tfs.close(fd , function (err) {\n\t\t\t\tif(!err){\n\t\t\t\t\tconsole.log("文件已关闭~~~");\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}else{\n\t\tconsole.log(err);\n\t}\n\t});\n\t\n\tconsole.log("程序向下执行~~~");\n\n\n\n4、流式文件写入\n\n\t同步、异步、简单文件的写入都不适合大文件的写入，性能较差，容易导致内存溢出\n\tvar fs = require("fs");\n\t\n\t\n\t//流式文件写入\n\t//创建一个可写流\n\tfs.createWriteStream(path[, options])\n\t\t- 可以用来创建一个可写流\n\t\t- path，文件路径\n\t\t- options 配置的参数\n\t\n\tvar ws = fs.createWriteStream("hello3.txt");\n\n\n    //可以通过监听流的open和close事件来监听流的打开和关闭\n\ton(事件字符串,回调函数)\n\t\t- 可以为对象绑定一个事件\n\n\tonce(事件字符串,回调函数)\n\t\t- 可以为对象绑定一个一次性的事件，该事件将会在触发一次以后自动失效\n\n\n\tws.once("open",function () {\n\t\tconsole.log("流打开了~~~");\n\t});\n\t\n\tws.once("close",function () {\n\t\tconsole.log("流关闭了~~~");\n\t});\n\t\n\t//通过ws向文件中输出内容\n\tws.write("通过可写流写入文件的内容");\n\tws.write("this is a test");\n\t\n\t//关闭流\n\tws.end();\n\n\n\n5、简单文件读取\n\n\t fs.readFile(path[, options], callback)\n\t fs.readFileSync(path[, options])\n\t \t- path 要读取的文件的路径\n\t \t- options 读取的选项\n\t \t- callback回调函数，通过回调函数将读取到内容返回(err , data)\n\t \t\terr 错误对象\n\t \t\tdata 读取到的数据，会返回一个Buffer\n\n\n\tvar fs = require("fs");\n\t\n\tvar path = "C:/Users/zl/Desktop/笔记.mp3";\n\t\n\tfs.readFile("an.jpg" , function (err , data) {\n\t\tif(!err){\n\t\t\t//console.log(data);\n\t\t\t//将data写入到文件中\n\t\t\tfs.writeFile("C:/Users/zl/Desktop/hello.jpg",data,function(err){\n\t\t\t\tif(!err){\n\t\t\t\t\tconsole.log("文件写入成功");\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t});\n\n\n6、流式文件读取\n\n\t流式文件读取也适用于一些比较大的文件，可以分多次将文件读取到内存中\n    var fs = require("fs");\n\n\t//创建一个可读流\n\tvar rs = fs.createReadStream("C:/Users/zl/Desktop/xx.mp3");\n\t//创建一个可写流\n\tvar ws = fs.createWriteStream("a.mp3");\n\n\t//监听流的开启和关闭\n\trs.once("open",function () {\n\t\tconsole.log("可读流打开了~~");\n\t});\n\n\trs.once("close",function () {\n\t\tconsole.log("可读流关闭了~~");\n\t\t//数据读取完毕，关闭可写流\n\t\tws.end();\n\t});\n\n\tws.once("open",function () {\n\t\tconsole.log("可写流打开了~~");\n\t});\n\t\n\tws.once("close",function () {\n\t\tconsole.log("可写流关闭了~~");\n\t});\n\n\t//如果要读取一个可读流中的数据，必须要为可读流绑定一个data事件，data事件绑定完毕，它会自动开始读取数据\n\trs.on("data", function (data) {\n\t\t//console.log(data);\n\t\t//将读取到的数据写入到可写流中\n\t\tws.write(data);\n\t});\n\n\n\n\n\n    或者使用流式文件的方法pipe()\n\n\tvar fs = require("fs");\n\t//创建一个可读流\n\tvar rs = fs.createReadStream("C:/Users/zl/Desktop/09f0sxxx.mp3");\n\t//创建一个可写流\n\tvar ws = fs.createWriteStream("b.mp3");\n\t\n\t//pipe()可以将可读流中的内容，直接输出到可写流中\n\trs.pipe(ws);\n\n\n',normalizedContent:'# 知识储备\n\n1.命令行窗口\n\n   目录\n\t\t. 表示当前目录\n\t\t.. 表示上一级目录\n\t\n   常用的指令：\n\t\tdir 列出当前目录下的所有文件\n\t\tcd 目录名 进入到指定的目录\n\t\tmd 目录名 创建一个文件夹\n\t\trd 目录名 删除一个文件夹\t\n\t\n   环境变量（windows系统中变量）\t\n   path\n\t\tc:\\work\\jdk\\jdk1.7.0_75/bin;\n\t\t。。。。\n\t\tc:\\users\\zl\\desktop\\hello\n\t\t\n\t      当我们在命令行窗口打开一个文件，或调用一个程序时，\n\t系统会首先在当前目录下寻找文件程序，如果找到了则直接打开\n\t如果没有找到则会依次到环境变量path的路径中寻找，直到找到\n\t为止如果没找到则报错所以我们可以将一些经常需要访问的程序\n\t和文件的路径添加到path中，这样我们就可以在任意位置来访问\n\t这些文件和程序了\n\n\n2、i/o (input/output)，i/o操作指的是对磁盘的读写操作\n\n\n# node是什么\n\n1、node是一款对es标准实现的js引擎\n\n2、通过node可以使js在服务器中运行\n\n3、node就是一款使用js编写的web服务器\n\n4、node底层是使用c++的编写的\n\n5、node的中js引擎使用的chrome的v8引擎\n\n6、node的特点：\n\n * a.非阻塞、异步的i/o\n * b.事件和回调函数\n * c.单线程（主线程单线程，后台i/o线程池）\n * d.跨平台\n\n\n# 模块化\n\n1、es5中没有原生支持模块化，我们只能通过script标签引入js文件来实现模块化,es6内置了模块化，定义暴露模块 : export\n\n2、在node中为了对模块管理，引入了commonjs规范\n\n3、模块的引用\n\n\t\t使用 require()函数来引入一个模块\n\t    如：var 变量 = require("模块的标识");\n\n\n4、模块的标识\n\n       模块的标识就是模块的名字或路径，我们node通过模块的标识来寻找模块的\n\t   对于核心模块（npm中下载的模块），直接使用模块的名字\n\n\n5、模块的定义\n\n     在node中一个js文件就是一个模块， 默认情况下在js文件中编写的内容，都是运行在一个独立的函数中，外部的模块无法访问，但是我们可以导出变量和函数。\n   \n     导出变量和函数\n     1、使用 exports \n     例子：\n\t\t\texports.属性 = 属性值;\n\t\t\texports.方法 = 函数;\n\t\t\t\t\t\t\t\n     2、使用module.exports\n     例子：\n\t\t    module.exports.属性 = 属性值;\n\t\t\tmodule.exports.方法 = 函数;\n\t\t\tmodule.exports = {};\n\t\t\t\n     对其进行引入\n\t\t\tvar fs = require("xx");\n\t\t\tvar express = require("xx");\n\t\t\n\n\n\t\t\t\t\n     对于自定义的文件模块，需要通过文件的路径来对模块进行引入，路径可以是绝对路径，如果是相对路径必须以./或 ../开头\n\t    \tvar router = require("./router");\n]\n\t在node中，通过require()函数来引入外部的模块\n\t\trequire()可以传递一个文件的路径作为参数，node将会自动根据该路径来引入外部模块\n\t\t这里路径，如果使用相对路径，必须以.或..开头\n\n\t使用require()引入模块以后，该函数会返回一个对象，这个对象代表的是引入的模块\n\t我们使用require()引入外部模块时，使用的就是模块标识，我们可以通过模块标识来找到指定的模块\n    模块分成两大类\n\t\t核心模块\n\t\t\t- 由node引擎提供的模块\n\t\t\t- 核心模块的标识就是，模块的名字\n\t\t文件模块\n\t\t\t- 由用户自己创建的模块\n\t\t\t- 文件模块的标识就是文件的路径（绝对路径，相对路径）\n\t\t\t\t相对路径使用.或..开头\n\n\n\n\n\n\n\t在node中有一个全局对象 global，它的作用和网页中window类似\n\t\t在全局中创建的变量都会作为global的属性保存\n\t\t在全局中创建的函数都会作为global的方法保存\n\t\t\n\n\t当node在执行模块中的代码时，它会首先在代码的最顶部，添加如下代码\n \t\t\tfunction (exports, require, module, __filename, __dirname) {\n                   在代码的最底部，添加如下代码\n \t\t\t}\n\n \t实际上模块中的代码都是包装在一个函数中执行的，并且在函数执行时，同时传递进了5个实参\n\t\t exports\n\t\t \t- 该对象用来将变量或函数暴露到外部\n\t\t \t \n\t\t require\n\t\t \t- 函数，用来引入外部的模块\n\n\t\t module\n\t\t \t- module代表的是当前模块本身\n\t\t \t- exports就是module的属性\n\t\t \t- 既可以使用 exports 导出，也可以使用module.exports导出\n\t\t \t \n\t\t __filename\n \t\t\tc:\\users\\zl\\webstormprojects\\class0705\\01.node\\04.module.js\n \t\t\t- 当前模块的完整路径\n\n\t  \t __dirname\n \t\t\tc:\\users\\zl\\webstormprojects\\class0705\\01.node\n \t\t\t- 当前模块所在文件夹的完整路径\n\n\n\n   \texports 和 module.exports\n\t\t- 通过exports只能使用.的方式来向外暴露内部变量\n\t\t\texports.xxx = xxx\n\n\t\t- 而module.exports既可以通过.的形式，也可以直接赋值\n\t\t\tmodule.exports.xxx = xxxx\n\t\t\tmodule.exports = {}\n\n\n\n# npm的命令\n\n通过npm下载的包都放到node_modules文件夹中,我们通过npm下载的包，直接通过包名引入即可。node在使用模块名字来引入模块时，它会首先在当前目录的node_modules中寻找是否含有该模块 1、如果有则直接使用，如果没有则去上一级目录的node_modules中寻找 2、如果有则直接使用，如果没有则再去上一级目录寻找，直到找到为止 3、直到找到磁盘的根目录，如果依然没有，则报错\n\n\t npm -v 查看npm的版本\n\t npm version 查看所有模块的版本\n\t npm search 包名 搜索包\n\t npm install / i 包名 安装包\n\t npm remove / r 包名 删除包\n\t npm install 包名 --save 安装包并添加到依赖中\n\t npm install 下载当前项目所依赖的包\n\t npm install 包名 -g 全局安装包（全局安装的包一般都是一些工具）\n\n\n\n# 包（package）\n\n将多个模块组合为一个完整的功能，就是一个包\n包结构\n\tbin：\n\t\t 二进制的可执行文件，一般都是一些工具包中才有\n\tlib：\n\t\t js文件\n\tdoc：\n\t\t 文档\n\ttest：\n\t\t 测试代码\n\tpackage.json：\n\t\t 包的描述文件\n\t\t\n    package.json:\n\t    它是一个json格式的文件，在它里面保存了包各种相关的信息\n\t\t     name 包名\n\t\t     version 版本\n\t     \t dependencies 依赖\n\t    \t main 包的主要的文件\n\t\t     bin 可执行文件\n\n\n\n# 文件系统（file system）\n\n1、buffer（缓冲区） buffer和数组的结构的非常类似，buffer是用来存储二进制数据的\n\n buffer的方法：\n\t buffer.from(字符串):将一个字符串中内容保存到一个buffer中\n\t  \n     buf.tostring(): 将buffer转换为一个字符串\n     \n     buffer.alloc(size)：创建一个指定大小的buffer对象\n     \n     buffer.allocunsafe(size)：创建一个指定大小的buffer对象，可以包含敏感数据（未将创建的内存区域的清空）\n\n\n更多内容：node官网 方法\n\n2、fs模块 在node通过fs模块来对系统中的文件进行操作，fs模块是node中已经继承好了，不需要在使用npm下载，直接引入即可\n\n1、引入fs\n\t  var fs = require("fs");\n\t\t\t\n2、fs模块中的大部分操作都提供了两种方法，同步方法和异步方法\n       同步方法带sync\n\t   异步方法没有sync，都需要回调函数\n\n\t\t\n3、方法（ 带sync的都是同行的方法，有callback回调函数的都是异步方法）\n   打开文件\n      fs.open(path, flags[, mode], callback)\n      fs.opensync(path, flags[, mode])\n   关闭文件\n      fs.close(fd, callback)\n      fs.closesync(fd)\n\n\n   写入文件\n   \n\t    1.同步写入\n\t       fs.writesync(fd, buffer, offset, length[, position])\n           fs.writesync(fd, data[, position[, encoding]])\n           要完成同步写入文件，先需要通过opensync()打开文件来获取一个文件描述符，然后在通过writesync()写入文件。\n           参数： – fd 文件描述符，通过opensync()获取\n                 – data 要写入的数据（string 或 buffer）\n                 – offset buffer写入的偏移量\n                 – length 写入的长度\n                 – position 写入的起始位置\n                 – encoding 写入编码\n                 \n\t\t2.异步写入\n          fs.write(fd, buffer, offset, length[, position], callback)\n          fs.write(fd, data[, position[, encoding]], callback)\n          要使用异步写入文件，先需要通过open()打开文件，然后在回调函数中通过write()写入。\n          参数： – fd 文件描述符\n\t\t\t\t– data 要写入的数据（string 或 buffer）\n\t\t\t\t– offset buffer写入的偏移量\n\t\t\t\t– length 写入的长度\n\t\t\t\t– position 写入的起始位置\n\t\t\t\t– encoding 写入编码\n\t\t\t\t\t\n\t\t3.简单写入\n\t\t\tfs.writefile(file, data[, options], callback)\n\t\t    fs.writefilesync(file, data[, options])\n\t\t    参数：  – file 文件路径\n\t               – data 被写入的内容，可以是string或buffer\n\t               – options 对象，包含属性（encoding、mode、flag）\n\t               – callback 回调\n\t\t               \n\t\t4.流式写入\n\t\t往一个文件中写入大量数据时，最好的方法之一是使用流。\n        若要将数据异步传送到文件，首需要使用以下语法创建一个writable对象：\n        fs.createwritestream(path[, options])\n              -path 文件路径\n              -options {encoding:"",mode:"",flag:""}\n        一旦你打开了writable文件流，就可以使用\n        write()方法来写入它，写入完成后，再调用end()方法来关闭流\n\n\n\n 读取文件\n\t\t1.同步读取\n\t\t   fs.readsync(fd, buffer, offset, length, position)\n           参数：\n\t\t\t\t-fd 文件描述符\n\t\t\t\t-buffer 读取文件的缓冲区\n\t\t\t\t-offset buffer的开始写入的位置\n\t\t\t\t-length 要读取的字节数\n\t\t\t\t-position 开始读取文件的位置\n\t\t\t\t\n\t\t\t\n\t\t2.异步读取\n\t\t   fs.read(fd, buffer, offset, length, position, callback)\n\t       参数：\n\t\t\t\t-fd 文件描述符\n\t\t\t\t-buffer 读取文件的缓冲区\n\t\t\t\t-offset buffer的开始写入的位置\n\t\t\t\t-length 要读取的字节数\n\t\t\t\t-position 开始读取文件的位置\n\t\t\t\t-callback 回调函数 参数err , bytesread , buffer\n\n\n\t\t3.简单读取\n           fs.readfile(file[, options], callback)\n           fs.readfilesync(file[, options])\n\t\t   参数:    -file 文件路径或文件描述符\n\t\t           -options <object> | <string>\n\t\t           -encoding <string> | <null> 默认 = null\n\t\t           -flag <string> 默认 = \'r\'\n\t\t           -callback 回调函数，有两个参数err 、data\n\n\n\t\t4.流式读取\n           从一个文件中读取大量的数据时，最好的方法之一就是流式读取，这样将把一个文件作为readable流的形式打开。要从异步从文件传输数据，首先需要通过以下语法创建一个readable流对象：\n           fs.createreadstream(path[, options])\n           -path 文件路径\n           -options {encoding:"",mode:"",flag:""}\n           \n           当你打开readable文件流以后，可以通过readable事件和read()请求，或通过data事件处理程序轻松地从它读出。\n\n\n其他方法：\n        验证路径是否存在\n        – fs.existssync(path)\n        \n        获取文件信息\n\t\t– fs.stat(path, callback)\n\t\t– fs.statsync(path)\n\t\t\n\t\t删除文件\n\t\t– fs.unlink(path, callback)\n\t\t– fs.unlinksync(path)\n\t\t\n\t\t列出文件\n\t\t– fs.readdir(path[, options], callback)\n\t\t– fs.readdirsync(path[, options])\n\t\t\n\t\t截断文件\n\t\t– fs.truncate(path, len, callback)\n\t\t– fs.truncatesync(path, len)\n\t\t\n\t\t建立目录\n\t\t– fs.mkdir(path[, mode], callback)\n\t\t– fs.mkdirsync(path[, mode])\n\t\t\n\t\t删除目录\n\t\t– fs.rmdir(path, callback)\n\t\t– fs.rmdirsync(path)\n\t\t\n\t\t重命名文件和目录\n\t\t– fs.rename(oldpath, newpath, callback)\n\t\t– fs.renamesync(oldpath, newpath)\n\t\t\n\t\t监视文件更改写入\n\t\t– fs.watchfile(filename[, options], listener)\n\t\t\t\t\t\n\n\n\n\n更多官方方法：node官网 方法\n\n代码：\n\n1、buffer(缓冲区)\n\n\t- buffer的结构和数组很像，操作的方法也和数组类似\n\t- 数组中不能存储二进制的文件，而buffer就是专门用来存储二进制数据\n\t- 使用buffer不需要引入模块，直接使用即可\n\t- 在buffer中存储的都是二进制数据，但是在显示时都是以16进制的形式显示\n\tbuffer中每一个元素的范围是从00 - ff   0 - 255\n\t00000000 - 11111111\n\n\t计算机 一个0 或一个1 我们称为1位（bit）\n\n\t8bit = 1byte（字节）\n\t1024byte = 1kb\n\t1024kb = 1mb\n\t1024mb = 1gb\n\t1024gb = 1tb\n\n\tbuffer中的一个元素，占用内存的一个字节\n   \tbuffer的大小一旦确定，则不能修改，buffer实际上是对底层内存的直接操作\n\n\tvar str = "hello 尚硅谷";\n\t\n\t//将一个字符串保存到buffer中\n\tvar buf = buffer.from(str);\n\t\n\t//console.log(buf.length); //占用内存的大小\n\t//console.log(str.length);//字符串的长度\n\t//console.log(buf);\n\t\n\t//创建一个指定大小的buffer\n\t//buffer构造函数都是不推荐使用的\n\t//var buf2 = new buffer(10);//10个字节的buffer\n\t//console.log(buf2.length);\n\n\t//创建一个10个字节的buffer\n\tvar buf2 = buffer.alloc(10);\n\t//通过索引，来操作buf中的元素\n\tbuf2[0] = 88;\n\tbuf2[1] = 255;\n\tbuf2[2] = 0xaa;\n\tbuf2[3] = 255;\n\n    只要数字在控制台或页面中输出一定是10进制\n    console.log(buf2[2].tostring(16));\n\n\tfor(var i=0 ; i<buf2.length ; i++){\n\t\tconsole.log(buf2[i]);\n\t}\n\n\tbuffer.allocunsafe(size) 创建一个指定大小的buffer，但是buffer中可能含有敏感数据\n\tvar buf3 = buffer.allocunsafe(10);\n\tconsole.log(buf3);\n\n\tbuffer.from(str) 将一个字符串转换为buffer\n\tbuffer.alloc(size) 创建一个指定大小的buffer\n\tbuffer.allounsafe(size) 创建一个指定大小的buffer，但是可能包含敏感数据\n \tbuf.tostring() 将缓冲区中的数据转换为字符串\n\n   var buf4 = buffer.from("我是一段文本数据");\n\n   console.log(buf4.tostring());\n\n\n2、简单文件写入\n\n\n\t fs.writefile(file, data[, options], callback)\n\t fs.writefilesync(file, data[, options])\n\t\t- file 要操作的文件的路径\n\t\t- data 要写入的数据\n\t\t- options 选项，可以对写入进行一些设置\n\t\t- callback 当写入完成以后执行的函数\n\t\n\t\t- flag\n\t\t\tr 只读\n\t\t\tw 可写\n\t\t\ta 追加\n\n\t//引入fs模块\n\tvar fs = require("fs");\n\t\n\tfs.writefile("hello3.txt","这是通过writefile写入的内容",{flag:"r+"} , function (err) {\n\t\tif(!err){\n\t\t\tconsole.log("写入成功~~~");\n\t\t}else{\n\t\t\tconsole.log(err);\n\t\t}\n\t});\n\t\n\tfs.writefile("c:/users/zl/desktop/hello.txt","这是通过writefile写入的内容",{flag:"w"} , function (err) {\n\t\tif(!err){\n\t\t\tconsole.log("写入成功~~~");\n\t\t}else{\n\t\t\tconsole.log(err);\n\t\t}\n\t});\n\n\n3、异步文件写入\n\n\tfs.open(path, flags[, mode], callback)\n\t\t- 用来打开一个文件\n\t   - 异步调用的方法，结果都是通过回调函数的参数返回的\n\t\t- 回调函数两个参数：\n\t\t\terr 错误对象，如果没有错误则为null\n\t\t\tfd  文件的描述符\n\tfs.write(fd, string[, position[, encoding]], callback)\n\t\t- 用来异步写入一个文件\n\t\n\tfs.close(fd, callback)\n\t\t- 用来关闭文件\n\n\n\t//引入fs模块\n\tvar fs = require("fs");\n\t\n\t//打开文件\n\tfs.open("hello2.txt","w",function (err , fd) {\n\t\n\t//判断是否出错\n\tif(!err){\n\t\t//如果没有出错，则对文件进行写入操作\n\t\tfs.write(fd,"这是异步写入的内容",function (err) {\n\t\t\tif(!err){\n\t\t\t\tconsole.log("写入成功~~");\n\t\t\t}\n\t\t\t//关闭文件\n\t\t\tfs.close(fd , function (err) {\n\t\t\t\tif(!err){\n\t\t\t\t\tconsole.log("文件已关闭~~~");\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}else{\n\t\tconsole.log(err);\n\t}\n\t});\n\t\n\tconsole.log("程序向下执行~~~");\n\n\n\n4、流式文件写入\n\n\t同步、异步、简单文件的写入都不适合大文件的写入，性能较差，容易导致内存溢出\n\tvar fs = require("fs");\n\t\n\t\n\t//流式文件写入\n\t//创建一个可写流\n\tfs.createwritestream(path[, options])\n\t\t- 可以用来创建一个可写流\n\t\t- path，文件路径\n\t\t- options 配置的参数\n\t\n\tvar ws = fs.createwritestream("hello3.txt");\n\n\n    //可以通过监听流的open和close事件来监听流的打开和关闭\n\ton(事件字符串,回调函数)\n\t\t- 可以为对象绑定一个事件\n\n\tonce(事件字符串,回调函数)\n\t\t- 可以为对象绑定一个一次性的事件，该事件将会在触发一次以后自动失效\n\n\n\tws.once("open",function () {\n\t\tconsole.log("流打开了~~~");\n\t});\n\t\n\tws.once("close",function () {\n\t\tconsole.log("流关闭了~~~");\n\t});\n\t\n\t//通过ws向文件中输出内容\n\tws.write("通过可写流写入文件的内容");\n\tws.write("this is a test");\n\t\n\t//关闭流\n\tws.end();\n\n\n\n5、简单文件读取\n\n\t fs.readfile(path[, options], callback)\n\t fs.readfilesync(path[, options])\n\t \t- path 要读取的文件的路径\n\t \t- options 读取的选项\n\t \t- callback回调函数，通过回调函数将读取到内容返回(err , data)\n\t \t\terr 错误对象\n\t \t\tdata 读取到的数据，会返回一个buffer\n\n\n\tvar fs = require("fs");\n\t\n\tvar path = "c:/users/zl/desktop/笔记.mp3";\n\t\n\tfs.readfile("an.jpg" , function (err , data) {\n\t\tif(!err){\n\t\t\t//console.log(data);\n\t\t\t//将data写入到文件中\n\t\t\tfs.writefile("c:/users/zl/desktop/hello.jpg",data,function(err){\n\t\t\t\tif(!err){\n\t\t\t\t\tconsole.log("文件写入成功");\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\t});\n\n\n6、流式文件读取\n\n\t流式文件读取也适用于一些比较大的文件，可以分多次将文件读取到内存中\n    var fs = require("fs");\n\n\t//创建一个可读流\n\tvar rs = fs.createreadstream("c:/users/zl/desktop/xx.mp3");\n\t//创建一个可写流\n\tvar ws = fs.createwritestream("a.mp3");\n\n\t//监听流的开启和关闭\n\trs.once("open",function () {\n\t\tconsole.log("可读流打开了~~");\n\t});\n\n\trs.once("close",function () {\n\t\tconsole.log("可读流关闭了~~");\n\t\t//数据读取完毕，关闭可写流\n\t\tws.end();\n\t});\n\n\tws.once("open",function () {\n\t\tconsole.log("可写流打开了~~");\n\t});\n\t\n\tws.once("close",function () {\n\t\tconsole.log("可写流关闭了~~");\n\t});\n\n\t//如果要读取一个可读流中的数据，必须要为可读流绑定一个data事件，data事件绑定完毕，它会自动开始读取数据\n\trs.on("data", function (data) {\n\t\t//console.log(data);\n\t\t//将读取到的数据写入到可写流中\n\t\tws.write(data);\n\t});\n\n\n\n\n\n    或者使用流式文件的方法pipe()\n\n\tvar fs = require("fs");\n\t//创建一个可读流\n\tvar rs = fs.createreadstream("c:/users/zl/desktop/09f0sxxx.mp3");\n\t//创建一个可写流\n\tvar ws = fs.createwritestream("b.mp3");\n\t\n\t//pipe()可以将可读流中的内容，直接输出到可写流中\n\trs.pipe(ws);\n\n\n',charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675751906e3},{title:"node搭建服务器",frontmatter:{title:"node搭建服务器",permalink:"/pages/0a1991/",categories:["前端","技术文章"],tags:["node"],date:"2020-07-05T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/12.node%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8.html",relativePath:"01.前端/01.学过的习/12.node搭建服务器.md",key:"v-32c23b1d",path:"/pages/0a1991/",headers:[{level:2,title:"我们可以用node创建原生的服务器。不用依赖express框架，主要有以下几个步骤",slug:"我们可以用node创建原生的服务器。不用依赖express框架-主要有以下几个步骤",normalizedTitle:"我们可以用node创建原生的服务器。不用依赖express框架，主要有以下几个步骤",charIndex:2},{level:2,title:"Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助快速创建各种 Web",slug:"express-是一个基于-node-js-平台的极简、灵活的-web-应用开发框架-它提供一系列强大的特性-帮助快速创建各种-web",normalizedTitle:"express 是一个基于 node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助快速创建各种 web",charIndex:1166}],headersStr:"我们可以用node创建原生的服务器。不用依赖express框架，主要有以下几个步骤 Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助快速创建各种 Web",content:"# 我们可以用node创建原生的服务器。不用依赖express框架，主要有以下几个步骤\n\n# 1、引入http模块\n\n//http模块是Node中的核心模块，无需下载\nlet http = require('http');\n\n\n# 2、创建一个服务对象\n\n let server = http.createServer((request,response)=>{\n     response.end('hello，node');\n  }）  \n   //request请求对象 ------- 客户端发过的数据，都在request里面\n   //response响应对象 ------- 将要交给客户端的数据，都在response这里面\n\n\n# 3、绑定监听\n\n    server.listen(3000,(err)=>{\n        if(!err){\n            console.log('服务器启动成功了');\n        }else{\n            console.log(err);\n        }\n    })\n\n\n# 完整代码：\n\n  \n   let http = require('http');\n   let querystring = require('querystring');  //require身上有一个属性queryString(查询字符串)\n\n\n   let server = http.createServer((request,response)=>{\n       \n        let param = request.url.split('?')[1]; //截取问号之后的字符串\n        let paramObj = querystring.parse(param)\n       \n        response.setHeader('content-type','text/html;charset=utf-8'); //设置响应头\n        response.end('hello，node');\n        \n    });\n    \n    \n    server.listen(3000,(err)=>{\n        if(!err){\n            console.log('服务器启动成功');\n        }else{\n            console.log(err);\n        }\n    })\n\n\n\n# 总结：node原生的服务器对post请求不太友好，并且需要手动的解析get请求，使用起来非常的不方便，所以现在经常使用express框架来搭建node的服务端\n\n\n# Express 是一个基于 Node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助快速创建各种 Web\n\n# 1、引入express模块(库)\n\nlet express = require('express');\n\n\n# 2、创建app应用对象\n\nlet app = express();\n\n\n# 3、设置路由（对请求的网址进行分类处理）\n\n * get 请求路由设置\n\n设置GET请求:\n   ·request对象上的方法：\n      request.query\t获取get请求查询字符串的参数，拿到的是一个对象\n      request.params \t获取get请求参数路由的参数，拿到的是一个对象\n      request.body\t获取post请求体，拿到的是一个对象\n      request.get(xxxx)\t获取请求头中指定key对应的value\n\n  · response对象上的方法：\n      response.send()\t给浏览器做出一个响应\n      response.end()\t给浏览器做出一个响应（不会自动追加响应头）\n      response.download()\t告诉浏览器下载一个文件(相对路径)\n      response.sendFile()\t给浏览器发送一个文件（绝对路径）\n      response.redirect()\t重定向到一个新的地址（url）\n      response.set(header,value)\t自定义响应头内容\n      response.get()\t获取响应头指定key对应的value\n      res.status(code)\t设置响应状态码\n-----------------------------------------------------------------------------------------------\n\n\tapp.get('/',(request,response)=>{\n\t\n\t      request.query      //获取GET请求的查询字符串参\n\t      response.send('this is get');   //用户通过浏览器输入网址请求页面的方式是GET请求\n\t      \n\t});\n\t\n\t\n\tapp.get('/test',(request,response)=>{\n\t\n        console.log(request.query);\n        response.send('this is back of get');\n        \n    });\n\n    \n\n\n * post请求路由设置\n\n  由于post请求的请求体无法直接的获取参数，所以我们需要在引入app之后，配置中间件：\n  app.use(express.urlencoded({extended:true}))\n  就能够通过request.body来获取\n  \n  app.post('/demo/test',(request,response)=>{\n    console.log(request.body)\n    response.send('服务器给浏览器回应了');\n  });\n\n\n\n# 4、绑定监听\n\n\tapp.listen(3000,(err)=>{\n\t  if(!err){\n\t    console.log(‘服务器连接成功’);\n  \t  }else{\n\t    console.log(err);\n\t  }\n\t});\n",normalizedContent:"# 我们可以用node创建原生的服务器。不用依赖express框架，主要有以下几个步骤\n\n# 1、引入http模块\n\n//http模块是node中的核心模块，无需下载\nlet http = require('http');\n\n\n# 2、创建一个服务对象\n\n let server = http.createserver((request,response)=>{\n     response.end('hello，node');\n  }）  \n   //request请求对象 ------- 客户端发过的数据，都在request里面\n   //response响应对象 ------- 将要交给客户端的数据，都在response这里面\n\n\n# 3、绑定监听\n\n    server.listen(3000,(err)=>{\n        if(!err){\n            console.log('服务器启动成功了');\n        }else{\n            console.log(err);\n        }\n    })\n\n\n# 完整代码：\n\n  \n   let http = require('http');\n   let querystring = require('querystring');  //require身上有一个属性querystring(查询字符串)\n\n\n   let server = http.createserver((request,response)=>{\n       \n        let param = request.url.split('?')[1]; //截取问号之后的字符串\n        let paramobj = querystring.parse(param)\n       \n        response.setheader('content-type','text/html;charset=utf-8'); //设置响应头\n        response.end('hello，node');\n        \n    });\n    \n    \n    server.listen(3000,(err)=>{\n        if(!err){\n            console.log('服务器启动成功');\n        }else{\n            console.log(err);\n        }\n    })\n\n\n\n# 总结：node原生的服务器对post请求不太友好，并且需要手动的解析get请求，使用起来非常的不方便，所以现在经常使用express框架来搭建node的服务端\n\n\n# express 是一个基于 node.js 平台的极简、灵活的 web 应用开发框架，它提供一系列强大的特性，帮助快速创建各种 web\n\n# 1、引入express模块(库)\n\nlet express = require('express');\n\n\n# 2、创建app应用对象\n\nlet app = express();\n\n\n# 3、设置路由（对请求的网址进行分类处理）\n\n * get 请求路由设置\n\n设置get请求:\n   ·request对象上的方法：\n      request.query\t获取get请求查询字符串的参数，拿到的是一个对象\n      request.params \t获取get请求参数路由的参数，拿到的是一个对象\n      request.body\t获取post请求体，拿到的是一个对象\n      request.get(xxxx)\t获取请求头中指定key对应的value\n\n  · response对象上的方法：\n      response.send()\t给浏览器做出一个响应\n      response.end()\t给浏览器做出一个响应（不会自动追加响应头）\n      response.download()\t告诉浏览器下载一个文件(相对路径)\n      response.sendfile()\t给浏览器发送一个文件（绝对路径）\n      response.redirect()\t重定向到一个新的地址（url）\n      response.set(header,value)\t自定义响应头内容\n      response.get()\t获取响应头指定key对应的value\n      res.status(code)\t设置响应状态码\n-----------------------------------------------------------------------------------------------\n\n\tapp.get('/',(request,response)=>{\n\t\n\t      request.query      //获取get请求的查询字符串参\n\t      response.send('this is get');   //用户通过浏览器输入网址请求页面的方式是get请求\n\t      \n\t});\n\t\n\t\n\tapp.get('/test',(request,response)=>{\n\t\n        console.log(request.query);\n        response.send('this is back of get');\n        \n    });\n\n    \n\n\n * post请求路由设置\n\n  由于post请求的请求体无法直接的获取参数，所以我们需要在引入app之后，配置中间件：\n  app.use(express.urlencoded({extended:true}))\n  就能够通过request.body来获取\n  \n  app.post('/demo/test',(request,response)=>{\n    console.log(request.body)\n    response.send('服务器给浏览器回应了');\n  });\n\n\n\n# 4、绑定监听\n\n\tapp.listen(3000,(err)=>{\n\t  if(!err){\n\t    console.log(‘服务器连接成功’);\n  \t  }else{\n\t    console.log(err);\n\t  }\n\t});\n",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675751906e3},{title:"webPack学习",frontmatter:{title:"webPack学习",permalink:"/pages/fc31e6/",categories:["前端","技术文章"],tags:["webPack"],date:"2020-08-14T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/13.webPack%E5%AD%A6%E4%B9%A0.html",relativePath:"01.前端/01.学过的习/13.webPack学习.md",key:"v-5641805b",path:"/pages/fc31e6/",headers:[{level:2,title:"一、概念",slug:"一、概念",normalizedTitle:"一、概念",charIndex:2},{level:2,title:"二、webpack的基本使用",slug:"二、webpack的基本使用",normalizedTitle:"二、webpack的基本使用",charIndex:875},{level:2,title:"三、使用webpack配置文件",slug:"三、使用webpack配置文件",normalizedTitle:"三、使用webpack配置文件",charIndex:1214},{level:2,title:"四、使用loader解析文件",slug:"四、使用loader解析文件",normalizedTitle:"四、使用loader解析文件",charIndex:1674},{level:2,title:"五、使用插件",slug:"五、使用插件",normalizedTitle:"五、使用插件",charIndex:3973},{level:2,title:"六、build环境的搭建",slug:"六、build环境的搭建",normalizedTitle:"六、build环境的搭建",charIndex:5109}],headersStr:"一、概念 二、webpack的基本使用 三、使用webpack配置文件 四、使用loader解析文件 五、使用插件 六、build环境的搭建",content:"# 一、概念\n\nWebpack是一个模块打包器(bundler)。 在Webpack看来, 前端的所有资源文件(js/json/css/img/less/...)都会作为模块处理，它将根据模块的依赖关系进行静态分析，生成对应的静态资源 四个核心概念：\n\n * Entry：入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。\n * Output：output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist。\n * Loader：loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只能解析： JavaScript、json）。\n * Plugins：插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等。\n\n关于Loader：\n\n * Webpack 本身只能加载JS/JSON模块，如果要加载其他类型的文件(模块)，就需要使用对应的loader 进行转换/加载\n * Loader 本身也是运行在 node.js 环境中的 JavaScript 模块\n * 它本身是一个函数，接受源文件作为参数，返回转换的结果\n * loader 一般以 xxx-loader 的方式命名，xxx 代表了这个 loader 要做的转换功能，比如 json-loader。\n\n关于Plugins：\n\n * 插件件可以完成一些loader不能完成的功能。\n * 插件的使用一般是在 webpack 的配置信息 plugins 选项中指定。\n * CleanWebpackPlugin: 自动清除指定文件夹资源\n * HtmlWebpackPlugin: 自动生成HTML文件\n * UglifyJSPlugin: 压缩js文件\n\nwebpack.config.js : 是一个node模块，返回一个 json 格式的配置信息对象\n\n官方文档\n\n\n\n\n\n\n\n# 二、webpack的基本使用\n\n1、 生成package.json文件\n\nnpm init //初始化（在对应的文件中）\n\n\n2、安装webpack（都要安装）：\n\n npm install webpack  -g  //全局安装\n npm install webpack  --save-dev  //局部安装\n\n\n3、执行命令：\n\nwebpack src/js/index.js build/index.js //webpack会把es6的模块化语法编译成浏览器能够识别的语言。\n\n\n4、package配置：\n\n  \"scripts\": {\n         \"build\": \"webpack\"\n   },\n\n\n打包应用运行:npm run build\n\n\n\n\n\n\n\n# 三、使用webpack配置文件\n\nwebpack的核心配置文件：执行webpack命令时，会在当前目录查找webpack.config.js文件读取配置\n\n * entry：入口文件，将所有打包资源全部引入\n * output：输出文件，将资源输出到指定目录下\n * loader：处理webpack不能够解析的模块\n * plugins：执行loader做不了的任务\n\nconst path = require('path'); //path内置的模块，用来设置路径。\n\nmodule.exports = {\n\n   entry:'./src/js/index.js', //入口（从哪里进入开始解析）\n\n   output: { //出口（最终加工完的代码输出到哪里）\n   \n         path: path.resolve(__dirname, 'build'),//输出文件路径配置\n         filename: 'index.js',// 输出文件名\n   \n  }\n};\n\n\n\n\n\n\n\n\n# 四、使用loader解析文件\n\n\n使用less-loader处理less文件：\n\n * 安装：npm install less-loader less --save-D\n * 安装：npm install css-loader style-loader --save-D\n * 向rules中写入配置：\n\n{\n       test: /\\.less$/,\n       use: [{\n           loader: \"style-loader\" // 创建一个style标签，将js中的css放入其中\n       }, {\n           loader: \"css-loader\" // 将css以CommonJs语法打包到js中\n       }, {\n           loader: \"less-loader\" // 将less转换成css\n       }]\n }\n\n\n在入口js中引入less文件：import '../less/test.less';(为了让打包时使用此文件)\n\n\n\n使用file-loader处理图片资源：\n\n * 安装：npm install --save-dev file-loader\n * loader：\n\n{\n      test: /\\.(png|jpg|gif)$/,\n      use: [\n        {\n          loader: 'file-loader', //如果不做图片转base64，可以用file-loader\n          options: {\n            outputPath:'img', //图片最终输出的位置\n            publicPath:'../build/img',//css资源图片路径\n    \t\tname:'[hash:5].[ext]'//修改图片名称\n          }\n        }\n      ]\n }\t\n\n\n\n\n使用url-loader处理图片资源\n\n * 安装：npm install url-loader --save-D\n * loader：\n\n {\n       test: /\\.(png|jpg|gif)$/,\n       use: [\n         {\n           loader: 'url-loader',       //如果不做图片转base64，可以用file-loader\n           options: {\n             limit: 8192, //设置文件的最大的大小，大于8KB不转换，小于8KB转成base64             \n             outputPath:'img',         //图片最终输出的位置\n             publicPath:'../build/img',//css资源图片路径\n             name:'[hash:5].[ext]'     //修改图片名称\n           }\n         }\n       ]\n  }\n\n\n\n\njs语法检查\n\n * 安装jshint-loader：\n\nnpm i jshint-loader --save -D\nnpm i jshint --save -D\n\n\n * 新增loader：\n\n{\n      test: /\\.js$/, // 涵盖 .js 文件\n      enforce: \"pre\", // 预先加载好 jshint loader\n      exclude: /node_modules/, // 排除掉 node_modules 文件夹下的所有文件\n      use: [\n        {\n          loader: \"jshint-loader\",\n          options: {\n            //jslint 的错误信息在默认情况下会显示为 warning（警告）类信息\n            //将 emitErrors 参数设置为 true 可使错误显示为 error（错误）类信息\n            emitErrors: false,\n\n            //jshint 默认情况下不会打断webpack编译\n            //如果你想在 jshint 出现错误时，立刻停止编译\n            //请设置 failOnHint 参数为true\n            failOnHint: false\n          }\n        }\n      ]\n  }\n\n\n\n\nes6转es5\n\n * 安装babel-loader：\n\nnpm install babel-loader babel-core babel-preset-es2015 --save -D\nnpm i babel-loader@7 --save -D\n\n\n * loader：\n\n{\n    test: /\\.js$/,\n    exclude: /(node_modules|bower_components)/,\n    use: {\n      loader: 'babel-loader',\n      options: {\n        presets: ['es2015']\n      }\n    }\n}\n\n\n\n\n\n\n\n\n# 五、使用插件\n\n\n提取css,合并为单独的文件\n\n * 安装ExtractTextWebpackPlugin插件：\n\nnpm install extract-text-webpack-plugin --save-D\n\n\n * 引入插件：\n\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\n\n * 新增plugins插件配置项，并实例化ExtractTextPlugin插件：\n\nplugins: [\n \t\t//提取css为单独文件\n \t\tnew ExtractTextPlugin(\"./css/index.css\"),\n]\n\n\n * 修改原less-loader的配置如下：\n\n{\n     test: /\\.less$/, //匹配文件的规则，说明该loader对哪个文件生效\n     use: ExtractTextPlugin.extract({\n       fallback: \"style-loader\",\n       use: [\"css-loader\",\"less-loader\"]\n     })\n }\n\n\n注：因为css提取成单独文件，不再包含在js中了，所以要修改url-loader配置publicPath:'../build/img'\n\nhtml文件的处理和清除文件夹（插件HtmlWebpackPlugin）\n\n * 安装：\n\nnpm install --save-dev html-webpack-plugin\n\n\n * 引入插件：\n\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n\n\n * 新增一个插件配置项：\n\nnew HtmlWebpackPlugin({\n      title:\"webpack\",\n      filename:\"index.html\",\n      template:\"./src/index.html\"\n     })\n     \n备注：要在html模板中写入<title><%= htmlWebpackPlugin.options.title %></title>，title配置才生效\n\n\n * 删除掉模板html中的所有引入\n * 为了清空工作目录，安装插件(clean-webpack-plugin)：\n\nnpm i clean-webpack-plugin -D\n\n\n * 引入插件：\n\nnew CleanWebpackPlugin('./build')\n\n备注：最新版的CleanWebpackPlugin不传任何参数\n\n\n\n\n\n\n\n\n# 六、build环境的搭建\n\n * 新建文件目录：config\n * 移动webpack.config.js文件到config中，改名为：webpack.build.js\n * 通过执行：webpack --display-modules --config ./config/webpack.build.js 指定配置文件运行\n * 在package.json中自定义命令，以后可以通过：npm run build 代替完整命令\n\n       \"build\": \"webpack --display-modules --config ./config/webpack.build.js\"\n\n\n注：如果发现build文件夹出现在了config中，解决办法如下：\n\n修改出口output中的path为：\n            resolve(__dirname, '../build')\n\n\n\n\n\n",normalizedContent:"# 一、概念\n\nwebpack是一个模块打包器(bundler)。 在webpack看来, 前端的所有资源文件(js/json/css/img/less/...)都会作为模块处理，它将根据模块的依赖关系进行静态分析，生成对应的静态资源 四个核心概念：\n\n * entry：入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。\n * output：output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist。\n * loader：loader 让 webpack 能够去处理那些非 javascript 文件（webpack 自身只能解析： javascript、json）。\n * plugins：插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等。\n\n关于loader：\n\n * webpack 本身只能加载js/json模块，如果要加载其他类型的文件(模块)，就需要使用对应的loader 进行转换/加载\n * loader 本身也是运行在 node.js 环境中的 javascript 模块\n * 它本身是一个函数，接受源文件作为参数，返回转换的结果\n * loader 一般以 xxx-loader 的方式命名，xxx 代表了这个 loader 要做的转换功能，比如 json-loader。\n\n关于plugins：\n\n * 插件件可以完成一些loader不能完成的功能。\n * 插件的使用一般是在 webpack 的配置信息 plugins 选项中指定。\n * cleanwebpackplugin: 自动清除指定文件夹资源\n * htmlwebpackplugin: 自动生成html文件\n * uglifyjsplugin: 压缩js文件\n\nwebpack.config.js : 是一个node模块，返回一个 json 格式的配置信息对象\n\n官方文档\n\n\n\n\n\n\n\n# 二、webpack的基本使用\n\n1、 生成package.json文件\n\nnpm init //初始化（在对应的文件中）\n\n\n2、安装webpack（都要安装）：\n\n npm install webpack  -g  //全局安装\n npm install webpack  --save-dev  //局部安装\n\n\n3、执行命令：\n\nwebpack src/js/index.js build/index.js //webpack会把es6的模块化语法编译成浏览器能够识别的语言。\n\n\n4、package配置：\n\n  \"scripts\": {\n         \"build\": \"webpack\"\n   },\n\n\n打包应用运行:npm run build\n\n\n\n\n\n\n\n# 三、使用webpack配置文件\n\nwebpack的核心配置文件：执行webpack命令时，会在当前目录查找webpack.config.js文件读取配置\n\n * entry：入口文件，将所有打包资源全部引入\n * output：输出文件，将资源输出到指定目录下\n * loader：处理webpack不能够解析的模块\n * plugins：执行loader做不了的任务\n\nconst path = require('path'); //path内置的模块，用来设置路径。\n\nmodule.exports = {\n\n   entry:'./src/js/index.js', //入口（从哪里进入开始解析）\n\n   output: { //出口（最终加工完的代码输出到哪里）\n   \n         path: path.resolve(__dirname, 'build'),//输出文件路径配置\n         filename: 'index.js',// 输出文件名\n   \n  }\n};\n\n\n\n\n\n\n\n\n# 四、使用loader解析文件\n\n\n使用less-loader处理less文件：\n\n * 安装：npm install less-loader less --save-d\n * 安装：npm install css-loader style-loader --save-d\n * 向rules中写入配置：\n\n{\n       test: /\\.less$/,\n       use: [{\n           loader: \"style-loader\" // 创建一个style标签，将js中的css放入其中\n       }, {\n           loader: \"css-loader\" // 将css以commonjs语法打包到js中\n       }, {\n           loader: \"less-loader\" // 将less转换成css\n       }]\n }\n\n\n在入口js中引入less文件：import '../less/test.less';(为了让打包时使用此文件)\n\n\n\n使用file-loader处理图片资源：\n\n * 安装：npm install --save-dev file-loader\n * loader：\n\n{\n      test: /\\.(png|jpg|gif)$/,\n      use: [\n        {\n          loader: 'file-loader', //如果不做图片转base64，可以用file-loader\n          options: {\n            outputpath:'img', //图片最终输出的位置\n            publicpath:'../build/img',//css资源图片路径\n    \t\tname:'[hash:5].[ext]'//修改图片名称\n          }\n        }\n      ]\n }\t\n\n\n\n\n使用url-loader处理图片资源\n\n * 安装：npm install url-loader --save-d\n * loader：\n\n {\n       test: /\\.(png|jpg|gif)$/,\n       use: [\n         {\n           loader: 'url-loader',       //如果不做图片转base64，可以用file-loader\n           options: {\n             limit: 8192, //设置文件的最大的大小，大于8kb不转换，小于8kb转成base64             \n             outputpath:'img',         //图片最终输出的位置\n             publicpath:'../build/img',//css资源图片路径\n             name:'[hash:5].[ext]'     //修改图片名称\n           }\n         }\n       ]\n  }\n\n\n\n\njs语法检查\n\n * 安装jshint-loader：\n\nnpm i jshint-loader --save -d\nnpm i jshint --save -d\n\n\n * 新增loader：\n\n{\n      test: /\\.js$/, // 涵盖 .js 文件\n      enforce: \"pre\", // 预先加载好 jshint loader\n      exclude: /node_modules/, // 排除掉 node_modules 文件夹下的所有文件\n      use: [\n        {\n          loader: \"jshint-loader\",\n          options: {\n            //jslint 的错误信息在默认情况下会显示为 warning（警告）类信息\n            //将 emiterrors 参数设置为 true 可使错误显示为 error（错误）类信息\n            emiterrors: false,\n\n            //jshint 默认情况下不会打断webpack编译\n            //如果你想在 jshint 出现错误时，立刻停止编译\n            //请设置 failonhint 参数为true\n            failonhint: false\n          }\n        }\n      ]\n  }\n\n\n\n\nes6转es5\n\n * 安装babel-loader：\n\nnpm install babel-loader babel-core babel-preset-es2015 --save -d\nnpm i babel-loader@7 --save -d\n\n\n * loader：\n\n{\n    test: /\\.js$/,\n    exclude: /(node_modules|bower_components)/,\n    use: {\n      loader: 'babel-loader',\n      options: {\n        presets: ['es2015']\n      }\n    }\n}\n\n\n\n\n\n\n\n\n# 五、使用插件\n\n\n提取css,合并为单独的文件\n\n * 安装extracttextwebpackplugin插件：\n\nnpm install extract-text-webpack-plugin --save-d\n\n\n * 引入插件：\n\nconst extracttextplugin = require(\"extract-text-webpack-plugin\");\n\n\n * 新增plugins插件配置项，并实例化extracttextplugin插件：\n\nplugins: [\n \t\t//提取css为单独文件\n \t\tnew extracttextplugin(\"./css/index.css\"),\n]\n\n\n * 修改原less-loader的配置如下：\n\n{\n     test: /\\.less$/, //匹配文件的规则，说明该loader对哪个文件生效\n     use: extracttextplugin.extract({\n       fallback: \"style-loader\",\n       use: [\"css-loader\",\"less-loader\"]\n     })\n }\n\n\n注：因为css提取成单独文件，不再包含在js中了，所以要修改url-loader配置publicpath:'../build/img'\n\nhtml文件的处理和清除文件夹（插件htmlwebpackplugin）\n\n * 安装：\n\nnpm install --save-dev html-webpack-plugin\n\n\n * 引入插件：\n\nvar htmlwebpackplugin = require('html-webpack-plugin');\n\n\n * 新增一个插件配置项：\n\nnew htmlwebpackplugin({\n      title:\"webpack\",\n      filename:\"index.html\",\n      template:\"./src/index.html\"\n     })\n     \n备注：要在html模板中写入<title><%= htmlwebpackplugin.options.title %></title>，title配置才生效\n\n\n * 删除掉模板html中的所有引入\n * 为了清空工作目录，安装插件(clean-webpack-plugin)：\n\nnpm i clean-webpack-plugin -d\n\n\n * 引入插件：\n\nnew cleanwebpackplugin('./build')\n\n备注：最新版的cleanwebpackplugin不传任何参数\n\n\n\n\n\n\n\n\n# 六、build环境的搭建\n\n * 新建文件目录：config\n * 移动webpack.config.js文件到config中，改名为：webpack.build.js\n * 通过执行：webpack --display-modules --config ./config/webpack.build.js 指定配置文件运行\n * 在package.json中自定义命令，以后可以通过：npm run build 代替完整命令\n\n       \"build\": \"webpack --display-modules --config ./config/webpack.build.js\"\n\n\n注：如果发现build文件夹出现在了config中，解决办法如下：\n\n修改出口output中的path为：\n            resolve(__dirname, '../build')\n\n\n\n\n\n",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675751906e3},{title:"es7常用知识总结",frontmatter:{title:"es7常用知识总结",permalink:"/pages/29f30f/",categories:["前端","技术文章"],tags:["JS"],date:"2020-04-15T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/09.es7%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93.html",relativePath:"01.前端/01.学过的习/09.es7常用知识总结.md",key:"v-df044332",path:"/pages/29f30f/",headers:[{level:3,title:"一、指数运算符",slug:"一、指数运算符",normalizedTitle:"一、指数运算符",charIndex:2},{level:3,title:"二、数组方法",slug:"二、数组方法",normalizedTitle:"二、数组方法",charIndex:66}],headersStr:"一、指数运算符 二、数组方法",content:"# 一、指数运算符\n\nES7中，用**来表述指数运算符，也就是幂。\n\n console.log(3 ** 3);//27\n\n\n\n# 二、数组方法\n\nArray.prototype.includes(value) : 判断数组中是否包含指定value\n\n    let arr = [1,2,3,4, 'abc'];\n    console.log(arr.includes(2));//true\n    console.log(arr.includes('a'));//false\n    console.log(arr.includes('abc'));//true  //需要的是完整的字符串！！！！\n",normalizedContent:"# 一、指数运算符\n\nes7中，用**来表述指数运算符，也就是幂。\n\n console.log(3 ** 3);//27\n\n\n\n# 二、数组方法\n\narray.prototype.includes(value) : 判断数组中是否包含指定value\n\n    let arr = [1,2,3,4, 'abc'];\n    console.log(arr.includes(2));//true\n    console.log(arr.includes('a'));//false\n    console.log(arr.includes('abc'));//true  //需要的是完整的字符串！！！！\n",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675751906e3},{title:"css阻塞与js阻塞",frontmatter:{title:"css阻塞与js阻塞",permalink:"/pages/8e9745/",categories:["前端","技术文章"],tags:["CSS","JS"],date:"2020-09-21T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/15.css%E9%98%BB%E5%A1%9E%E4%B8%8Ejs%E9%98%BB%E5%A1%9E.html",relativePath:"01.前端/01.学过的习/15.css阻塞与js阻塞.md",key:"v-619050cb",path:"/pages/8e9745/",headers:[{level:2,title:"一、css阻塞：",slug:"一、css阻塞",normalizedTitle:"一、css阻塞：",charIndex:2},{level:2,title:"二、css阻塞优化：",slug:"二、css阻塞优化",normalizedTitle:"二、css阻塞优化：",charIndex:479},{level:2,title:"三、js阻塞：",slug:"三、js阻塞",normalizedTitle:"三、js阻塞：",charIndex:1266},{level:2,title:"四、js阻塞优化：",slug:"四、js阻塞优化",normalizedTitle:"四、js阻塞优化：",charIndex:1648},{level:3,title:"注：",slug:"注",normalizedTitle:"注：",charIndex:422},{level:2,title:"扩展",slug:"扩展",normalizedTitle:"扩展",charIndex:2290},{level:3,title:"Web Workers：",slug:"web-workers",normalizedTitle:"web workers：",charIndex:1722},{level:3,title:"requestIdleCallback",slug:"requestidlecallback",normalizedTitle:"requestidlecallback",charIndex:1794}],headersStr:"一、css阻塞： 二、css阻塞优化： 三、js阻塞： 四、js阻塞优化： 注： 扩展 Web Workers： requestIdleCallback",content:'# 一、css阻塞：\n\n也称为 "CSS 加载阻塞"，是指在加载 CSS 样式表时，浏览器会阻塞页面的渲染，直到 CSS 文件下载完毕并被解析后才继续渲染页面。也就是说，如果页面上的 CSS 文件加载速度比较慢，用户在等待页面呈现的过程中会感到卡顿。\n\n\n * style标签中的样式：\n   * 由html解析器进行解析；\n   * 不阻塞浏览器渲染（可能会产生“闪屏现象”）；\n     * 原因：浏览器在解析 HTML 文件时，还需要等待图片、视频和字体等资源下载完成，才能继续渲染页面。如果这些资源下载速度慢，页面仍然可能在等待的过程中出现白屏或闪屏。\n   * 不阻塞DOM解析；\n     \n     \n * link引入的外部css样式（推荐使用的方式）:\n   * 由CSS解析器进行解析。\n   * 阻塞浏览器渲染(可以利用这种阻塞避免“闪屏现象”)。\n   * 阻塞其后面的js语句的执行：\n   * 不阻塞DOM的解析： 注： 只有link引入的外部css才能够产生css阻塞。\n     \n     \n     \n     \n\n\n# 二、css阻塞优化：\n\n优化核心理念：尽可能快的提高外部css加载速度\n\n * 使用CDN节点进行外部资源加速。\n * 对css进行压缩(利用打包工具，比如webpack,gulp等)。\n * 减少http请求数，将多个css文件合并。\n * 优化样式表的代码\n   \n   \n\n另外还可以：\n\n\n\n * 使用内联样式：将小量的 CSS 代码内联到 HTML 中，可以避免阻塞渲染。\n * 把样式表放在顶部：在页面头部引入样式表，可以尽早告诉浏览器要等待的样式表的大小，从而提高渲染效率。\n * 异步加载样式表：使用 JavaScript 异步加载样式表，可以不阻塞渲染，提高用户体验。\n   \n   // 异步加载样式表：\n   \n   //1、使用JavaScript在页面中动态创建一个 <link> 标签\n   var link = document.createElement("link");\n   link.href = "style.css";\n   link.type = "text/css";\n   link.rel = "stylesheet";\n   document.head.appendChild(link);\n   \n   //2、使用 JavaScript 的 Fetch API\n   fetch("style.css")\n     .then(response => response.text())\n     .then(text => {\n       var style = document.createElement("style");\n       style.innerHTML = text;\n       document.head.appendChild(style);\n   });\n   \n\n\n\n\n\n\n\n\n# 三、js阻塞：\n\nJavaScript 是单线程语言，它在执行代码时会阻塞其他任务。如果 JavaScript 代码中包含大量的计算或等待 I/O 操作的代码，它就会阻塞浏览器的其他任务，如用户交互、渲染页面等。\n\n\n * 阻塞DOM解析:浏览器不知道后续脚本的内容，如果先去解析了下面的DOM，而随后的js删除了后面所有的DOM， 那么浏览器就做了无用功，浏览器无法预估脚本里面具体做了什么操作，例如像document.write 这种操作，索性全部停住，等脚本执行完了，浏览器再继续向下解析DOM。\n\n * 阻塞页面渲染:js中也可以给DOM设置样式，浏览器同样等该脚本执行完毕，再继续干活，避免做无用功。\n\n * 阻塞后续js的执行:维护依赖关系，例如：必须先引入jQuery再引入bootstrap\n   \n   \n   \n   \n   \n   \n\n\n# 四、js阻塞优化：\n\n * 使用异步代码：通过使用异步代码，可以避免长时间的阻塞，因为异步代码可以在后台执行，不会影响主线程的工作。\n\n * 使用 Web Workers：如果你有复杂的计算或需要进行大量的循环，可以使用 Web Workers 来执行代码，以避免阻塞主线程。\n\n * 使用 requestIdleCallback：这是一个新的 API，可以在浏览器的空闲时间内执行代码，从而避免阻塞主线程。\n\n * 使用节流和防抖：通过使用节流和防抖技术，可以减少不必要的计算，从而避免阻塞主线程。(减少当前的的重复请求)\n   \n   \n   \n   \n   \n   \n\n\n# 注：\n\n * css的解析和js的执行是互斥的（互相排斥），css解析的时候js停止执行，js执行的时候css停止解析。\n\n * 无论css阻塞，还是js阻塞，都不会阻塞浏览器加载外部资源（图片、视频、样式、脚本等）.浏览器始终处于一种：“先把请求发出去”的工作模式，只要是涉及到网络请求的内容，无论是：图片、样式、脚本，都会先发送请求去获取资源，至于资源到本地之后什么时候用， 由浏览器自己协调。这种做法效率很高。\n\n * WebKit 和 Firefox 都进行了【预解析】这项优化。在执行js脚本时，浏览器的其他线程会解析文档的其余部分，找出并加载需要通过网络加载的其他资源。通过这种方式，资源可以在并行连接上加载， 从而提高总体速度。注意，预解析器不会修改 DOM 树\n   \n   \n\n\n# 扩展\n\n\n# Web Workers：\n\nWeb Workers是JavaScript中的一种并行计算技术，可以在后台独立运行JavaScript脚本，不会阻塞主线程的UI渲染和JavaScript脚本的执行。\n\n使用Web Workers：\n\n * 1、创建一个JavaScript文件，其中包含你想要在后台执行的代码\n * 2、在主JavaScript文件中，使用 new Worker(workerScriptURL) 创建一个新的Worker对象，其中 workerScriptURL 参数是刚才创建的JavaScript文件的URL。\n * 3、使用Worker对象的 postMessage() 方法向后台Worker发送数据，使用 onmessage 事件处理Worker发送回来的数据。\n * 4、使用Worker对象的 terminate() 方法终止后台Worker。\n\n  // worker.js\n  self.addEventListener("message", function (e) {\n    console.log("Worker received message: " + e.data);\n    self.postMessage("Worker says: Hi!");\n  });\n\n  或者\n\n  onmessage = function(e) {\n    console.log(\'Message received from main script\',e);\n    let workerResult = \'worker返回的记过\'+e.data\n    console.log(\'Posting message back to main script\');\n    postMessage(workerResult);\n  }\n  \n  \n  // main.js\n  var worker = new Worker("worker.js");\n  worker.postMessage("Main says: Hi!");\n  worker.onmessage = function (e) {\n    console.log("Main received message: " + e.data);\n  };\n\n\n\n\n\n\n\n# requestIdleCallback\n\nwindow.requestIdleCallback() 方法插入一个函数，这个函数将在浏览器空闲时期被调用。 这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应。函数一般会按先进先调用的顺序执行，然而，如果回调函数指定了执行超时时间timeout，则有可能为了在超时前执行函数而打乱执行顺序。 你可以在空闲回调函数中调用 requestIdleCallback()，以便在下一次通过事件循环之前调度另一个回调。\n\n  var handle = window.requestIdleCallback(callback[, options])\n  //结束回调\n  Window.cancelIdleCallback(handle) \n',normalizedContent:'# 一、css阻塞：\n\n也称为 "css 加载阻塞"，是指在加载 css 样式表时，浏览器会阻塞页面的渲染，直到 css 文件下载完毕并被解析后才继续渲染页面。也就是说，如果页面上的 css 文件加载速度比较慢，用户在等待页面呈现的过程中会感到卡顿。\n\n\n * style标签中的样式：\n   * 由html解析器进行解析；\n   * 不阻塞浏览器渲染（可能会产生“闪屏现象”）；\n     * 原因：浏览器在解析 html 文件时，还需要等待图片、视频和字体等资源下载完成，才能继续渲染页面。如果这些资源下载速度慢，页面仍然可能在等待的过程中出现白屏或闪屏。\n   * 不阻塞dom解析；\n     \n     \n * link引入的外部css样式（推荐使用的方式）:\n   * 由css解析器进行解析。\n   * 阻塞浏览器渲染(可以利用这种阻塞避免“闪屏现象”)。\n   * 阻塞其后面的js语句的执行：\n   * 不阻塞dom的解析： 注： 只有link引入的外部css才能够产生css阻塞。\n     \n     \n     \n     \n\n\n# 二、css阻塞优化：\n\n优化核心理念：尽可能快的提高外部css加载速度\n\n * 使用cdn节点进行外部资源加速。\n * 对css进行压缩(利用打包工具，比如webpack,gulp等)。\n * 减少http请求数，将多个css文件合并。\n * 优化样式表的代码\n   \n   \n\n另外还可以：\n\n\n\n * 使用内联样式：将小量的 css 代码内联到 html 中，可以避免阻塞渲染。\n * 把样式表放在顶部：在页面头部引入样式表，可以尽早告诉浏览器要等待的样式表的大小，从而提高渲染效率。\n * 异步加载样式表：使用 javascript 异步加载样式表，可以不阻塞渲染，提高用户体验。\n   \n   // 异步加载样式表：\n   \n   //1、使用javascript在页面中动态创建一个 <link> 标签\n   var link = document.createelement("link");\n   link.href = "style.css";\n   link.type = "text/css";\n   link.rel = "stylesheet";\n   document.head.appendchild(link);\n   \n   //2、使用 javascript 的 fetch api\n   fetch("style.css")\n     .then(response => response.text())\n     .then(text => {\n       var style = document.createelement("style");\n       style.innerhtml = text;\n       document.head.appendchild(style);\n   });\n   \n\n\n\n\n\n\n\n\n# 三、js阻塞：\n\njavascript 是单线程语言，它在执行代码时会阻塞其他任务。如果 javascript 代码中包含大量的计算或等待 i/o 操作的代码，它就会阻塞浏览器的其他任务，如用户交互、渲染页面等。\n\n\n * 阻塞dom解析:浏览器不知道后续脚本的内容，如果先去解析了下面的dom，而随后的js删除了后面所有的dom， 那么浏览器就做了无用功，浏览器无法预估脚本里面具体做了什么操作，例如像document.write 这种操作，索性全部停住，等脚本执行完了，浏览器再继续向下解析dom。\n\n * 阻塞页面渲染:js中也可以给dom设置样式，浏览器同样等该脚本执行完毕，再继续干活，避免做无用功。\n\n * 阻塞后续js的执行:维护依赖关系，例如：必须先引入jquery再引入bootstrap\n   \n   \n   \n   \n   \n   \n\n\n# 四、js阻塞优化：\n\n * 使用异步代码：通过使用异步代码，可以避免长时间的阻塞，因为异步代码可以在后台执行，不会影响主线程的工作。\n\n * 使用 web workers：如果你有复杂的计算或需要进行大量的循环，可以使用 web workers 来执行代码，以避免阻塞主线程。\n\n * 使用 requestidlecallback：这是一个新的 api，可以在浏览器的空闲时间内执行代码，从而避免阻塞主线程。\n\n * 使用节流和防抖：通过使用节流和防抖技术，可以减少不必要的计算，从而避免阻塞主线程。(减少当前的的重复请求)\n   \n   \n   \n   \n   \n   \n\n\n# 注：\n\n * css的解析和js的执行是互斥的（互相排斥），css解析的时候js停止执行，js执行的时候css停止解析。\n\n * 无论css阻塞，还是js阻塞，都不会阻塞浏览器加载外部资源（图片、视频、样式、脚本等）.浏览器始终处于一种：“先把请求发出去”的工作模式，只要是涉及到网络请求的内容，无论是：图片、样式、脚本，都会先发送请求去获取资源，至于资源到本地之后什么时候用， 由浏览器自己协调。这种做法效率很高。\n\n * webkit 和 firefox 都进行了【预解析】这项优化。在执行js脚本时，浏览器的其他线程会解析文档的其余部分，找出并加载需要通过网络加载的其他资源。通过这种方式，资源可以在并行连接上加载， 从而提高总体速度。注意，预解析器不会修改 dom 树\n   \n   \n\n\n# 扩展\n\n\n# web workers：\n\nweb workers是javascript中的一种并行计算技术，可以在后台独立运行javascript脚本，不会阻塞主线程的ui渲染和javascript脚本的执行。\n\n使用web workers：\n\n * 1、创建一个javascript文件，其中包含你想要在后台执行的代码\n * 2、在主javascript文件中，使用 new worker(workerscripturl) 创建一个新的worker对象，其中 workerscripturl 参数是刚才创建的javascript文件的url。\n * 3、使用worker对象的 postmessage() 方法向后台worker发送数据，使用 onmessage 事件处理worker发送回来的数据。\n * 4、使用worker对象的 terminate() 方法终止后台worker。\n\n  // worker.js\n  self.addeventlistener("message", function (e) {\n    console.log("worker received message: " + e.data);\n    self.postmessage("worker says: hi!");\n  });\n\n  或者\n\n  onmessage = function(e) {\n    console.log(\'message received from main script\',e);\n    let workerresult = \'worker返回的记过\'+e.data\n    console.log(\'posting message back to main script\');\n    postmessage(workerresult);\n  }\n  \n  \n  // main.js\n  var worker = new worker("worker.js");\n  worker.postmessage("main says: hi!");\n  worker.onmessage = function (e) {\n    console.log("main received message: " + e.data);\n  };\n\n\n\n\n\n\n\n# requestidlecallback\n\nwindow.requestidlecallback() 方法插入一个函数，这个函数将在浏览器空闲时期被调用。 这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应。函数一般会按先进先调用的顺序执行，然而，如果回调函数指定了执行超时时间timeout，则有可能为了在超时前执行函数而打乱执行顺序。 你可以在空闲回调函数中调用 requestidlecallback()，以便在下一次通过事件循环之前调度另一个回调。\n\n  var handle = window.requestidlecallback(callback[, options])\n  //结束回调\n  window.cancelidlecallback(handle) \n',charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675754721e3},{title:"js原型对象和原型链的理解",frontmatter:{title:"js原型对象和原型链的理解",permalink:"/pages/debc20/",categories:["前端","技术文章"],tags:["JS"],date:"2020-09-06T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/14.js%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9A%84%E7%90%86%E8%A7%A3.html",relativePath:"01.前端/01.学过的习/14.js原型对象和原型链的理解.md",key:"v-6206fec9",path:"/pages/debc20/",headers:[{level:2,title:"原型对象的概念：",slug:"原型对象的概念",normalizedTitle:"原型对象的概念：",charIndex:2},{level:2,title:"原型链概念：",slug:"原型链概念",normalizedTitle:"原型链概念：",charIndex:184}],headersStr:"原型对象的概念： 原型链概念：",content:"# 原型对象的概念：\n\n * 原型对象的本质其实是一个Object实例，因为对象沿着原型链最终会指向Object的原型对象。\n * 每个函数都有一个prototype属性，该属性指向的是原型对象\n * 每个实例对象身上都有一个__proto__属性，该属性指向的也是原型对象(隐式原型对象)，并且实例的隐式原型对象和构造函数的显示原型对象是全等的。\n\n\n\n\n\n\n\n# 原型链概念：\n\n * 查找对象的属性的时候现在自身找，如果自身没有沿着__proto__找原型对象，如果原型对象上还没有，继续沿着__proto__,直到找到Object的原型对象对象， 如果还没有找到返回undefined。我们将沿着__proto__查找的链称作为原型链。\n * 原型链则是指，当查询一个对象的属性时，如果对象本身不存在该属性，则会沿着原型链向上查找，直到找到该属性或到达 Object 的原型对象为止。因此，原型链代表着从一个对象到另一个对象的继承关系。\n\n\n原型的存在主要是为了解决在实例化时，节省内存，可以减少实例化是对象内部的属性或者方法过多，可以将这些属性或者方法放在原型上，实例对象在需要这些属性或者方法时，可以直接调用，js会根据原型链进行查找。\n\n\nfunction ProtoF(name,age){\n\tthis.name = name\n\tthis.age = age\n\tthis.showtest=function(){\n\t\tconsole.log('this is show test')\n\t}\n}\n\nProtoF.prototype.showtest2=function(){\n\tconsole.log('this is common way')\n}\n\nlet obj1 = new ProtoF(\"zl\",'12')\nlet obj2 = new ProtoF(\"jhh\",'13')\n\nconsole.log(obj1,obj2)\n\nconsole.log(obj1.showtest2(),obj2.showtest2())\n\nconsole.log(obj1.__proto__===ProtoF.prototype)  //注意此处\n",normalizedContent:"# 原型对象的概念：\n\n * 原型对象的本质其实是一个object实例，因为对象沿着原型链最终会指向object的原型对象。\n * 每个函数都有一个prototype属性，该属性指向的是原型对象\n * 每个实例对象身上都有一个__proto__属性，该属性指向的也是原型对象(隐式原型对象)，并且实例的隐式原型对象和构造函数的显示原型对象是全等的。\n\n\n\n\n\n\n\n# 原型链概念：\n\n * 查找对象的属性的时候现在自身找，如果自身没有沿着__proto__找原型对象，如果原型对象上还没有，继续沿着__proto__,直到找到object的原型对象对象， 如果还没有找到返回undefined。我们将沿着__proto__查找的链称作为原型链。\n * 原型链则是指，当查询一个对象的属性时，如果对象本身不存在该属性，则会沿着原型链向上查找，直到找到该属性或到达 object 的原型对象为止。因此，原型链代表着从一个对象到另一个对象的继承关系。\n\n\n原型的存在主要是为了解决在实例化时，节省内存，可以减少实例化是对象内部的属性或者方法过多，可以将这些属性或者方法放在原型上，实例对象在需要这些属性或者方法时，可以直接调用，js会根据原型链进行查找。\n\n\nfunction protof(name,age){\n\tthis.name = name\n\tthis.age = age\n\tthis.showtest=function(){\n\t\tconsole.log('this is show test')\n\t}\n}\n\nprotof.prototype.showtest2=function(){\n\tconsole.log('this is common way')\n}\n\nlet obj1 = new protof(\"zl\",'12')\nlet obj2 = new protof(\"jhh\",'13')\n\nconsole.log(obj1,obj2)\n\nconsole.log(obj1.showtest2(),obj2.showtest2())\n\nconsole.log(obj1.__proto__===protof.prototype)  //注意此处\n",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675751906e3},{title:"ajax的学习",frontmatter:{title:"ajax的学习",permalink:"/pages/9be584/",categories:["前端","技术文章"],tags:["JS"],date:"2020-10-20T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/16.ajax%E7%9A%84%E5%AD%A6%E4%B9%A0.html",relativePath:"01.前端/01.学过的习/16.ajax的学习.md",key:"v-250f9aa0",path:"/pages/9be584/",headers:[{level:3,title:"XHR理解",slug:"xhr理解",normalizedTitle:"xhr理解",charIndex:2},{level:3,title:"原生的ajax请求",slug:"原生的ajax请求",normalizedTitle:"原生的ajax请求",charIndex:367},{level:3,title:"JQuery封装的ajax请求",slug:"jquery封装的ajax请求",normalizedTitle:"jquery封装的ajax请求",charIndex:1492}],headersStr:"XHR理解 原生的ajax请求 JQuery封装的ajax请求",content:"# XHR理解\n\n使用XMLHttpRequest (XHR)对象可以与服务器交互, 也就是发送ajax请求。前端可以获取到数据，而无需让整个的页面刷新。这使得Web页面可以只更新页面的局部，而不影响用户的操作。\n\n * xhr对象本身有5种状态：xhr “诞生” 的那一刻就是0状态：\n   \n   0:xhr对象在实例化出来的那一刻，就已经是0状态，代表着xhr是初始化状态。\n   \n   1:send方法还没有被调用，即：请求没有发出去，此时依然可以修改请求头。\n   \n   2:send方法被调用了，即：请求已经发出去了，此时已经不可以再修改请求头。\n   \n   3:已经回来一部分数据了，如果是比较小的数据，会在此阶段一次性接收完毕,较大数据，有待于进一步接收。\n   \n   4:数据完美的回来了。\n   \n\n\n# 原生的ajax请求\n\n * get请求\n\n   \n   1.实例化一个XMLHttpRequest对象\n    let xhr = new XMLHttpRequest()\n\n   2.绑定一个名为onreadystatechange事件监听\n    xhr.onreadystatechange = function () { \n       if(xhr.readyState === 4 && xhr.status === 200){\n        //如果进入此判断，意味着：请求成功了，且数据已经回来了\n        console.log(xhr.response)\n       }\n    }\n\n    3.调用open方法---------用什么方法发？给谁发？带着什么过去？\n    xhr.open('get','http://localhost:3000/ajax_get?name=kobe&age=18&t='+Date.now())\n\n    4.调用send方法---------发送请求\n    xhr.send()\n    \n  \n\n\n * post请求\n\n\n    1.实例化一个XMLHttpRequest对象\n    let xhr = new XMLHttpRequest()\n\n    2.绑定一个名为onreadystatechange事件监听\n    xhr.onreadystatechange = function () {\n      if(xhr.readyState === 4 && xhr.status === 200){\n        console.log(xhr.response)\n        let demo = document.getElementById('demo')\n        demo.innerHTML = xhr.response\n      }\n    }\n\n    3.调用open方法---------用什么方法发？给谁发？带着什么过去？\n    xhr.open('post','http://localhost:3000/ajax_post')\n    \n    特别注意：此处是设置post请求所特有的请求头，若不设置，服务器无法获取参数\n    xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded')\n\n    4.调用send方法---------发送请求\n    xhr.send('name=kobe&age=18')\n\n\n\n\n\n# JQuery封装的ajax请求\n\n * get请求\n\n  \n   1、完整的写法\n   $.ajax({\n      url:'http://localhost:3000/ajax_get',\n      method:'get', //发送请求的方式\n      data:{name:'kobe',age:41}, //发送请求携带的数据\n      //成功的回调\n      success:function (result) { \n        console.log(result)\n      },\n      //失败的回调\n      error:function (err) {\n        console.log(err)\n      }\n    })\n\n   2、简单的写法\n    $.get('http://localhost:3000/ajax_get',{name:'kobe',age:41},(data)=>{\n      console.log(data)\n    })\n\n\n  \n \n \n\n\n * post请求\n\n  \n   1、完整的写法\n    $.ajax({\n     url:'http://localhost:3000/ajax_post',\n     method:'post', //发送请求的方式\n     data:{name:'kobe',age:41}, //发送请求携带的数据\n     //成功的回调\n     success:function (result) {\n       console.log(result)\n     },\n     //失败的回调\n     error:function (err) {\n       console.log(err)\n     }\n   })\n\n   2、简单的写法\n    $.post('http://localhost:3000/ajax_post',{name:'kobe',age:41},(data)=>{\n      console.log(data)\n    })\n    \n    \n",normalizedContent:"# xhr理解\n\n使用xmlhttprequest (xhr)对象可以与服务器交互, 也就是发送ajax请求。前端可以获取到数据，而无需让整个的页面刷新。这使得web页面可以只更新页面的局部，而不影响用户的操作。\n\n * xhr对象本身有5种状态：xhr “诞生” 的那一刻就是0状态：\n   \n   0:xhr对象在实例化出来的那一刻，就已经是0状态，代表着xhr是初始化状态。\n   \n   1:send方法还没有被调用，即：请求没有发出去，此时依然可以修改请求头。\n   \n   2:send方法被调用了，即：请求已经发出去了，此时已经不可以再修改请求头。\n   \n   3:已经回来一部分数据了，如果是比较小的数据，会在此阶段一次性接收完毕,较大数据，有待于进一步接收。\n   \n   4:数据完美的回来了。\n   \n\n\n# 原生的ajax请求\n\n * get请求\n\n   \n   1.实例化一个xmlhttprequest对象\n    let xhr = new xmlhttprequest()\n\n   2.绑定一个名为onreadystatechange事件监听\n    xhr.onreadystatechange = function () { \n       if(xhr.readystate === 4 && xhr.status === 200){\n        //如果进入此判断，意味着：请求成功了，且数据已经回来了\n        console.log(xhr.response)\n       }\n    }\n\n    3.调用open方法---------用什么方法发？给谁发？带着什么过去？\n    xhr.open('get','http://localhost:3000/ajax_get?name=kobe&age=18&t='+date.now())\n\n    4.调用send方法---------发送请求\n    xhr.send()\n    \n  \n\n\n * post请求\n\n\n    1.实例化一个xmlhttprequest对象\n    let xhr = new xmlhttprequest()\n\n    2.绑定一个名为onreadystatechange事件监听\n    xhr.onreadystatechange = function () {\n      if(xhr.readystate === 4 && xhr.status === 200){\n        console.log(xhr.response)\n        let demo = document.getelementbyid('demo')\n        demo.innerhtml = xhr.response\n      }\n    }\n\n    3.调用open方法---------用什么方法发？给谁发？带着什么过去？\n    xhr.open('post','http://localhost:3000/ajax_post')\n    \n    特别注意：此处是设置post请求所特有的请求头，若不设置，服务器无法获取参数\n    xhr.setrequestheader('content-type','application/x-www-form-urlencoded')\n\n    4.调用send方法---------发送请求\n    xhr.send('name=kobe&age=18')\n\n\n\n\n\n# jquery封装的ajax请求\n\n * get请求\n\n  \n   1、完整的写法\n   $.ajax({\n      url:'http://localhost:3000/ajax_get',\n      method:'get', //发送请求的方式\n      data:{name:'kobe',age:41}, //发送请求携带的数据\n      //成功的回调\n      success:function (result) { \n        console.log(result)\n      },\n      //失败的回调\n      error:function (err) {\n        console.log(err)\n      }\n    })\n\n   2、简单的写法\n    $.get('http://localhost:3000/ajax_get',{name:'kobe',age:41},(data)=>{\n      console.log(data)\n    })\n\n\n  \n \n \n\n\n * post请求\n\n  \n   1、完整的写法\n    $.ajax({\n     url:'http://localhost:3000/ajax_post',\n     method:'post', //发送请求的方式\n     data:{name:'kobe',age:41}, //发送请求携带的数据\n     //成功的回调\n     success:function (result) {\n       console.log(result)\n     },\n     //失败的回调\n     error:function (err) {\n       console.log(err)\n     }\n   })\n\n   2、简单的写法\n    $.post('http://localhost:3000/ajax_post',{name:'kobe',age:41},(data)=>{\n      console.log(data)\n    })\n    \n    \n",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675751906e3},{title:"浏览器的重绘与重排",frontmatter:{title:"浏览器的重绘与重排",permalink:"/pages/4f10b9/",categories:["前端","技术文章"],tags:["html"],date:"2020-11-18T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/17.%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E9%87%8D%E7%BB%98%E4%B8%8E%E9%87%8D%E6%8E%92.html",relativePath:"01.前端/01.学过的习/17.浏览器的重绘与重排.md",key:"v-088e9c1c",path:"/pages/4f10b9/",headers:[{level:3,title:"一、css图层",slug:"一、css图层",normalizedTitle:"一、css图层",charIndex:2},{level:3,title:"二、重绘(Repaint)",slug:"二、重绘-repaint",normalizedTitle:"二、重绘(repaint)",charIndex:456},{level:3,title:"三、重排（Reflow，回流）",slug:"三、重排-reflow-回流",normalizedTitle:"三、重排（reflow，回流）",charIndex:978},{level:3,title:"四、优化",slug:"四、优化",normalizedTitle:"四、优化",charIndex:1584},{level:3,title:"五、requestAnimationFrame（请求动画帧）",slug:"五、requestanimationframe-请求动画帧",normalizedTitle:"五、requestanimationframe（请求动画帧）",charIndex:2955}],headersStr:"一、css图层 二、重绘(Repaint) 三、重排（Reflow，回流） 四、优化 五、requestAnimationFrame（请求动画帧）",content:'# 一、css图层\n\n * 图层的作用：浏览器在渲染一个页面时，会将页面分为很多个图层，图层有大有小，每个图层上有一个或多个节点。在渲染DOM的时候，浏览器所做的工作实际上是：\n   \n   1. 获取DOM后分割为多个图层\n   2. 对每个图层的节点计算样式结果 （Recalculate style--样式重计算）\n   3. 为每个节点生成图形和位置 （Layout--重排,回流）\n   4. 将每个节点绘制填充到图层位图中 （Paint--重绘）\n   5. 图层作为纹理上传至GPU\n   6. 组合多个图层到页面上生成最终屏幕图像 （Composite Layers--图层重组）\n\n * 图层创建的条件：Chrome浏览器满足以下任意情况就会创建图层：\n   \n   1. 拥有具有3D变换的CSS属性\n   2. 使用加速视频解码的video节点\n   3. canvas节点\n   4. CSS3动画的节点\n   5. 拥有CSS加速属性的元素(will-change)\n\n\n\n\n\n\n\n# 二、重绘(Repaint)\n\n概念：重绘是一个元素外观的改变所触发的浏览器行为，例如改变outline、背景色等属性。浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。重绘不会带来重新布局，所以并不一定伴随重排（元素的位置不需要发生变动）。需要注意的是：重绘是以图层为单位，如果图层中某个元素需要重绘，那么整个图层都需要重绘。所以尽量尽量让经常发生重绘的元素处于同一个图层，就可以尽量的减少重绘。\n\n  \n常见的触发重绘的属性：\n   * color\t\t\t\t\t    * background\t\t\t\t\t    * outline-color\n   * border-style\t\t\t\t* background-image\t\t\t\t   \t* outline\n   * border-radius\t\t\t\t* background-position\t\t\t\t* outline-style\n   * visibility\t\t\t\t\t* background-repeat\t\t\t\t\t* outline-width\n   * text-decoration\t\t\t* background-size\t\t\t\t\t* box-shadow\n\n\n\n\n\n\n\n\n\n# 三、重排（Reflow，回流）\n\n概念：渲染对象在创建完成并添加到渲染树时，并不包含位置和大小信息。计算这些值的过程称为布局或重排。"重绘"不一定需要"重排"，比如改变某个网页元素的颜色，就只会触发"重绘"，不会触发"重排"，因为布局没有改变。但是，"重排"必然导致"重绘"，比如改变一个网页元素的位置，就会同时触发"重排"和"重绘"，因为布局改变了。\n\n盒子模型相关属性：\t\t        定位属性及浮动：\t\t\t \t     改变节点内部文字结构：\n* width\t\t\t\t\t\t\t* top\t\t\t\t\t\t\t * text-align\n* height\t\t\t\t\t\t* bottom\t\t\t\t  \t     * overflow-y\n* padding\t\t\t\t\t\t* left\t\t\t\t\t\t\t * font-weight\n* margin\t\t\t\t\t\t* right\t\t\t\t\t\t     * overflow\n* display\t\t\t\t\t\t* position\t\t\t\t\t     * font-family\n* border-width\t\t\t    \t* float\t\t\t\t\t         * line-height\n* border\t\t\t\t\t\t* clear\t\t\t\t\t      \t * vertival-align\n* min-height\t\t\t\t\t\t\t\t\t\t\t\t\t * white-space\n\n\n\n\n\n\n\n# 四、优化\n\n因为Reflow 的成本比 Repaint 的成本高得多的多。DOM Tree 里的每个结点都会有 reflow 方法，一个结点的 reflow 很有可能导致子结点，甚至父点以及同级结点的 reflow。在一些高性能的电脑上也许还没什么，但是如果 reflow 发生在手机上，那么这个过程是非常痛苦和耗电的。所以，下面这些动作有很大可能会是成本比较高的：\n\n * 你增加、删除、修改 DOM 结点时，会导致 Reflow , Repaint。\n * 移动 DOM 的位置\n * 修改 CSS 样式的时候。\n * 你 Resize 窗口的时候（移动端没有这个问题，因为移动端的缩放没有影响布局视口）\n * 修改网页的默认字体时。\n * 获取某些属性时(width,height等)\n\n注：display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发生位置变化。\n\n# 优化方案：\n\n如果我们需要使得动画或其他节点渲染的性能提高，需要做的就是减少浏览器在运行时所需要做的工作，具体的步骤在图层介绍的时候已经提到。有以下的一些方法：\n\n * 元素位置移动变换时尽量使用CSS3的transform来代替对top left等的操作\n\n * 使用opacity来代替visibility，变换（transform）和透明度（opacity）的改变仅仅影响图层的组合。透明度的改变时，GPU在绘画时只是简单的降低之前已经画好的纹理的alpha值来达到效果，并不需要整体的重绘。不过这个前提是这个被修改opacity本身必须是一个图层。\n\n * 不要使用table布局\n\n * 将多次改变样式属性的操作合并成一次操作，不要一条一条地修改DOM的样式，预先定义好class，然后修改DOM的className\n\n * 将DOM离线后再修改，由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。\n\n * 利用文档碎片(documentFragment)------vue使用了该种方式提升性能。 浏览器都会强行刷新渲染队列。\n\n * 动画实现过程中，启用GPU硬件加速:transform: tranlateZ(0)\n\n * 为动画元素新建图层,提高动画元素的z-index\n\n * 不要把获取某些DOM节点的属性值放在一个循环里当成循环的变量，因为当你请求向浏览器请求一些 style信息的时候，就会让浏览器flush队列，比如如下属性， 当你请求这些属性的时候，浏览器为了给你最精确的值，需要刷新内部队列。因为队列中可能会有影响到这些值的操作。即使你获取元素的布局和样式信息跟最近发生或改变的布局信息无关。\n   \n   1. offsetTop, offsetLeft, offsetWidth, offsetHeight\n   2. scrollTop/Left/Width/Height\n   3. clientTop/Left/Width/Height\n   4. width,height\n   \n   \n   \n   \n\n\n# 五、requestAnimationFrame（请求动画帧）\n\n1.window.requestAnimationFrame()\n\n说明：该方法会告诉浏览器在重绘之前调用你所指定的函数 参数：该方法使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。注：回调函数会被自动传入一个参数，DOMHighResTimeStamp，标识requestAnimationFrame()开始触发回调函数的当前时间 返回值： 一个long整数，也成为请求 ID，是个非零值 ，是回调列表中唯一的标识，没别的意义。\n\n2.window.cancelAnimationFrame(requestID)\n\n作用：取消一个先前通过调用window.requestAnimationFrame()方法添加到计划中的动画帧请求。requestID是先前调用window.requestAnimationFrame()方法时返回的ID.\n\n  let i = 0;\n  let test = document.getElementById(\'test\');//定义的id为test的div\n \n  let id = requestAnimationFrame(move);\n  function move(event){    //event 是传入的参数，标识时间\n    i++;\n    test.style.transform = `translateX(${i}px)`; \n    id = requestAnimationFrame(move);  \n  }\n  \n  //3秒后关闭请求动画针\n  setTimeout(()=>{\n    cancelAnimationFrame(id);  //通过id去关闭请求动画帧\n  },3000);\n',normalizedContent:'# 一、css图层\n\n * 图层的作用：浏览器在渲染一个页面时，会将页面分为很多个图层，图层有大有小，每个图层上有一个或多个节点。在渲染dom的时候，浏览器所做的工作实际上是：\n   \n   1. 获取dom后分割为多个图层\n   2. 对每个图层的节点计算样式结果 （recalculate style--样式重计算）\n   3. 为每个节点生成图形和位置 （layout--重排,回流）\n   4. 将每个节点绘制填充到图层位图中 （paint--重绘）\n   5. 图层作为纹理上传至gpu\n   6. 组合多个图层到页面上生成最终屏幕图像 （composite layers--图层重组）\n\n * 图层创建的条件：chrome浏览器满足以下任意情况就会创建图层：\n   \n   1. 拥有具有3d变换的css属性\n   2. 使用加速视频解码的video节点\n   3. canvas节点\n   4. css3动画的节点\n   5. 拥有css加速属性的元素(will-change)\n\n\n\n\n\n\n\n# 二、重绘(repaint)\n\n概念：重绘是一个元素外观的改变所触发的浏览器行为，例如改变outline、背景色等属性。浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。重绘不会带来重新布局，所以并不一定伴随重排（元素的位置不需要发生变动）。需要注意的是：重绘是以图层为单位，如果图层中某个元素需要重绘，那么整个图层都需要重绘。所以尽量尽量让经常发生重绘的元素处于同一个图层，就可以尽量的减少重绘。\n\n  \n常见的触发重绘的属性：\n   * color\t\t\t\t\t    * background\t\t\t\t\t    * outline-color\n   * border-style\t\t\t\t* background-image\t\t\t\t   \t* outline\n   * border-radius\t\t\t\t* background-position\t\t\t\t* outline-style\n   * visibility\t\t\t\t\t* background-repeat\t\t\t\t\t* outline-width\n   * text-decoration\t\t\t* background-size\t\t\t\t\t* box-shadow\n\n\n\n\n\n\n\n\n\n# 三、重排（reflow，回流）\n\n概念：渲染对象在创建完成并添加到渲染树时，并不包含位置和大小信息。计算这些值的过程称为布局或重排。"重绘"不一定需要"重排"，比如改变某个网页元素的颜色，就只会触发"重绘"，不会触发"重排"，因为布局没有改变。但是，"重排"必然导致"重绘"，比如改变一个网页元素的位置，就会同时触发"重排"和"重绘"，因为布局改变了。\n\n盒子模型相关属性：\t\t        定位属性及浮动：\t\t\t \t     改变节点内部文字结构：\n* width\t\t\t\t\t\t\t* top\t\t\t\t\t\t\t * text-align\n* height\t\t\t\t\t\t* bottom\t\t\t\t  \t     * overflow-y\n* padding\t\t\t\t\t\t* left\t\t\t\t\t\t\t * font-weight\n* margin\t\t\t\t\t\t* right\t\t\t\t\t\t     * overflow\n* display\t\t\t\t\t\t* position\t\t\t\t\t     * font-family\n* border-width\t\t\t    \t* float\t\t\t\t\t         * line-height\n* border\t\t\t\t\t\t* clear\t\t\t\t\t      \t * vertival-align\n* min-height\t\t\t\t\t\t\t\t\t\t\t\t\t * white-space\n\n\n\n\n\n\n\n# 四、优化\n\n因为reflow 的成本比 repaint 的成本高得多的多。dom tree 里的每个结点都会有 reflow 方法，一个结点的 reflow 很有可能导致子结点，甚至父点以及同级结点的 reflow。在一些高性能的电脑上也许还没什么，但是如果 reflow 发生在手机上，那么这个过程是非常痛苦和耗电的。所以，下面这些动作有很大可能会是成本比较高的：\n\n * 你增加、删除、修改 dom 结点时，会导致 reflow , repaint。\n * 移动 dom 的位置\n * 修改 css 样式的时候。\n * 你 resize 窗口的时候（移动端没有这个问题，因为移动端的缩放没有影响布局视口）\n * 修改网页的默认字体时。\n * 获取某些属性时(width,height等)\n\n注：display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发生位置变化。\n\n# 优化方案：\n\n如果我们需要使得动画或其他节点渲染的性能提高，需要做的就是减少浏览器在运行时所需要做的工作，具体的步骤在图层介绍的时候已经提到。有以下的一些方法：\n\n * 元素位置移动变换时尽量使用css3的transform来代替对top left等的操作\n\n * 使用opacity来代替visibility，变换（transform）和透明度（opacity）的改变仅仅影响图层的组合。透明度的改变时，gpu在绘画时只是简单的降低之前已经画好的纹理的alpha值来达到效果，并不需要整体的重绘。不过这个前提是这个被修改opacity本身必须是一个图层。\n\n * 不要使用table布局\n\n * 将多次改变样式属性的操作合并成一次操作，不要一条一条地修改dom的样式，预先定义好class，然后修改dom的classname\n\n * 将dom离线后再修改，由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。\n\n * 利用文档碎片(documentfragment)------vue使用了该种方式提升性能。 浏览器都会强行刷新渲染队列。\n\n * 动画实现过程中，启用gpu硬件加速:transform: tranlatez(0)\n\n * 为动画元素新建图层,提高动画元素的z-index\n\n * 不要把获取某些dom节点的属性值放在一个循环里当成循环的变量，因为当你请求向浏览器请求一些 style信息的时候，就会让浏览器flush队列，比如如下属性， 当你请求这些属性的时候，浏览器为了给你最精确的值，需要刷新内部队列。因为队列中可能会有影响到这些值的操作。即使你获取元素的布局和样式信息跟最近发生或改变的布局信息无关。\n   \n   1. offsettop, offsetleft, offsetwidth, offsetheight\n   2. scrolltop/left/width/height\n   3. clienttop/left/width/height\n   4. width,height\n   \n   \n   \n   \n\n\n# 五、requestanimationframe（请求动画帧）\n\n1.window.requestanimationframe()\n\n说明：该方法会告诉浏览器在重绘之前调用你所指定的函数 参数：该方法使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。注：回调函数会被自动传入一个参数，domhighrestimestamp，标识requestanimationframe()开始触发回调函数的当前时间 返回值： 一个long整数，也成为请求 id，是个非零值 ，是回调列表中唯一的标识，没别的意义。\n\n2.window.cancelanimationframe(requestid)\n\n作用：取消一个先前通过调用window.requestanimationframe()方法添加到计划中的动画帧请求。requestid是先前调用window.requestanimationframe()方法时返回的id.\n\n  let i = 0;\n  let test = document.getelementbyid(\'test\');//定义的id为test的div\n \n  let id = requestanimationframe(move);\n  function move(event){    //event 是传入的参数，标识时间\n    i++;\n    test.style.transform = `translatex(${i}px)`; \n    id = requestanimationframe(move);  \n  }\n  \n  //3秒后关闭请求动画针\n  settimeout(()=>{\n    cancelanimationframe(id);  //通过id去关闭请求动画帧\n  },3000);\n',charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675751906e3},{title:"函数防抖与函数节流学习记录",frontmatter:{title:"函数防抖与函数节流学习记录",permalink:"/pages/1273e8/",categories:["前端","技术文章"],tags:["JS"],date:"2020-12-16T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/18.%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E4%B8%8E%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95.html",relativePath:"01.前端/01.学过的习/18.函数防抖与函数节流学习记录.md",key:"v-9edb151c",path:"/pages/1273e8/",headers:[{level:3,title:"函数防抖：",slug:"函数防抖",normalizedTitle:"函数防抖：",charIndex:2},{level:3,title:"函数节流",slug:"函数节流",normalizedTitle:"函数节流",charIndex:399}],headersStr:"函数防抖： 函数节流",content:"# 函数防抖：\n\n概念： 延迟要执行的动作，若在延时的这段时间内，再次触发了，则取消之前开启的动作，重新计时。比如电脑无操作1分钟后会进入休眠，当第40秒时鼠标被移动一下，重新计时1分钟。\n\n实现方式： 定时器。通过在监听的内部对定时器进行清除\n\n\nlet input = document.getElementById('test');//键盘抬起获取输入框中的value值\n\nlet timer = null;   //定时器的返回值，主要是为了清除定时器的传参\n\ninput.addEventListener('keyup',()=>{\n  let data = input.value;\n  \n  clearTimeout(timer);//清除定时器\n  \n  timer = setTimeout(()=>{\n    //异步请求\n  },500);\n  \n});\n\n\n\n\n\n\n\n\n# 函数节流\n\n概念：设定一个特定的时间，让函数在特定的时间内只执行一次，不会频繁执行。比如在键盘按下的时候会触发一个操作，但是你一直按着的话，就会一直触发操作，函数节流就是为了避免这种情况。\n\n实现方式：定时器、标识 。通过标识的判断进行操作，操作完将标识置为false，通过定时器置回标识的状态。\n\n  例子：在鼠标滚轮滚动的时候，每隔2秒钟，打印一次\n  let body = document.getElementsByTagName('body')[0];\n  \n   //每次滚轮后都会将状态置为false，不会进入打印，等两秒后再将状态置为true。\n  let flag =  true; \n  body.onscroll = ()=>{\n    if(flag){\n      console.log(111);\n      flag = false;\n      setTimeout(function(){\n        flag = true;\n      },2000)\n    }\n  }\n",normalizedContent:"# 函数防抖：\n\n概念： 延迟要执行的动作，若在延时的这段时间内，再次触发了，则取消之前开启的动作，重新计时。比如电脑无操作1分钟后会进入休眠，当第40秒时鼠标被移动一下，重新计时1分钟。\n\n实现方式： 定时器。通过在监听的内部对定时器进行清除\n\n\nlet input = document.getelementbyid('test');//键盘抬起获取输入框中的value值\n\nlet timer = null;   //定时器的返回值，主要是为了清除定时器的传参\n\ninput.addeventlistener('keyup',()=>{\n  let data = input.value;\n  \n  cleartimeout(timer);//清除定时器\n  \n  timer = settimeout(()=>{\n    //异步请求\n  },500);\n  \n});\n\n\n\n\n\n\n\n\n# 函数节流\n\n概念：设定一个特定的时间，让函数在特定的时间内只执行一次，不会频繁执行。比如在键盘按下的时候会触发一个操作，但是你一直按着的话，就会一直触发操作，函数节流就是为了避免这种情况。\n\n实现方式：定时器、标识 。通过标识的判断进行操作，操作完将标识置为false，通过定时器置回标识的状态。\n\n  例子：在鼠标滚轮滚动的时候，每隔2秒钟，打印一次\n  let body = document.getelementsbytagname('body')[0];\n  \n   //每次滚轮后都会将状态置为false，不会进入打印，等两秒后再将状态置为true。\n  let flag =  true; \n  body.onscroll = ()=>{\n    if(flag){\n      console.log(111);\n      flag = false;\n      settimeout(function(){\n        flag = true;\n      },2000)\n    }\n  }\n",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675751906e3},{title:"浏览器储存学习",frontmatter:{title:"浏览器储存学习",permalink:"/pages/0acb8e/",categories:["前端","技术文章"],tags:["JS"],date:"2021-03-08T00:00:00.000Z"},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/19.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%82%A8%E5%AD%98%E5%AD%A6%E4%B9%A0.html",relativePath:"01.前端/01.学过的习/19.浏览器储存学习.md",key:"v-cfc2ace0",path:"/pages/0acb8e/",headers:[{level:2,title:"一、cookie",slug:"一、cookie",normalizedTitle:"一、cookie",charIndex:75},{level:2,title:"二、SessionStorage和LocalStorage",slug:"二、sessionstorage和localstorage",normalizedTitle:"二、sessionstorage和localstorage",charIndex:843},{level:2,title:"三、备注：",slug:"三、备注",normalizedTitle:"三、备注：",charIndex:1819}],headersStr:"一、cookie 二、SessionStorage和LocalStorage 三、备注：",content:"Cookie, SessionStorage, LocalStorage这三者都可以被用来在浏览器端存储数据，而且都是字符串类型的键值对。\n\n\n\n# 一、cookie\n\n概念： cookie是纯文本格式，不包含任何可执行的代码信息，伴随着用户请求在 Web 服务器和浏览器之间传递。cookie本质上属于http的范畴，因为http协议本身是无状态的，服务端是没有办法区分请求来自于哪个客户端，即便是来自于同一个客户端的多次请求 我们的服务端也是没有能力来区分的。就是因为http协议是无状态的，所以才需要cookie去维持客户端的状态。\n生成方式:\n\n * 客户端生成: 在 JavaScript 中通过 document.cookie 属性，你可以创建、维护和删除 cookie设置 。 document.cookie 属性的值并不会删除存储在页面中的所有 cookie。它只简单的创建或修改字符串中指定的 cookie。 要使用 JavaScript 提取 cookie 的值，只需要从 document.cookie 中读取即可。\n * 服务端生成: Web 服务器通过发送一个称为 Set-Cookie 的 HTTP消息头来创建一个 cookie。注： HttpOnly， 为避免跨域脚本 (XSS) 攻击，通过JavaScript的 Document.cookie API无法访问有HttpOnly 标记的Cookie，\n\n\n缺点：\n\n * 安全性 ：由于cookie在HTTP中是明文传递的，其中包含的数据都可以被他人访问，可能会被篡改、盗用。\n * 大小限制： cookie的大小限制在4KB左右，若要做大量存储显然不是理想的选择。\n * 增加流量： cookie每次请求都会被自动添加到Request Header中，无形中增加了流量。cookie信息越大，对服务器请求的时间也越长。因此要慎用cookie，不要在cookie中存储重要和敏感的数据。\n\n\n\n\n\n\n# 二、SessionStorage和LocalStorage\n\n概念： SessionStorage和LocalStorage都是本地存储,同时空间比Cookie大很多，一般支持5-10M。 浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。 LocalStorage和SessionStorage 基本没区别,唯一的区别在于localstoorage是永久存储在本地,但是sessionstoryage关闭浏览器就丢失\n\n\n //接受一个键名作为参数，返回键名对应的值。\n let data = sessionStorage.getItem('key');\n let data = localStorage.getItem('key');\n\n //接受一个键名和值作为参数，将会把键值对添加到存储中，\n //如果键名存在，则更新其对应的值。\n sessionStorage .setItem('key', 'value')\n localStorage .setItem('key', 'value')\n\n //接受一个键名作为参数，并把该键名从存储中删除。\n sessionStorage .removeItem('key');\n localStorage .removeItem('key');\n\n //清空存储中的所有键名\n sessionStorage .clear()\n localStorage .clear()\n\n\n\n\n\nstorage事件： Storage 对象发生变化时（创建/更新/删除数据项时，Storage.clear() 方法至多触发一次该事件）会触发。注：在同一个页面内发生的改变不会起作用。在相同域名下的其他页面发生的改变才会起作用。(修改的页面不会触发事件，与它共享的页面会触发事件)\n\n * key : 修改或删除的key值，如果调用clear(),为null\n * newValue : 新设置的值，如果调用clear(),为null\n * oldValue : 调用改变前的value值,如果调用clear(),为null\n * url : 触发该脚本变化的文档的url\n * storageArea : 当前的storage对象\n\n\n# 三、备注：\n\n * 静态资源是不会携带cookie的\n * cookie一般都是后台种的，很少让前端来直接写\n * cookie分:持久级别、session级别\n * cookie一般用于和session通信",normalizedContent:"cookie, sessionstorage, localstorage这三者都可以被用来在浏览器端存储数据，而且都是字符串类型的键值对。\n\n\n\n# 一、cookie\n\n概念： cookie是纯文本格式，不包含任何可执行的代码信息，伴随着用户请求在 web 服务器和浏览器之间传递。cookie本质上属于http的范畴，因为http协议本身是无状态的，服务端是没有办法区分请求来自于哪个客户端，即便是来自于同一个客户端的多次请求 我们的服务端也是没有能力来区分的。就是因为http协议是无状态的，所以才需要cookie去维持客户端的状态。\n生成方式:\n\n * 客户端生成: 在 javascript 中通过 document.cookie 属性，你可以创建、维护和删除 cookie设置 。 document.cookie 属性的值并不会删除存储在页面中的所有 cookie。它只简单的创建或修改字符串中指定的 cookie。 要使用 javascript 提取 cookie 的值，只需要从 document.cookie 中读取即可。\n * 服务端生成: web 服务器通过发送一个称为 set-cookie 的 http消息头来创建一个 cookie。注： httponly， 为避免跨域脚本 (xss) 攻击，通过javascript的 document.cookie api无法访问有httponly 标记的cookie，\n\n\n缺点：\n\n * 安全性 ：由于cookie在http中是明文传递的，其中包含的数据都可以被他人访问，可能会被篡改、盗用。\n * 大小限制： cookie的大小限制在4kb左右，若要做大量存储显然不是理想的选择。\n * 增加流量： cookie每次请求都会被自动添加到request header中，无形中增加了流量。cookie信息越大，对服务器请求的时间也越长。因此要慎用cookie，不要在cookie中存储重要和敏感的数据。\n\n\n\n\n\n\n# 二、sessionstorage和localstorage\n\n概念： sessionstorage和localstorage都是本地存储,同时空间比cookie大很多，一般支持5-10m。 浏览器端通过 window.sessionstorage 和 window.localstorage 属性来实现本地存储机制。 localstorage和sessionstorage 基本没区别,唯一的区别在于localstoorage是永久存储在本地,但是sessionstoryage关闭浏览器就丢失\n\n\n //接受一个键名作为参数，返回键名对应的值。\n let data = sessionstorage.getitem('key');\n let data = localstorage.getitem('key');\n\n //接受一个键名和值作为参数，将会把键值对添加到存储中，\n //如果键名存在，则更新其对应的值。\n sessionstorage .setitem('key', 'value')\n localstorage .setitem('key', 'value')\n\n //接受一个键名作为参数，并把该键名从存储中删除。\n sessionstorage .removeitem('key');\n localstorage .removeitem('key');\n\n //清空存储中的所有键名\n sessionstorage .clear()\n localstorage .clear()\n\n\n\n\n\nstorage事件： storage 对象发生变化时（创建/更新/删除数据项时，storage.clear() 方法至多触发一次该事件）会触发。注：在同一个页面内发生的改变不会起作用。在相同域名下的其他页面发生的改变才会起作用。(修改的页面不会触发事件，与它共享的页面会触发事件)\n\n * key : 修改或删除的key值，如果调用clear(),为null\n * newvalue : 新设置的值，如果调用clear(),为null\n * oldvalue : 调用改变前的value值,如果调用clear(),为null\n * url : 触发该脚本变化的文档的url\n * storagearea : 当前的storage对象\n\n\n# 三、备注：\n\n * 静态资源是不会携带cookie的\n * cookie一般都是后台种的，很少让前端来直接写\n * cookie分:持久级别、session级别\n * cookie一般用于和session通信",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675751906e3},{title:"React起步",frontmatter:{title:"React起步",permalink:"/pages/3eb294/",date:"2022-10-28T00:00:00.000Z",tags:["React"]},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/20.React%E5%AD%A6%E4%B9%A01.html",relativePath:"01.前端/01.学过的习/20.React学习1.md",key:"v-5074f853",path:"/pages/3eb294/",headers:[{level:2,title:"React概念",slug:"react概念",normalizedTitle:"react概念",charIndex:2},{level:2,title:"虚拟DOM",slug:"虚拟dom",normalizedTitle:"虚拟dom",charIndex:224},{level:2,title:"JSX的使用",slug:"jsx的使用",normalizedTitle:"jsx的使用",charIndex:467}],headersStr:"React概念 虚拟DOM JSX的使用",content:"# React概念\n\nReact是用于动态构建用户界面的 JavaScript 库，由Facebook开源。之所以能被称为框架，是因为基于这个库，形成了一个庞大的生态，解决了一系列的成型的问题。 主要特点：\n\n * 1.声明式编码（相对于命令式编码，提高了开发效率）\n * 2.组件化编码\n * 3.React Native 编写原生应用\n * 4.高效（使用虚拟dom和diffing算法，减少dom反复更新和浏览器的重绘重排）\n   \n\n\n# 虚拟DOM\n\n虚拟DOM是一个JS的对象，由React.createElement('xx',{id:'xx'},'xx')创建，真实的DOM是由Document.createElement('xx',{id:'xx'},'xx')创建， 主要目的是方便React去操作真实DOM，并且虚拟DOM比较“轻”，真实DOM比较“重”，因为虚拟DOM是给react用的,无需那么多的属性。 本质上都是对象，真实DOM包含了节点的ONXXX等事件，虚拟的DOM并不需要，所以比较轻。\n\n\n\n# JSX的使用\n\nJSX是JavaScript XML的缩写，是React中定义的一种类似于XML的标记型语言，用于简化创建虚拟DOM，本质是React.createElement(component, props, ...children)方法的语法糖； 使用方法：\n\n 1.创建虚拟DOM\n    let ID = 'RecaT'\n    let Data = 'testData'\n    const VDOM = (\n        <div>\n            <h2 id={ID.toLowerCase()} className=\"demo\"> \n                <span>{Data.toUpperCase()}</span>\n            </h2>\n            <h2 style={{backgroundColor:'skyblue',color:'red'}}>hello,test</h2>\n            <input type=\"text\"/>\n        </div>\n    )\n    \n    *demo为样式标签的demo样式；\n\n2.渲染虚拟DOM到页面\n    ReactDOM.render(VDOM,document.getElementById('xxx'))\n\n\njsx的语法规则：\n\n * 1.创建虚拟DOM时，不要用引号，直接使用标签，为了样式美观，可以加一个括号\n * 2.标签中的js表达式，需要用{}包裹。（表达式需要有返回值）\n * 3.根标签必须只有一个\n * 4.标签必须闭合\n * *5.样式的类名，不要用class，必须用className\n * 6.内联的样式要用 style={{}}形式去写\n * 7.标签可以随意的编写：\n   * (1).若标签首字母是【小写】的，则react会尝试将当前的jsx标签对应成一个html标签，若对应成了，直接渲染，展示；若无法对应，直接报错！\n   * (2).若标签首字母是【大写】的，则react会查找Xxx组件的定义的位置，若找见了，直接渲染Xxx组件；若未找见，报错(Xxx is not defined)\n\n注： 使用JSX语法的时候，要在Script标签上加上type=\"text/babel\", 声明需要babel来处理",normalizedContent:"# react概念\n\nreact是用于动态构建用户界面的 javascript 库，由facebook开源。之所以能被称为框架，是因为基于这个库，形成了一个庞大的生态，解决了一系列的成型的问题。 主要特点：\n\n * 1.声明式编码（相对于命令式编码，提高了开发效率）\n * 2.组件化编码\n * 3.react native 编写原生应用\n * 4.高效（使用虚拟dom和diffing算法，减少dom反复更新和浏览器的重绘重排）\n   \n\n\n# 虚拟dom\n\n虚拟dom是一个js的对象，由react.createelement('xx',{id:'xx'},'xx')创建，真实的dom是由document.createelement('xx',{id:'xx'},'xx')创建， 主要目的是方便react去操作真实dom，并且虚拟dom比较“轻”，真实dom比较“重”，因为虚拟dom是给react用的,无需那么多的属性。 本质上都是对象，真实dom包含了节点的onxxx等事件，虚拟的dom并不需要，所以比较轻。\n\n\n\n# jsx的使用\n\njsx是javascript xml的缩写，是react中定义的一种类似于xml的标记型语言，用于简化创建虚拟dom，本质是react.createelement(component, props, ...children)方法的语法糖； 使用方法：\n\n 1.创建虚拟dom\n    let id = 'recat'\n    let data = 'testdata'\n    const vdom = (\n        <div>\n            <h2 id={id.tolowercase()} classname=\"demo\"> \n                <span>{data.touppercase()}</span>\n            </h2>\n            <h2 style={{backgroundcolor:'skyblue',color:'red'}}>hello,test</h2>\n            <input type=\"text\"/>\n        </div>\n    )\n    \n    *demo为样式标签的demo样式；\n\n2.渲染虚拟dom到页面\n    reactdom.render(vdom,document.getelementbyid('xxx'))\n\n\njsx的语法规则：\n\n * 1.创建虚拟dom时，不要用引号，直接使用标签，为了样式美观，可以加一个括号\n * 2.标签中的js表达式，需要用{}包裹。（表达式需要有返回值）\n * 3.根标签必须只有一个\n * 4.标签必须闭合\n * *5.样式的类名，不要用class，必须用classname\n * 6.内联的样式要用 style={{}}形式去写\n * 7.标签可以随意的编写：\n   * (1).若标签首字母是【小写】的，则react会尝试将当前的jsx标签对应成一个html标签，若对应成了，直接渲染，展示；若无法对应，直接报错！\n   * (2).若标签首字母是【大写】的，则react会查找xxx组件的定义的位置，若找见了，直接渲染xxx组件；若未找见，报错(xxx is not defined)\n\n注： 使用jsx语法的时候，要在script标签上加上type=\"text/babel\", 声明需要babel来处理",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1668764429e3},{title:"React的基本使用",frontmatter:{title:"React的基本使用",permalink:"/pages/a87c4e/",date:"2022-11-1",tags:["React"]},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/21.React%E5%AD%A6%E4%B9%A02.html",relativePath:"01.前端/01.学过的习/21.React学习2.md",key:"v-4afec253",path:"/pages/a87c4e/",headers:[{level:2,title:"React的组件定义方式",slug:"react的组件定义方式",normalizedTitle:"react的组件定义方式",charIndex:2},{level:2,title:"React的state属性：",slug:"react的state属性",normalizedTitle:"react的state属性：",charIndex:930},{level:2,title:"React的props属性",slug:"react的props属性",normalizedTitle:"react的props属性",charIndex:2658},{level:2,title:"React的refs属性",slug:"react的refs属性",normalizedTitle:"react的refs属性",charIndex:4023},{level:2,title:"React的生命周期（V16.4^）",slug:"react的生命周期-v16-4",normalizedTitle:"react的生命周期（v16.4^）",charIndex:5849}],headersStr:"React的组件定义方式 React的state属性： React的props属性 React的refs属性 React的生命周期（V16.4^）",content:"# React的组件定义方式\n\n1.函数式组件\n\n定义函数（名字大写，后续组件名字大写才会查询自定义组件，否则是当标签查询）\nfunction MyComponent1(){\n    console.log(this); //此处的this是undefined，因为经过babel的编译后，开启了严格模式。\n    return <h2>函数式组件</h2>\n}\n\n渲染组件到页面\nReactDOM.render(<MyComponent1/>,document.getElementById('xxx'))\n\n执行了ReactDOM.render后：\n    1.React获取<MyComponent1/>标签，判断出MyComponent是用函数定义的。\n    2.React调用MyComponent1并获取函数的返回的虚拟DOM，随后转为真实DOM，随后渲染到页面。\n    \n注：由于处于React+babel环境，开启的严格模式。函数中无法使用this\n\n\n\n2.类式组件\n\n1、定义组件\nclass MyComponent extends React.Component{\n\n    //render是MyComponent的原型对象上，给MyComponent的实例对象用的。\n    render(){\n        console.log(this); //MyComponent的实例对象\n        return <h2>类式组件</h2>\n    }\n}\n\n2、渲染组件到页面\nReactDOM.render(<MyComponent/>,document.getElementById('test'))\n\n执行了ReactDOM.render后：\n    1.React获取<MyComponent/>标签，判断MyComponent是用类定义的。\n    2.React new了一个MyComponent实例对象\n    3.通过实例调用MyComponent原型上的render方法，并获取到了返回的虚拟DOM，转为真实DOM，渲染页面。\n    \n注：render中是可以获取到实例的this的\n\n\n\n\n\n\n\n# React的state属性：\n\n1、简单写法（this指向问题需要手动解决）\n\nclass MyComponent extends React.Component{\n    //组件被实例化几次，就调用几次构造器\n    constructor(props){\n        super(props)\n        this.state = {showTest:'显示',other:'测试'} //初始化状态\n        //构造器中的this指向实例化对象，将changeTest的this绑定实例化对象并将函数赋值给实例化的对象的changeTest属性，\n          所以后面调用的changeTest并不是原型上的，是实例化对象上面的属性。\n        this.changeTest = this.changeTest.bind(this) //解决this指向问题\n    }\n    \n    changeTest(){\n        //若构造器中不做处理，那么下面的this是undefined，因为changeTest不是通过实例调用的,\n          而是作为点击的回调去使用，且类中的方法自动开启了严格模式。\n        //更新状态，不能直接获取状态并赋值，不然不会去触发render调用的！！！\n        this.setState({showTest:'更改了'}) //此处更新状态是一个合并的动作，不是替换\n    }\n    \n    //render调用次数是1+n次（n是更新状态的次数，每次状态的更改都要重新更改虚拟DOM）\n    render(){\n        //这里将函数给onClick回调事件，并没有在这里调用函数，所以changeTest中的this不是实例化对象。\n        return <h1 onClick={this.changeTest}>\n                  this is test state,{this.state.showTest}，{this.state.other}\n               </h1>\n    }\n}\n\n\n\n2、常用方法，利用箭头函数解决this的指向问题\n\nclass MyComponent extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.state = {showTest:'显示',other:'测试'} //初始化状态\n    }\n    \n    //使用箭头函数解决this指向问题，箭头函数的this在定义的时候由同外部环境\n    changeTest = ()=>{\n         this.setState({showTest:'更改了'})\n    }\n    \n    render(){\n        //这里将函数给onClick回调事件，并没有在这里调用函数，所以changeTest中的this不是实例化对象。\n        return <h1 onClick={this.changeTest}>this is test state,{this.state.showTest}，{this.state.other}</h1>\n    }\n}\n\n\n\n\n注： 原生JS中绑定函数，是将函数绑定，react的绑定的函数，是将函数的返回值提交绑定\n\njsx:\n<h1 onClick={this.changeTest}>this is test state,{this.state.showTest}，{this.state.other}</h1>\n\njs:事件名大小写不同，并且绑定的方式不同，\n   原生中不会执行changeTest()这个函数,但是jsx中加括号会执行函数，绑定返回值。\n<h1 onclick='this.changeTest()'>this is test state</h1>\n\n\n\n\n\n\n\n# React的props属性\n\nclass Person extends React.Component{\n\n    //对传给Person组件的props进行类型的限制\n    static propTypes = {\n        name:PropTypes.string, //限制name必须为字符串类型\n     ** sex:PropTypes.string.isRequired,//限制sex必须为字符串类型，且是必要属性\n        age:PropTypes.number,//限制age必须为数值类型\n        address:PropTypes.string, //限制address必须为字符串类型\n    }\n    \n    //对传给Person组件的props进行默认值的设置\n    static defaultProps = {\n        address:'中国'\n    }\n    \n    render(){\n        const {name,age,sex,address} = this.props\n        return (\n            <ul>\n                <li>姓名：{name}</li>\n                <li>性别：{sex}</li>\n                <li>年龄：{age+1}</li>\n                <li>地址：{address}</li>\n            </ul>\n        )\n    }\n}\n\n//渲染组件\nReactDOM.render(<Person name=\"tom\" sex=\"女\" age=\"18\"/>,document.getElementById('XXX'))\n\nconst p1 = {\n    name:'程老师',\n    sex:'男',\n    age:19,\n    address:\"北七家镇\"\n}\n\n//下面的...p1，并不是原生js里的{...p1}，{}是jsx的写法要求\n//babel+react环境就可以让展开运算符展开一个对象，但是仅仅适用于传递标签属性！！\nReactDOM.render(<Person {...p1}/>,document.getElementById('XXX'))\n\n\n//高级用法，利用prop传递一个箭头函数（用于子组件传递参数给父组件）\nupdateAppState = (stateObj)=>{\n    this.setState(stateObj)\n}\n\nrender() {\n    return (\n        <div className=\"container\">\n            //将更新的函数通过prop传递给子组件\n            <Search updateAppState={this.updateAppState}/>\n        </div>\n    )\n}\n\n//子组件中通过调用prop的函数进行传参\nthis.props.updateAppState({...})\n\n\n\n\n\n\n\n\n# React的refs属性\n\n1、字符串类型的Refs，标记了ref的节点可以直接通过refs属性获取。（官方不建议继续使用，论坛显示有效率问题）\n\nclass Test extends React.Component{\n\n    //箭头函数解决this指向问题\n    showData = ()=>{\n        //获取用户的输入,inputRef是真实DOM节点！！\n        const {inputRef} = this.refs\n        //提示数据\n        alert(inputRef.value)\n    }\n    \n    render(){\n        return (\n            <div>\n                <input ref=\"inputRef\" type=\"text\" placeholder=\"点击按钮提示输入\"/>&nbsp;\n                <button onClick={this.showData}>点我提示数据</button>\n            </div>\n        )\n    }\n}\n\n\n\n2、回调形式的ref,在ref中传入回调函数，函数的形参默认就是当前节点ref，直接绑定ref（形参）到实例的属性上。\n\nclass Demo extends React.Component{\n    \n    showData = ()=>{\n        //获取用户的输入,input1是真实DOM节点！！\n        const {inputRef} = this\n        //提示数据\n        alert(inputRef.value)\n    }\n    \n    render(){\n        return (\n            <div>\n                <input ref={c => this.inputRef = c} type=\"text\" placeholder=\"点击按钮提示输入\"/>&nbsp;\n                <button onClick={this.showData}>点我提示数据</button>\n            </div>\n        )\n    }\n    }\n\n\n\n3、createRef创建ref,类中直接使用React.createRef()创建容器，虚拟节点上直接使用ref指向容器即可\n\nclass Demo extends React.Component{\n\n    //使用createRef，可以创建一个存储节点的容器，并且每个容器只能存储一个ref节点，多个ref需要多次创建。\n    container1 = React.createRef()\n    container2 = React.createRef()\n\n    showData = ()=>{\n        const {current} = this.container1\n        alert(current.value)\n    }\n    \n    showData2 = ()=>{\n        const {current} = this.container2\n        alert(current.value)\n    }\n    \n    render(){\n        return (\n            <div>\n                <input ref={this.container1} onBlur={this.showData1} type=\"text\"/>\n                <input ref={this.container2} onBlur={this.showData2} type=\"text\"/>\n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\n注：\n1.类式组件中的构造器，完全可以省略掉\n2.若在类式组件中写了构造器，那就必须调用super,调用super时，如果不传props，那么在构造器中，通过this.props是不可以访问props的\n\n\n\n\n\n# React的生命周期（V16.4^）\n\n//定义组件\nclass LifeHoook extends React.Component{\n\n    //构造器\n    constructor(){\n        console.log('---constructor---');\n        super()\n        this.state = {count:0}\n    }\n\n    //更改状态\n    add = ()=>{\n        const {count} = this.state\n        this.setState({count:count+1})\n    }\n\n    //卸载的回调\n    death = ()=>{\n        ReactDOM.unmountComponentAtNode(document.getElementById('test'))\n    }\n\n    //强制更新的回调\n    force = ()=>{\n        this.forceUpdate()\n    }\n    \n    //会在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。\n    //它应返回一个对象来更新 state，如果返回 null 则不更新任何内容。\n    static getDerivedStateFromProps(props,state){\n        console.log('---getDerivedStateFromProps---',props,state)\n        return null\n    }\n    \n    //在最近一次渲染输出（提交到 DOM 节点）之前调用。\n    //它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。\n    //此生命周期方法的任何返回值将作为参数传递给 componentDidUpdate()。\n    getSnapshotBeforeUpdate(prevProps, prevState){\n        console.log('---getSnapshotBeforeUpdate---',prevProps, prevState)\n        return null\n    }\n    \n    //组件更新完毕----调用n次，n是更新的次数,会在更新后会被立即调用。首次渲染不会执行此方法。\n    componentDidUpdate(prevProps, prevState, snapshot){\n        console.log('---componentDidUpdate----',prevProps, prevState, snapshot);\n    }\n    \n    //组件将要挂载---调1次\n    UNSAFE_componentWillMount(){\n        console.log('---componentWillMount---');\n    }\n\n    //组件挂载完毕---调1次,会在组件挂载后（插入 DOM 树中）立即调用。\n    //依赖于 DOM 节点的初始化应该放在这里。如需通过网络请求获取数据，此处是实例化请求的好地方。\n    componentDidMount(){\n        console.log('---componentDidMount---');\n    }\n\n    //组件将要卸载---调1次,在此方法中执行必要的清理操作。\n    //例如，清除 timer，取消网络请求或清除在 componentDidMount() 中创建的订阅等。\n    componentWillUnmount(){\n        console.log('---componentWillUnmount---');\n    }\n    \n    //组件更新的“阀门”\n    shouldComponentUpdate(){\n        console.log('---shouldComponentUpdate---');\n        return true\n    }\n\n    //组件将要更新----调用n次，n是更新的次数\n    UNSAFE_componentWillUpdate(){\n        console.log('---componentWillUpdate---');\n    }\n\n    UNSAFE_componentWillReceiveProps(){\n        console.log('---componentWillReceiveProps---');\n    }\n    \n    //组件初次渲染+更新---调1+n次\n    render(){\n        console.log('---render---');\n        return(\n            <div>\n                <h2>当前状态为：{this.state.count}</h2>\n                <button onClick={this.add}>更改状态</button>\n                <button onClick={this.death}>卸载组件</button>\n                <button onClick={this.force}>强制更新</button>\n            </div>\n        )\n    }\n}\n\n//渲染组件\nReactDOM.render(<LifeHoook/>,document.getElementById('XXX'))\n\n\n\n注： 下述生命周期方法即将过时，在新代码中应该避免使用它们；因为这些生命周期方法经常被误解和滥用，此外，预计在异步渲染中，它们潜在的误用问题可能更大\n\n * UNSAFE_componentWillMount()\n * UNSAFE_componentWillUpdate()\n * UNSAFE_componentWillReceiveProps()",normalizedContent:"# react的组件定义方式\n\n1.函数式组件\n\n定义函数（名字大写，后续组件名字大写才会查询自定义组件，否则是当标签查询）\nfunction mycomponent1(){\n    console.log(this); //此处的this是undefined，因为经过babel的编译后，开启了严格模式。\n    return <h2>函数式组件</h2>\n}\n\n渲染组件到页面\nreactdom.render(<mycomponent1/>,document.getelementbyid('xxx'))\n\n执行了reactdom.render后：\n    1.react获取<mycomponent1/>标签，判断出mycomponent是用函数定义的。\n    2.react调用mycomponent1并获取函数的返回的虚拟dom，随后转为真实dom，随后渲染到页面。\n    \n注：由于处于react+babel环境，开启的严格模式。函数中无法使用this\n\n\n\n2.类式组件\n\n1、定义组件\nclass mycomponent extends react.component{\n\n    //render是mycomponent的原型对象上，给mycomponent的实例对象用的。\n    render(){\n        console.log(this); //mycomponent的实例对象\n        return <h2>类式组件</h2>\n    }\n}\n\n2、渲染组件到页面\nreactdom.render(<mycomponent/>,document.getelementbyid('test'))\n\n执行了reactdom.render后：\n    1.react获取<mycomponent/>标签，判断mycomponent是用类定义的。\n    2.react new了一个mycomponent实例对象\n    3.通过实例调用mycomponent原型上的render方法，并获取到了返回的虚拟dom，转为真实dom，渲染页面。\n    \n注：render中是可以获取到实例的this的\n\n\n\n\n\n\n\n# react的state属性：\n\n1、简单写法（this指向问题需要手动解决）\n\nclass mycomponent extends react.component{\n    //组件被实例化几次，就调用几次构造器\n    constructor(props){\n        super(props)\n        this.state = {showtest:'显示',other:'测试'} //初始化状态\n        //构造器中的this指向实例化对象，将changetest的this绑定实例化对象并将函数赋值给实例化的对象的changetest属性，\n          所以后面调用的changetest并不是原型上的，是实例化对象上面的属性。\n        this.changetest = this.changetest.bind(this) //解决this指向问题\n    }\n    \n    changetest(){\n        //若构造器中不做处理，那么下面的this是undefined，因为changetest不是通过实例调用的,\n          而是作为点击的回调去使用，且类中的方法自动开启了严格模式。\n        //更新状态，不能直接获取状态并赋值，不然不会去触发render调用的！！！\n        this.setstate({showtest:'更改了'}) //此处更新状态是一个合并的动作，不是替换\n    }\n    \n    //render调用次数是1+n次（n是更新状态的次数，每次状态的更改都要重新更改虚拟dom）\n    render(){\n        //这里将函数给onclick回调事件，并没有在这里调用函数，所以changetest中的this不是实例化对象。\n        return <h1 onclick={this.changetest}>\n                  this is test state,{this.state.showtest}，{this.state.other}\n               </h1>\n    }\n}\n\n\n\n2、常用方法，利用箭头函数解决this的指向问题\n\nclass mycomponent extends react.component{\n\n    constructor(props){\n        super(props)\n        this.state = {showtest:'显示',other:'测试'} //初始化状态\n    }\n    \n    //使用箭头函数解决this指向问题，箭头函数的this在定义的时候由同外部环境\n    changetest = ()=>{\n         this.setstate({showtest:'更改了'})\n    }\n    \n    render(){\n        //这里将函数给onclick回调事件，并没有在这里调用函数，所以changetest中的this不是实例化对象。\n        return <h1 onclick={this.changetest}>this is test state,{this.state.showtest}，{this.state.other}</h1>\n    }\n}\n\n\n\n\n注： 原生js中绑定函数，是将函数绑定，react的绑定的函数，是将函数的返回值提交绑定\n\njsx:\n<h1 onclick={this.changetest}>this is test state,{this.state.showtest}，{this.state.other}</h1>\n\njs:事件名大小写不同，并且绑定的方式不同，\n   原生中不会执行changetest()这个函数,但是jsx中加括号会执行函数，绑定返回值。\n<h1 onclick='this.changetest()'>this is test state</h1>\n\n\n\n\n\n\n\n# react的props属性\n\nclass person extends react.component{\n\n    //对传给person组件的props进行类型的限制\n    static proptypes = {\n        name:proptypes.string, //限制name必须为字符串类型\n     ** sex:proptypes.string.isrequired,//限制sex必须为字符串类型，且是必要属性\n        age:proptypes.number,//限制age必须为数值类型\n        address:proptypes.string, //限制address必须为字符串类型\n    }\n    \n    //对传给person组件的props进行默认值的设置\n    static defaultprops = {\n        address:'中国'\n    }\n    \n    render(){\n        const {name,age,sex,address} = this.props\n        return (\n            <ul>\n                <li>姓名：{name}</li>\n                <li>性别：{sex}</li>\n                <li>年龄：{age+1}</li>\n                <li>地址：{address}</li>\n            </ul>\n        )\n    }\n}\n\n//渲染组件\nreactdom.render(<person name=\"tom\" sex=\"女\" age=\"18\"/>,document.getelementbyid('xxx'))\n\nconst p1 = {\n    name:'程老师',\n    sex:'男',\n    age:19,\n    address:\"北七家镇\"\n}\n\n//下面的...p1，并不是原生js里的{...p1}，{}是jsx的写法要求\n//babel+react环境就可以让展开运算符展开一个对象，但是仅仅适用于传递标签属性！！\nreactdom.render(<person {...p1}/>,document.getelementbyid('xxx'))\n\n\n//高级用法，利用prop传递一个箭头函数（用于子组件传递参数给父组件）\nupdateappstate = (stateobj)=>{\n    this.setstate(stateobj)\n}\n\nrender() {\n    return (\n        <div classname=\"container\">\n            //将更新的函数通过prop传递给子组件\n            <search updateappstate={this.updateappstate}/>\n        </div>\n    )\n}\n\n//子组件中通过调用prop的函数进行传参\nthis.props.updateappstate({...})\n\n\n\n\n\n\n\n\n# react的refs属性\n\n1、字符串类型的refs，标记了ref的节点可以直接通过refs属性获取。（官方不建议继续使用，论坛显示有效率问题）\n\nclass test extends react.component{\n\n    //箭头函数解决this指向问题\n    showdata = ()=>{\n        //获取用户的输入,inputref是真实dom节点！！\n        const {inputref} = this.refs\n        //提示数据\n        alert(inputref.value)\n    }\n    \n    render(){\n        return (\n            <div>\n                <input ref=\"inputref\" type=\"text\" placeholder=\"点击按钮提示输入\"/>&nbsp;\n                <button onclick={this.showdata}>点我提示数据</button>\n            </div>\n        )\n    }\n}\n\n\n\n2、回调形式的ref,在ref中传入回调函数，函数的形参默认就是当前节点ref，直接绑定ref（形参）到实例的属性上。\n\nclass demo extends react.component{\n    \n    showdata = ()=>{\n        //获取用户的输入,input1是真实dom节点！！\n        const {inputref} = this\n        //提示数据\n        alert(inputref.value)\n    }\n    \n    render(){\n        return (\n            <div>\n                <input ref={c => this.inputref = c} type=\"text\" placeholder=\"点击按钮提示输入\"/>&nbsp;\n                <button onclick={this.showdata}>点我提示数据</button>\n            </div>\n        )\n    }\n    }\n\n\n\n3、createref创建ref,类中直接使用react.createref()创建容器，虚拟节点上直接使用ref指向容器即可\n\nclass demo extends react.component{\n\n    //使用createref，可以创建一个存储节点的容器，并且每个容器只能存储一个ref节点，多个ref需要多次创建。\n    container1 = react.createref()\n    container2 = react.createref()\n\n    showdata = ()=>{\n        const {current} = this.container1\n        alert(current.value)\n    }\n    \n    showdata2 = ()=>{\n        const {current} = this.container2\n        alert(current.value)\n    }\n    \n    render(){\n        return (\n            <div>\n                <input ref={this.container1} onblur={this.showdata1} type=\"text\"/>\n                <input ref={this.container2} onblur={this.showdata2} type=\"text\"/>\n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\n注：\n1.类式组件中的构造器，完全可以省略掉\n2.若在类式组件中写了构造器，那就必须调用super,调用super时，如果不传props，那么在构造器中，通过this.props是不可以访问props的\n\n\n\n\n\n# react的生命周期（v16.4^）\n\n//定义组件\nclass lifehoook extends react.component{\n\n    //构造器\n    constructor(){\n        console.log('---constructor---');\n        super()\n        this.state = {count:0}\n    }\n\n    //更改状态\n    add = ()=>{\n        const {count} = this.state\n        this.setstate({count:count+1})\n    }\n\n    //卸载的回调\n    death = ()=>{\n        reactdom.unmountcomponentatnode(document.getelementbyid('test'))\n    }\n\n    //强制更新的回调\n    force = ()=>{\n        this.forceupdate()\n    }\n    \n    //会在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。\n    //它应返回一个对象来更新 state，如果返回 null 则不更新任何内容。\n    static getderivedstatefromprops(props,state){\n        console.log('---getderivedstatefromprops---',props,state)\n        return null\n    }\n    \n    //在最近一次渲染输出（提交到 dom 节点）之前调用。\n    //它使得组件能在发生更改之前从 dom 中捕获一些信息（例如，滚动位置）。\n    //此生命周期方法的任何返回值将作为参数传递给 componentdidupdate()。\n    getsnapshotbeforeupdate(prevprops, prevstate){\n        console.log('---getsnapshotbeforeupdate---',prevprops, prevstate)\n        return null\n    }\n    \n    //组件更新完毕----调用n次，n是更新的次数,会在更新后会被立即调用。首次渲染不会执行此方法。\n    componentdidupdate(prevprops, prevstate, snapshot){\n        console.log('---componentdidupdate----',prevprops, prevstate, snapshot);\n    }\n    \n    //组件将要挂载---调1次\n    unsafe_componentwillmount(){\n        console.log('---componentwillmount---');\n    }\n\n    //组件挂载完毕---调1次,会在组件挂载后（插入 dom 树中）立即调用。\n    //依赖于 dom 节点的初始化应该放在这里。如需通过网络请求获取数据，此处是实例化请求的好地方。\n    componentdidmount(){\n        console.log('---componentdidmount---');\n    }\n\n    //组件将要卸载---调1次,在此方法中执行必要的清理操作。\n    //例如，清除 timer，取消网络请求或清除在 componentdidmount() 中创建的订阅等。\n    componentwillunmount(){\n        console.log('---componentwillunmount---');\n    }\n    \n    //组件更新的“阀门”\n    shouldcomponentupdate(){\n        console.log('---shouldcomponentupdate---');\n        return true\n    }\n\n    //组件将要更新----调用n次，n是更新的次数\n    unsafe_componentwillupdate(){\n        console.log('---componentwillupdate---');\n    }\n\n    unsafe_componentwillreceiveprops(){\n        console.log('---componentwillreceiveprops---');\n    }\n    \n    //组件初次渲染+更新---调1+n次\n    render(){\n        console.log('---render---');\n        return(\n            <div>\n                <h2>当前状态为：{this.state.count}</h2>\n                <button onclick={this.add}>更改状态</button>\n                <button onclick={this.death}>卸载组件</button>\n                <button onclick={this.force}>强制更新</button>\n            </div>\n        )\n    }\n}\n\n//渲染组件\nreactdom.render(<lifehoook/>,document.getelementbyid('xxx'))\n\n\n\n注： 下述生命周期方法即将过时，在新代码中应该避免使用它们；因为这些生命周期方法经常被误解和滥用，此外，预计在异步渲染中，它们潜在的误用问题可能更大\n\n * unsafe_componentwillmount()\n * unsafe_componentwillupdate()\n * unsafe_componentwillreceiveprops()",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675742318e3},{title:"vue中attrs和listeners的使用",frontmatter:{title:"vue中attrs和listeners的使用",date:"2023-07-31T00:00:00.000Z",permalink:"/pages/07bbe9/",tags:["vue"]},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/27.vue%E4%B8%AD$attrs%E5%92%8C$listeners%E7%9A%84%E4%BD%BF%E7%94%A8.html",relativePath:"01.前端/01.学过的习/27.vue中$attrs和$listeners的使用.md",key:"v-937cc918",path:"/pages/07bbe9/",headers:[{level:2,title:"vue中$attrs和$listeners具体使用",slug:"vue中-attrs和-listeners具体使用",normalizedTitle:"vue中$attrs和$listeners具体使用",charIndex:2},{level:3,title:'一、v-bind="$attrs"的使用',slug:"一、v-bind-attrs-的使用",normalizedTitle:"一、v-bind=&quot;$attrs&quot;的使用",charIndex:null},{level:3,title:"二、v-on=$listeners的使用",slug:"二、v-on-listeners的使用",normalizedTitle:"二、v-on=$listeners的使用",charIndex:1411}],headersStr:'vue中$attrs和$listeners具体使用 一、v-bind="$attrs"的使用 二、v-on=$listeners的使用',content:'# vue中$attrs和$listeners具体使用\n\n\n# 一、v-bind="$attrs"的使用\n\n在Vue中，组件上使用v-bind="$attrs"是一种特殊的用法，它用于将父组件传递给子组件的非声明属性（non-prop attributes）传递给子组件的根元素。\n当父组件向子组件传递属性时，子组件可以通过$attrs来获取这些未被声明为props的属性。\n比如我们在封装组件的时候，有时候会基于原生的组件进行封装。但是我们不会将原生组件所有的属性都一一列出来，通过props进行传递。 这时候，可以在封装的时候，在原生的组件上声明v-bind="$attrs"；这样在使用我们自己封装的组件的时候，可以给原生组件传特有的prop，不需要在我们封装的组件中一一申明；\nMyButton:\n\n<template>\n  <button\n    :class="buttonClass"\n    :style="buttonStyle"\n    @click="handleClick"\n    v-bind="$attrs"\n  >\n    \x3c!-- v-bind="$attrs" 将所有未知的属性传递给原生button元素 --\x3e\n    {{ label }}\n  </button>\n</template>\n\n<script>\nexport default {\n  name:\'MyButton\',\n  props: {\n    label: {\n      type: String,\n      required: true,\n    },\n    buttonClass: {\n      type: String,\n      default: "default-button-class",\n    },\n    buttonStyle: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  methods: {\n    handleClick() {\n      this.$emit("click"); // 触发自定义的click事件\n    },\n  },\n};\n<\/script>\n\n\n这样我们在使用组件的时候，可以传递组件没有定义的prop属性，这些属性是原生button上面的。比如下面的disabled属性就是如此！\n使用自定义组件：\n\n<template>\n  <div>\n    <MyButton\n      label="Click Me"\n      buttonClass="custom-button-class"\n      :disabled="true"\n      data-custom-attribute="Hello, Button!"\n    />\n  </div>\n</template>\n\n<script>\nimport MyButton from \'./MyButton.vue\';\n\nexport default {\n  components: {\n    MyButton,\n  },\n  data() {\n    return {\n      isButtonDisabled: true,\n    };\n  },\n};\n<\/script>\n\n\n\n\n\n\n# 二、v-on=$listeners的使用\n\nv-on=$listeners提供了一种在组件之间传递事件监听器的便捷方法。通过$listeners，您可以将父组件上的所有事件监听器传递给子组件，使子组件能够在其内部的元素上注册这些事件监听器。\n比如我们在基于原生或者其他UI组件库进行封装组件的时候，可以避免$emit去传递事件，比如在使用elementUI的el-select组件的时候，我们可以通过这种方法直接绑定change事件！！\nMyButton:\n\n\n<template>\n  <button v-on="$listeners" :class="buttonClass">\n    {{ label }}\n  </button>\n</template>\n\n<script>\nexport default {\n  name:\'MyButton\',\n  inheritAttrs: false, // 防止$attrs被自动添加到根元素\n  props: {\n    label: {\n      type: String,\n      required: true,\n    },\n    buttonClass: {\n      type: String,\n      default: "default-button-class",\n    },\n  },\n};\n<\/script>\n\n\n\n\n\n这样我们在使用自定义组件的时候，就可以不用emit去触发事件。通过使用$listeners，我们可以更加灵活地编写组件，将事件监听器传递给内部元素或子组件，从而使组件在行为上保持一致。\n\n<template>\n  <div>\n    <MyButton\n      label="Click Me"\n      :class="customButtonClass"\n      @click="handleClick"\n      @mouseover="handleMouseOver"\n    />\n  </div>\n</template>\n\n<script>\nimport MyButton from \'./MyButton.vue\';\n\nexport default {\n  components: {\n    MyButton,\n  },\n  data() {\n    return {\n      customButtonClass: "custom-button-class",\n    };\n  },\n  methods: {\n    handleClick() {\n      alert("Button clicked!");\n    },\n    handleMouseOver() {\n      console.log("Mouse over the button!");\n    },\n  },\n};\n<\/script>\n\n',normalizedContent:'# vue中$attrs和$listeners具体使用\n\n\n# 一、v-bind="$attrs"的使用\n\n在vue中，组件上使用v-bind="$attrs"是一种特殊的用法，它用于将父组件传递给子组件的非声明属性（non-prop attributes）传递给子组件的根元素。\n当父组件向子组件传递属性时，子组件可以通过$attrs来获取这些未被声明为props的属性。\n比如我们在封装组件的时候，有时候会基于原生的组件进行封装。但是我们不会将原生组件所有的属性都一一列出来，通过props进行传递。 这时候，可以在封装的时候，在原生的组件上声明v-bind="$attrs"；这样在使用我们自己封装的组件的时候，可以给原生组件传特有的prop，不需要在我们封装的组件中一一申明；\nmybutton:\n\n<template>\n  <button\n    :class="buttonclass"\n    :style="buttonstyle"\n    @click="handleclick"\n    v-bind="$attrs"\n  >\n    \x3c!-- v-bind="$attrs" 将所有未知的属性传递给原生button元素 --\x3e\n    {{ label }}\n  </button>\n</template>\n\n<script>\nexport default {\n  name:\'mybutton\',\n  props: {\n    label: {\n      type: string,\n      required: true,\n    },\n    buttonclass: {\n      type: string,\n      default: "default-button-class",\n    },\n    buttonstyle: {\n      type: object,\n      default: () => ({}),\n    },\n  },\n  methods: {\n    handleclick() {\n      this.$emit("click"); // 触发自定义的click事件\n    },\n  },\n};\n<\/script>\n\n\n这样我们在使用组件的时候，可以传递组件没有定义的prop属性，这些属性是原生button上面的。比如下面的disabled属性就是如此！\n使用自定义组件：\n\n<template>\n  <div>\n    <mybutton\n      label="click me"\n      buttonclass="custom-button-class"\n      :disabled="true"\n      data-custom-attribute="hello, button!"\n    />\n  </div>\n</template>\n\n<script>\nimport mybutton from \'./mybutton.vue\';\n\nexport default {\n  components: {\n    mybutton,\n  },\n  data() {\n    return {\n      isbuttondisabled: true,\n    };\n  },\n};\n<\/script>\n\n\n\n\n\n\n# 二、v-on=$listeners的使用\n\nv-on=$listeners提供了一种在组件之间传递事件监听器的便捷方法。通过$listeners，您可以将父组件上的所有事件监听器传递给子组件，使子组件能够在其内部的元素上注册这些事件监听器。\n比如我们在基于原生或者其他ui组件库进行封装组件的时候，可以避免$emit去传递事件，比如在使用elementui的el-select组件的时候，我们可以通过这种方法直接绑定change事件！！\nmybutton:\n\n\n<template>\n  <button v-on="$listeners" :class="buttonclass">\n    {{ label }}\n  </button>\n</template>\n\n<script>\nexport default {\n  name:\'mybutton\',\n  inheritattrs: false, // 防止$attrs被自动添加到根元素\n  props: {\n    label: {\n      type: string,\n      required: true,\n    },\n    buttonclass: {\n      type: string,\n      default: "default-button-class",\n    },\n  },\n};\n<\/script>\n\n\n\n\n\n这样我们在使用自定义组件的时候，就可以不用emit去触发事件。通过使用$listeners，我们可以更加灵活地编写组件，将事件监听器传递给内部元素或子组件，从而使组件在行为上保持一致。\n\n<template>\n  <div>\n    <mybutton\n      label="click me"\n      :class="custombuttonclass"\n      @click="handleclick"\n      @mouseover="handlemouseover"\n    />\n  </div>\n</template>\n\n<script>\nimport mybutton from \'./mybutton.vue\';\n\nexport default {\n  components: {\n    mybutton,\n  },\n  data() {\n    return {\n      custombuttonclass: "custom-button-class",\n    };\n  },\n  methods: {\n    handleclick() {\n      alert("button clicked!");\n    },\n    handlemouseover() {\n      console.log("mouse over the button!");\n    },\n  },\n};\n<\/script>\n\n',charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1690795614e3},{title:"React项目搭建",frontmatter:{title:"React项目搭建",permalink:"/pages/3dc609/",date:"2022-11-17T00:00:00.000Z",tags:["React"]},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/25.React%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA.html",relativePath:"01.前端/01.学过的习/25.React项目搭建.md",key:"v-40c54964",path:"/pages/3dc609/",headers:[{level:2,title:"React项目搭建",slug:"react项目搭建",normalizedTitle:"react项目搭建",charIndex:2},{level:2,title:"React项目文件分析",slug:"react项目文件分析",normalizedTitle:"react项目文件分析",charIndex:1208},{level:2,title:"React路由使用",slug:"react路由使用",normalizedTitle:"react路由使用",charIndex:2412}],headersStr:"React项目搭建 React项目文件分析 React路由使用",content:'# React项目搭建\n\n1、react提供了一个用于创建react项目的脚手架库: create-react-app，使用脚手架搭建项目可以节省时间，它包含了搭建项目所需要的基本的配置（语法检查、jsx编译等等）。\n\n1、全局安装脚手架：npm i -g create-react-app\n\n2、使用脚手架创建项目：create-react-app zl-react\n\n3、创建完成后： \n    npm start\n       Starts the development server.\n    \n    npm run build\n       Bundles the app into static files for production.\n    \n    npm test\n       Starts the test runner.\n    \n    npm run eject\n       Removes this tool and copies build dependencies, configuration files\n       and scripts into the app directory. If you do this, you can’t go back!\n\n\n4、创建完成后项目结构：\n    public ---- 静态资源文件夹\n        favicon.icon ------ 网站页签图标\n        index.html -------- 主页面\n        logo192.png ------- logo图\n        logo512.png ------- logo图\n        manifest.json ----- 应用加壳的配置文件\n        robots.txt -------- 爬虫协议文件\n\n    src ------ 源码文件夹\n        App.css ----------- App组件的样式\n        App.js ------------ App组件\n        App.commonJS-test1.js ------- 用于给App做测试\n        index.css --------- 样式\n        index.js ---------- 入口文件\n        logo.svg ---------- logo图\n        reportWebVitals.js\n                        --- 页面性能分析文件(需要web-vitals库的支持)\n        setupTests.js\n                       ---- 组件单元测试的文件(需要jest-dom库的支持)\n\n\n\n\n\n\n\n\n# React项目文件分析\n\n1、入口文件分析（index.js）\n\nimport React from \'react\';\nimport ReactDOM from \'react-dom/client\';\n//import ReactDOM from \'react-dom\'\nimport \'./index.css\';\nimport App from \'./App\';\n\n\n//root是public文件下的index.html的root节点\n1、ReactDOM.render(<App/>,document.getElementById(\'root\')) //注：ReactDom的创建方式不同\n\n\n//react-dom V18.0.0只有可以使用的创建方式\n2、const root = ReactDOM.createRoot(document.getElementById(\'root\')); \nroot.render(\n  <App/>\n);\n\n\n\n\n\n2、App.jsx 文件\n\n//引入React核心库\nimport {Component} from \'react\'\n\n//引入需要展示的组件\nimport Hello from \'./components/Hello\'\n\n//将类式组件暴露出去\nexport default class App extends Component{\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Hello/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n\n\n3、setupProxy.js代理文件配置，代理相当于中间服务器，主要的目的是解决浏览器的同源策略产生的跨域问题。\n\nconst proxy = require(\'http-proxy-middleware\')\n\n\nmodule.exports = function(app) {\n  app.use(\n    proxy(\'/api1\', {  \n\t\t\ttarget: \'http://localhost:5000\', //转发的目标服务器\n\t\t\tchangeOrigin: true,  //解决服务器对请求的识别问题\n\t\t\tpathRewrite: {\'^/api1\': \'\'}  //是否重新确定路径，将/api1去掉\n    }),\n    proxy(\'/api2\', {  \n\t\t\ttarget: \'http://localhost:5001\',\n\t\t\tchangeOrigin: true,\n\t\t\tpathRewrite: {\'^/api2\': \'\'}\n    }),\n  )\n}\n\n\n\n注： 如果不需要转发至不同的域，可以在package.json文件中进行如下的配置\n\n "proxy": "http://localhost:5000"\n\n\n\n\n\n\n\n# React路由使用\n\n路由主要是通过使用浏览器自身的history对象，监听访问路径的变化，展示和操作页面（通常使用history.js来操作history对象）\n\n\n1、安装、引入\n\nnpm install react-router-dom\n\nimport {\n  BrowserRouter,\n  Route,\n  Link\n} from \'react-router-dom\'\n\n\n\n\nreact-router-dom 提供了 BrowserRouter 和 HashRouter 路由。 这两个路由都会为你创建一个专门的 history 对象。 一般来说，如果你有一个响应请求的服务器，则你应该使用 BrowserRouter ， 如果你使用的是静态文件的服务器，则应该使用 HashRouter(会在路由的路径上增加#，并且#之后的内容不会转发至服务器)\n\n\n1、React中，使用 Link 或者 NavLink 进行路径的切换，相当于html的a标签，向history栈进行push操作。\n\n    <Link className="test" to="/about">About</Link>\n    <Link className="test" to="/home">Home</Link>\n    \n    <NavLink activeClassName="demo" className="test" to="/about">About</NavLink>\n    <NavLink activeClassName="demo" className="test" to="/home">Home</NavLink>\n\n注：NavLink相比于Link多了activeClassName，activeStyle等属性，便于标签在被选中的时候增加样式。\n\n\n2、注册路由 \n\n    <Route path="/about" component={About}/>\n    <Route path="/home" component={Home}/>\n\n\n3、使用link标签的时候，需要BrowserRouter 或者 HashRouter进行包裹。\n   为了方便，我们一般可以直接加在入口文件的app之上（index.js）。\n\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n\n\n4、switch标签的使用\n\n未使用前：以下的场景会将/about路由匹配Test组件\n    <Route path="/about" component={About}/>\n    <Route path="/home" component={Home}/>\n    <Route path="/about" component={Test}/>\n\n使用后：路由匹配到后就不会接着往下匹配，所有/about路由匹配到的是About组件\n    <Switch>\n        <Route path="/about" component={About}/>\n        <Route path="/home" component={Home}/>\n        <Route path="/about" component={Test}/>{/* 改行匹配是失效的 */}\n    </Switch>\n\n\n5、<Redirect> 重定向标签\n   将导航到一个新的地址。这个新的地址会覆盖 history 栈中的当前地址，类似服务器端的重定向。\n\n    <Redirect to="/about"/>\n\n\n\n\n\n\n2、多级路由和路由传参\n\n1、多级路由刷新产生的样式丢失问题\n  由于刷新导致请求的地址发生变化，可能会使主页面引入的外部文件请求地址出错。\n  解决方案：\n  |<link rel="stylesheet" href="/css/bootstrap.css">  //去除href后面 \'./\'中的 \'.\' \n  |<link rel="stylesheet" href="%PUBLIC_URL%/css/bootstrap.css">  //使用%PUBLIC_URL%，定位至public文件夹（仅React）\n  |使用HashRouter\n\n\n2、路由的模糊匹配和精准匹配：\n    <Link className="test" to="/about/a/b/c">About</Link>\n    <Route path="/about" component={About}/>\n    比如以上的路由可以匹配的path：/about,/about/a,/about/a/b,/about/a/b/c；\n    注意要匹配完整的path，不能是/about 或者/about/x\n\n    <Route path="/about" exact={true} component={About}/>\n    使用精准匹配后，不能够模糊匹配，但是开启之后，多级路由会出现问题。路由开启严格模式后，此路由的二级三级路由都会失效\n \n\n\n4、路由传递参数--params参数\n    <Link to={`/home/message/detail/${msgObj.id}/${msgObj.title}`}>test</Link>\n    注册路由时，声明接收params参数\n    <Route path="/home/message/detail/:id/:title" component={Detail}/>\n    获取传递过来的params参数\n    const {id,title} = this.props.match.params\n\n\n5、路由传递参数--search参数\t\t\n    <Link to={`/home/message/detail?id=${msgObj.id}&title=${msgObj.title}`}>test</Link>\t\t\t\t\t\t\n    注册路由时，如果携带的是search参数，无需声明接收，直接注册即可\n    <Route path="/home/message/detail" component={Detail}/>\n    获取传递过来的search参数\n    import qs from \'querystring\'\n    const {search} = this.props.location\n    //去掉？并处理参数\n    const {id,title} = qs.parse(search.slice(1))\n\n\n6、路由传递参数--state参数\t\t\n    <Link to={{pathname:\'/home/message/detail\',state:{id:\'009\',title:msgObj.title}}}>test</Link>\t\t\t\t\t\t\n    注册路由时，如果携带的是state参数，无需声明接收，直接注册即可\n    <Route path="/home/message/detail" component={Detail}/>\n    获取传递过来的state参数\n    const {id,title} = this.props.location.state\n\n\n7、编程式路由（常用方法）\n    this.props.history.push(\'/home/XXX\')\n    this.props.history.replace(\'/home/XXX\')\n    this.props.history.goBack()\n    this.props.history.goForward();\n\n    history 对象通常会具有以下属性和方法：\n        length - (number 类型) history 堆栈的条目数\n        action - (string 类型) 当前的操作(PUSH, REPLACE, POP)\n        location - (object 类型) 当前的位置。location 会具有以下属性：\n            pathname - (string 类型) URL 路径\n            search - (string 类型) URL 中的查询字符串\n            hash - (string 类型) URL 的哈希片段\n            state - (object 类型) 提供给例如使用 push(path, state) 操作将 location 放入堆栈时的特定 location 状态。只在浏览器和内存历史中可用。\n        push(path, [state]) - (function 类型) 在 history 堆栈添加一个新条目\n        replace(path, [state]) - (function 类型) 替换在 history 堆栈中的当前条目\n        go(n) - (function 类型) 将 history 堆栈中的指针调整 n\n        goBack() - (function 类型) 等同于 go(-1)\n        goForward() - (function 类型) 等同于 go(1)\n        block(prompt) - (function 类型) 阻止跳转。\n\n\n8、withRouter\n    当路由渲染时， withRouter 会将已经更新的 match ， location 和 history 属性传递给被包裹的组件。\n    给非路由组件的props绑定match ， location 和 history 属性。\n',normalizedContent:'# react项目搭建\n\n1、react提供了一个用于创建react项目的脚手架库: create-react-app，使用脚手架搭建项目可以节省时间，它包含了搭建项目所需要的基本的配置（语法检查、jsx编译等等）。\n\n1、全局安装脚手架：npm i -g create-react-app\n\n2、使用脚手架创建项目：create-react-app zl-react\n\n3、创建完成后： \n    npm start\n       starts the development server.\n    \n    npm run build\n       bundles the app into static files for production.\n    \n    npm test\n       starts the test runner.\n    \n    npm run eject\n       removes this tool and copies build dependencies, configuration files\n       and scripts into the app directory. if you do this, you can’t go back!\n\n\n4、创建完成后项目结构：\n    public ---- 静态资源文件夹\n        favicon.icon ------ 网站页签图标\n        index.html -------- 主页面\n        logo192.png ------- logo图\n        logo512.png ------- logo图\n        manifest.json ----- 应用加壳的配置文件\n        robots.txt -------- 爬虫协议文件\n\n    src ------ 源码文件夹\n        app.css ----------- app组件的样式\n        app.js ------------ app组件\n        app.commonjs-test1.js ------- 用于给app做测试\n        index.css --------- 样式\n        index.js ---------- 入口文件\n        logo.svg ---------- logo图\n        reportwebvitals.js\n                        --- 页面性能分析文件(需要web-vitals库的支持)\n        setuptests.js\n                       ---- 组件单元测试的文件(需要jest-dom库的支持)\n\n\n\n\n\n\n\n\n# react项目文件分析\n\n1、入口文件分析（index.js）\n\nimport react from \'react\';\nimport reactdom from \'react-dom/client\';\n//import reactdom from \'react-dom\'\nimport \'./index.css\';\nimport app from \'./app\';\n\n\n//root是public文件下的index.html的root节点\n1、reactdom.render(<app/>,document.getelementbyid(\'root\')) //注：reactdom的创建方式不同\n\n\n//react-dom v18.0.0只有可以使用的创建方式\n2、const root = reactdom.createroot(document.getelementbyid(\'root\')); \nroot.render(\n  <app/>\n);\n\n\n\n\n\n2、app.jsx 文件\n\n//引入react核心库\nimport {component} from \'react\'\n\n//引入需要展示的组件\nimport hello from \'./components/hello\'\n\n//将类式组件暴露出去\nexport default class app extends component{\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<hello/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n\n\n3、setupproxy.js代理文件配置，代理相当于中间服务器，主要的目的是解决浏览器的同源策略产生的跨域问题。\n\nconst proxy = require(\'http-proxy-middleware\')\n\n\nmodule.exports = function(app) {\n  app.use(\n    proxy(\'/api1\', {  \n\t\t\ttarget: \'http://localhost:5000\', //转发的目标服务器\n\t\t\tchangeorigin: true,  //解决服务器对请求的识别问题\n\t\t\tpathrewrite: {\'^/api1\': \'\'}  //是否重新确定路径，将/api1去掉\n    }),\n    proxy(\'/api2\', {  \n\t\t\ttarget: \'http://localhost:5001\',\n\t\t\tchangeorigin: true,\n\t\t\tpathrewrite: {\'^/api2\': \'\'}\n    }),\n  )\n}\n\n\n\n注： 如果不需要转发至不同的域，可以在package.json文件中进行如下的配置\n\n "proxy": "http://localhost:5000"\n\n\n\n\n\n\n\n# react路由使用\n\n路由主要是通过使用浏览器自身的history对象，监听访问路径的变化，展示和操作页面（通常使用history.js来操作history对象）\n\n\n1、安装、引入\n\nnpm install react-router-dom\n\nimport {\n  browserrouter,\n  route,\n  link\n} from \'react-router-dom\'\n\n\n\n\nreact-router-dom 提供了 browserrouter 和 hashrouter 路由。 这两个路由都会为你创建一个专门的 history 对象。 一般来说，如果你有一个响应请求的服务器，则你应该使用 browserrouter ， 如果你使用的是静态文件的服务器，则应该使用 hashrouter(会在路由的路径上增加#，并且#之后的内容不会转发至服务器)\n\n\n1、react中，使用 link 或者 navlink 进行路径的切换，相当于html的a标签，向history栈进行push操作。\n\n    <link classname="test" to="/about">about</link>\n    <link classname="test" to="/home">home</link>\n    \n    <navlink activeclassname="demo" classname="test" to="/about">about</navlink>\n    <navlink activeclassname="demo" classname="test" to="/home">home</navlink>\n\n注：navlink相比于link多了activeclassname，activestyle等属性，便于标签在被选中的时候增加样式。\n\n\n2、注册路由 \n\n    <route path="/about" component={about}/>\n    <route path="/home" component={home}/>\n\n\n3、使用link标签的时候，需要browserrouter 或者 hashrouter进行包裹。\n   为了方便，我们一般可以直接加在入口文件的app之上（index.js）。\n\n    <browserrouter>\n        <app/>\n    </browserrouter>\n\n\n4、switch标签的使用\n\n未使用前：以下的场景会将/about路由匹配test组件\n    <route path="/about" component={about}/>\n    <route path="/home" component={home}/>\n    <route path="/about" component={test}/>\n\n使用后：路由匹配到后就不会接着往下匹配，所有/about路由匹配到的是about组件\n    <switch>\n        <route path="/about" component={about}/>\n        <route path="/home" component={home}/>\n        <route path="/about" component={test}/>{/* 改行匹配是失效的 */}\n    </switch>\n\n\n5、<redirect> 重定向标签\n   将导航到一个新的地址。这个新的地址会覆盖 history 栈中的当前地址，类似服务器端的重定向。\n\n    <redirect to="/about"/>\n\n\n\n\n\n\n2、多级路由和路由传参\n\n1、多级路由刷新产生的样式丢失问题\n  由于刷新导致请求的地址发生变化，可能会使主页面引入的外部文件请求地址出错。\n  解决方案：\n  |<link rel="stylesheet" href="/css/bootstrap.css">  //去除href后面 \'./\'中的 \'.\' \n  |<link rel="stylesheet" href="%public_url%/css/bootstrap.css">  //使用%public_url%，定位至public文件夹（仅react）\n  |使用hashrouter\n\n\n2、路由的模糊匹配和精准匹配：\n    <link classname="test" to="/about/a/b/c">about</link>\n    <route path="/about" component={about}/>\n    比如以上的路由可以匹配的path：/about,/about/a,/about/a/b,/about/a/b/c；\n    注意要匹配完整的path，不能是/about 或者/about/x\n\n    <route path="/about" exact={true} component={about}/>\n    使用精准匹配后，不能够模糊匹配，但是开启之后，多级路由会出现问题。路由开启严格模式后，此路由的二级三级路由都会失效\n \n\n\n4、路由传递参数--params参数\n    <link to={`/home/message/detail/${msgobj.id}/${msgobj.title}`}>test</link>\n    注册路由时，声明接收params参数\n    <route path="/home/message/detail/:id/:title" component={detail}/>\n    获取传递过来的params参数\n    const {id,title} = this.props.match.params\n\n\n5、路由传递参数--search参数\t\t\n    <link to={`/home/message/detail?id=${msgobj.id}&title=${msgobj.title}`}>test</link>\t\t\t\t\t\t\n    注册路由时，如果携带的是search参数，无需声明接收，直接注册即可\n    <route path="/home/message/detail" component={detail}/>\n    获取传递过来的search参数\n    import qs from \'querystring\'\n    const {search} = this.props.location\n    //去掉？并处理参数\n    const {id,title} = qs.parse(search.slice(1))\n\n\n6、路由传递参数--state参数\t\t\n    <link to={{pathname:\'/home/message/detail\',state:{id:\'009\',title:msgobj.title}}}>test</link>\t\t\t\t\t\t\n    注册路由时，如果携带的是state参数，无需声明接收，直接注册即可\n    <route path="/home/message/detail" component={detail}/>\n    获取传递过来的state参数\n    const {id,title} = this.props.location.state\n\n\n7、编程式路由（常用方法）\n    this.props.history.push(\'/home/xxx\')\n    this.props.history.replace(\'/home/xxx\')\n    this.props.history.goback()\n    this.props.history.goforward();\n\n    history 对象通常会具有以下属性和方法：\n        length - (number 类型) history 堆栈的条目数\n        action - (string 类型) 当前的操作(push, replace, pop)\n        location - (object 类型) 当前的位置。location 会具有以下属性：\n            pathname - (string 类型) url 路径\n            search - (string 类型) url 中的查询字符串\n            hash - (string 类型) url 的哈希片段\n            state - (object 类型) 提供给例如使用 push(path, state) 操作将 location 放入堆栈时的特定 location 状态。只在浏览器和内存历史中可用。\n        push(path, [state]) - (function 类型) 在 history 堆栈添加一个新条目\n        replace(path, [state]) - (function 类型) 替换在 history 堆栈中的当前条目\n        go(n) - (function 类型) 将 history 堆栈中的指针调整 n\n        goback() - (function 类型) 等同于 go(-1)\n        goforward() - (function 类型) 等同于 go(1)\n        block(prompt) - (function 类型) 阻止跳转。\n\n\n8、withrouter\n    当路由渲染时， withrouter 会将已经更新的 match ， location 和 history 属性传递给被包裹的组件。\n    给非路由组件的props绑定match ， location 和 history 属性。\n',charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1675742318e3},{title:"js的精度问题",frontmatter:{title:"js的精度问题",date:"2023-07-31T00:00:00.000Z",permalink:"/pages/44df8d/",tags:["javaScript"]},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/28.js%E7%9A%84%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98.html",relativePath:"01.前端/01.学过的习/28.js的精度问题.md",key:"v-abd1b318",path:"/pages/44df8d/",headers:[{level:2,title:"js中存在的精度问题及解决方案",slug:"js中存在的精度问题及解决方案",normalizedTitle:"js中存在的精度问题及解决方案",charIndex:2},{level:3,title:"一、js中问什么会存在精度问题：为什么0.1+0.2 ！= 0.3？",slug:"一、js中问什么会存在精度问题-为什么0-1-0-2-0-3",normalizedTitle:"一、js中问什么会存在精度问题：为什么0.1+0.2 ！= 0.3？",charIndex:23},{level:3,title:"二、关于精度的解决方案",slug:"二、关于精度的解决方案",normalizedTitle:"二、关于精度的解决方案",charIndex:689}],headersStr:"js中存在的精度问题及解决方案 一、js中问什么会存在精度问题：为什么0.1+0.2 ！= 0.3？ 二、关于精度的解决方案",content:"# js中存在的精度问题及解决方案\n\n\n\n# 一、js中问什么会存在精度问题：为什么0.1+0.2 ！= 0.3？\n\n当将十进制数转换为二进制数时，0.1 和 0.2 都会产生无限循环的二进制表示形式。 这是因为在二进制中，有些小数无法精确表示，就像在十进制中无法精确表示 1/3 一样。\n\n\n将 0.1 转换为二进制：\n\n\n乘以 2，得到 0.2，整数部分为 0。\n乘以 2，得到 0.4，整数部分为 0。\n乘以 2，得到 0.8，整数部分为 0。\n乘以 2，得到 1.6，整数部分为 1。\n乘以 2，得到 1.2，整数部分为 1。\n乘以 2，得到 0.4，整数部分为 0。\n乘以 2，得到 0.8，整数部分为 0。\n乘以 2，得到 1.6，整数部分为 1。\n乘以 2，得到 1.2，整数部分为 1。\n继续该过程下去，得到无限循环的二进制表示形式：0.0001100110011...\n\n\n\n将 0.2 转换为二进制：\n\n\n乘以 2，得到 0.4，整数部分为 0。\n乘以 2，得到 0.8，整数部分为 0。\n乘以 2，得到 1.6，整数部分为 1。\n乘以 2，得到 1.2，整数部分为 1。\n继续该过程下去，得到无限循环的二进制表示形式：0.001100110011...\n\n\n\n由于这种无限循环，将它们精确表示为二进制是不可能的. 在计算机中，它们的二进制表示会被截断为有限位数，从而引入舍入误差。\n因此，在实际计算中，0.1 和 0.2 的精确值不是直接使用它们的二进制表示，而是使用近似值进行计算。 这导致了 0.1 + 0.2 的结果略微偏离于 0.3。\n\n\n\n\n# 二、关于精度的解决方案\n\n\n1、使用专门的高精度计算库：可以使用第三方库或语言内置的高精度计算库，这些库提供了更精确的数值计算功能。 例如，在 JavaScript 中，可以使用 Decimal.js、Big.js、math.js 等库来进行高精度计算。\n\n\n2、使用字符串表示数字实现精确计算：如果不想依赖外部库，也可以手动实现高精度计算。 一种常见的方法是使用字符串表示数字，然后编写相应的算法来进行精确计算。通过使用字符串表示，可以绕过浮点数的精度问题。 但是，这样做可能会降低计算速度和增加代码复杂性。\n\n\n```javascript // 将数字转换为字符串 function numberToString(num) { return num.toString(); }\n\n// 去除字符串首尾的0 function trimLeadingAndTrailingZeros(str) { return str.replace(/^0+|0+$/g, ''); }\n\n// 加法 function add(a, b) { const aStr = numberToString(a); const bStr = numberToString(b);\n\nlet carry = 0; // 进位 let result = ''; // 结果\n\nlet i = aStr.length - 1; // 数字 a 的最后一位索引 let j = bStr.length - 1; // 数字 b 的最后一位索引\n\n// 从后往前遍历 a 和 b 的每一位数字，进行相加 while (i >= 0 || j >= 0 || carry > 0) { const digitA = i >= 0 ? parseInt(aStr[i]) : 0; // 数字 a 的当前位数值，若索引越界则为0 const digitB = j >= 0 ? parseInt(bStr[j]) : 0; // 数字 b 的当前位数值，若索引越界则为0\n\n// 计算当前位的和，加上进位\nconst sum = digitA + digitB + carry;\n// 更新进位\ncarry = Math.floor(sum / 10);\n// 将当前位的结果添加到结果字符串的开头\nresult = (sum % 10) + result;\n\n// 移动到下一位\ni--;\nj--;\n\n\n}\n\n// 去除首尾无效的0，并返回结果 return trimLeadingAndTrailingZeros(result); }\n\n// 乘法 function multiply(a, b) { const aStr = numberToString(a); const bStr = numberToString(b);\n\nconst products = []; // 存储各位乘积的临时数组\n\n// 从 a 的最后一位开始遍历 for (let i = aStr.length - 1; i >= 0; i--) { let carry = 0; // 进位 let product = ''; // 当前位的乘积\n\n// 从 b 的最后一位开始遍历\nfor (let j = bStr.length - 1; j >= 0; j--) {\n  const digitA = parseInt(aStr[i]); // 数字 a 的当前位数值\n  const digitB = parseInt(bStr[j]); // 数字 b 的当前位数值\n\n  // 计算当前位的乘积，加上进位\n  const partialProduct = digitA * digitB + carry;\n  // 更新进位\n  carry = Math.floor(partialProduct / 10);\n  // 将当前位的结果添加到当前乘积的开头\n  product = (partialProduct % 10) + product;\n}\n\n// 若进位大于0，则将其添加到当前乘积的开头\nif (carry > 0) {\n  product = carry + product;\n}\n\n// 添加0，相当于当前位乘积的位数向左移动\nproduct += '0'.repeat(aStr.length - i - 1);\n// 将当前位的乘积添加到临时数组中\nproducts.push(product);\n\n\n}\n\n// 将各位乘积相加，得到最终结果 let result = '0'; for (const product of products) { result = add(result, product); }\n\n// 去除首尾无效的0，并返回结果 return trimLeadingAndTrailingZeros(result); }\n\n// 示例 const a = '0.1'; const b = '0.2'; const sum = add(a, b); console.log(sum); // 输出：\"0.3\"\n\nconst product = multiply(a, b); console.log(product); // 输出：\"0.02\"\n\n\n[//]: # (3、调整计算顺序：有时，通过重新排列计算顺序可以减少舍入误差的影响。)\n\n[//]: # (   例如，如果某个计算顺序导致大数与小数相加，可以尽量将相似大小的数值进行相加，然后再进行舍入。这样可以减小舍入误差的累积效应。)\n<br/><br/>\n\n3、**使用整数计算**：对于需要高精度的货币计算等场景，可以将小数转换为整数，进行整数计算，然后再将结果转换回小数形式。\n   这可以避免浮点数精度问题，因为整数计算没有舍入误差。\n<br/>\n```javascript\nfunction decimalToIntegerCalculation(a, b, operator) {\n  // 将小数转换成整数\n  const precision = Math.max(getPrecision(a), getPrecision(b));\n  const integerA = a * Math.pow(10, precision);\n  const integerB = b * Math.pow(10, precision);\n\n  // 进行整数运算\n  let result;\n  switch (operator) {\n    case '+':\n      result = integerA + integerB;\n      break;\n    case '-':\n      result = integerA - integerB;\n      break;\n    case '*':\n      result = (integerA * integerB) / Math.pow(10, precision * 2);\n      break;\n    case '/':\n      result = integerA / integerB;\n      break;\n    default:\n      throw new Error(\"Invalid operator\");\n  }\n\n  // 将结果转回小数形式\n  return result / Math.pow(10, precision);\n}\n\n// 获取小数的精度\nfunction getPrecision(number) {\n  const str = number.toString();\n  const decimalIndex = str.indexOf(\".\");\n  return decimalIndex === -1 ? 0 : str.length - decimalIndex - 1;\n}\n\n// 示例\nconst a = 0.1;\nconst b = 0.2;\nconst sum = decimalToIntegerCalculation(a, b, '+');\nconsole.log(sum); // Output: 0.3\n\n",normalizedContent:"# js中存在的精度问题及解决方案\n\n\n\n# 一、js中问什么会存在精度问题：为什么0.1+0.2 ！= 0.3？\n\n当将十进制数转换为二进制数时，0.1 和 0.2 都会产生无限循环的二进制表示形式。 这是因为在二进制中，有些小数无法精确表示，就像在十进制中无法精确表示 1/3 一样。\n\n\n将 0.1 转换为二进制：\n\n\n乘以 2，得到 0.2，整数部分为 0。\n乘以 2，得到 0.4，整数部分为 0。\n乘以 2，得到 0.8，整数部分为 0。\n乘以 2，得到 1.6，整数部分为 1。\n乘以 2，得到 1.2，整数部分为 1。\n乘以 2，得到 0.4，整数部分为 0。\n乘以 2，得到 0.8，整数部分为 0。\n乘以 2，得到 1.6，整数部分为 1。\n乘以 2，得到 1.2，整数部分为 1。\n继续该过程下去，得到无限循环的二进制表示形式：0.0001100110011...\n\n\n\n将 0.2 转换为二进制：\n\n\n乘以 2，得到 0.4，整数部分为 0。\n乘以 2，得到 0.8，整数部分为 0。\n乘以 2，得到 1.6，整数部分为 1。\n乘以 2，得到 1.2，整数部分为 1。\n继续该过程下去，得到无限循环的二进制表示形式：0.001100110011...\n\n\n\n由于这种无限循环，将它们精确表示为二进制是不可能的. 在计算机中，它们的二进制表示会被截断为有限位数，从而引入舍入误差。\n因此，在实际计算中，0.1 和 0.2 的精确值不是直接使用它们的二进制表示，而是使用近似值进行计算。 这导致了 0.1 + 0.2 的结果略微偏离于 0.3。\n\n\n\n\n# 二、关于精度的解决方案\n\n\n1、使用专门的高精度计算库：可以使用第三方库或语言内置的高精度计算库，这些库提供了更精确的数值计算功能。 例如，在 javascript 中，可以使用 decimal.js、big.js、math.js 等库来进行高精度计算。\n\n\n2、使用字符串表示数字实现精确计算：如果不想依赖外部库，也可以手动实现高精度计算。 一种常见的方法是使用字符串表示数字，然后编写相应的算法来进行精确计算。通过使用字符串表示，可以绕过浮点数的精度问题。 但是，这样做可能会降低计算速度和增加代码复杂性。\n\n\n```javascript // 将数字转换为字符串 function numbertostring(num) { return num.tostring(); }\n\n// 去除字符串首尾的0 function trimleadingandtrailingzeros(str) { return str.replace(/^0+|0+$/g, ''); }\n\n// 加法 function add(a, b) { const astr = numbertostring(a); const bstr = numbertostring(b);\n\nlet carry = 0; // 进位 let result = ''; // 结果\n\nlet i = astr.length - 1; // 数字 a 的最后一位索引 let j = bstr.length - 1; // 数字 b 的最后一位索引\n\n// 从后往前遍历 a 和 b 的每一位数字，进行相加 while (i >= 0 || j >= 0 || carry > 0) { const digita = i >= 0 ? parseint(astr[i]) : 0; // 数字 a 的当前位数值，若索引越界则为0 const digitb = j >= 0 ? parseint(bstr[j]) : 0; // 数字 b 的当前位数值，若索引越界则为0\n\n// 计算当前位的和，加上进位\nconst sum = digita + digitb + carry;\n// 更新进位\ncarry = math.floor(sum / 10);\n// 将当前位的结果添加到结果字符串的开头\nresult = (sum % 10) + result;\n\n// 移动到下一位\ni--;\nj--;\n\n\n}\n\n// 去除首尾无效的0，并返回结果 return trimleadingandtrailingzeros(result); }\n\n// 乘法 function multiply(a, b) { const astr = numbertostring(a); const bstr = numbertostring(b);\n\nconst products = []; // 存储各位乘积的临时数组\n\n// 从 a 的最后一位开始遍历 for (let i = astr.length - 1; i >= 0; i--) { let carry = 0; // 进位 let product = ''; // 当前位的乘积\n\n// 从 b 的最后一位开始遍历\nfor (let j = bstr.length - 1; j >= 0; j--) {\n  const digita = parseint(astr[i]); // 数字 a 的当前位数值\n  const digitb = parseint(bstr[j]); // 数字 b 的当前位数值\n\n  // 计算当前位的乘积，加上进位\n  const partialproduct = digita * digitb + carry;\n  // 更新进位\n  carry = math.floor(partialproduct / 10);\n  // 将当前位的结果添加到当前乘积的开头\n  product = (partialproduct % 10) + product;\n}\n\n// 若进位大于0，则将其添加到当前乘积的开头\nif (carry > 0) {\n  product = carry + product;\n}\n\n// 添加0，相当于当前位乘积的位数向左移动\nproduct += '0'.repeat(astr.length - i - 1);\n// 将当前位的乘积添加到临时数组中\nproducts.push(product);\n\n\n}\n\n// 将各位乘积相加，得到最终结果 let result = '0'; for (const product of products) { result = add(result, product); }\n\n// 去除首尾无效的0，并返回结果 return trimleadingandtrailingzeros(result); }\n\n// 示例 const a = '0.1'; const b = '0.2'; const sum = add(a, b); console.log(sum); // 输出：\"0.3\"\n\nconst product = multiply(a, b); console.log(product); // 输出：\"0.02\"\n\n\n[//]: # (3、调整计算顺序：有时，通过重新排列计算顺序可以减少舍入误差的影响。)\n\n[//]: # (   例如，如果某个计算顺序导致大数与小数相加，可以尽量将相似大小的数值进行相加，然后再进行舍入。这样可以减小舍入误差的累积效应。)\n<br/><br/>\n\n3、**使用整数计算**：对于需要高精度的货币计算等场景，可以将小数转换为整数，进行整数计算，然后再将结果转换回小数形式。\n   这可以避免浮点数精度问题，因为整数计算没有舍入误差。\n<br/>\n```javascript\nfunction decimaltointegercalculation(a, b, operator) {\n  // 将小数转换成整数\n  const precision = math.max(getprecision(a), getprecision(b));\n  const integera = a * math.pow(10, precision);\n  const integerb = b * math.pow(10, precision);\n\n  // 进行整数运算\n  let result;\n  switch (operator) {\n    case '+':\n      result = integera + integerb;\n      break;\n    case '-':\n      result = integera - integerb;\n      break;\n    case '*':\n      result = (integera * integerb) / math.pow(10, precision * 2);\n      break;\n    case '/':\n      result = integera / integerb;\n      break;\n    default:\n      throw new error(\"invalid operator\");\n  }\n\n  // 将结果转回小数形式\n  return result / math.pow(10, precision);\n}\n\n// 获取小数的精度\nfunction getprecision(number) {\n  const str = number.tostring();\n  const decimalindex = str.indexof(\".\");\n  return decimalindex === -1 ? 0 : str.length - decimalindex - 1;\n}\n\n// 示例\nconst a = 0.1;\nconst b = 0.2;\nconst sum = decimaltointegercalculation(a, b, '+');\nconsole.log(sum); // output: 0.3\n\n",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1692166469e3},{title:"yarn和npm的对比",frontmatter:{title:"yarn和npm的对比",date:"2023-07-25T00:00:00.000Z",permalink:"/pages/b3a247/",tags:["JavaScript"]},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/31.yarn%E5%92%8Cnpm%E7%9A%84%E5%AF%B9%E6%AF%94.html",relativePath:"01.前端/01.学过的习/31.yarn和npm的对比.md",key:"v-5a56b1d0",path:"/pages/b3a247/",headers:[{level:2,title:"yarn和npm的对比",slug:"yarn和npm的对比",normalizedTitle:"yarn和npm的对比",charIndex:2},{level:3,title:"初始化项目：",slug:"初始化项目",normalizedTitle:"初始化项目：",charIndex:115},{level:3,title:"安装依赖包：",slug:"安装依赖包",normalizedTitle:"安装依赖包：",charIndex:255},{level:3,title:"安装开发依赖包：",slug:"安装开发依赖包",normalizedTitle:"安装开发依赖包：",charIndex:412},{level:3,title:"全局安装包：",slug:"全局安装包",normalizedTitle:"全局安装包：",charIndex:574},{level:3,title:"移除依赖包：",slug:"移除依赖包",normalizedTitle:"移除依赖包：",charIndex:664},{level:3,title:"更新依赖包：",slug:"更新依赖包",normalizedTitle:"更新依赖包：",charIndex:876},{level:3,title:"安装所有依赖：",slug:"安装所有依赖",normalizedTitle:"安装所有依赖：",charIndex:1009},{level:3,title:"运行脚本：",slug:"运行脚本",normalizedTitle:"运行脚本：",charIndex:1073},{level:3,title:"查看已安装的包：",slug:"查看已安装的包",normalizedTitle:"查看已安装的包：",charIndex:1142},{level:3,title:"查看包信息：",slug:"查看包信息",normalizedTitle:"查看包信息：",charIndex:1277},{level:3,title:"缓存相关：",slug:"缓存相关",normalizedTitle:"缓存相关：",charIndex:1356}],headersStr:"yarn和npm的对比 初始化项目： 安装依赖包： 安装开发依赖包： 全局安装包： 移除依赖包： 更新依赖包： 安装所有依赖： 运行脚本： 查看已安装的包： 查看包信息： 缓存相关：",content:"# yarn和npm的对比\n\nyarn 和 npm 是两个JavaScript包管理器。它们的主要目的都是帮助开发人员下载、安装、更新和管理 JavaScript 包和依赖项。\nyarn 和 npm 在命令上的一些对比：\n\n\n# 初始化项目：\n\n使用 npm: npm init，它将引导您填写有关项目的信息，并在生成 package.json 文件时询问相关信息。\n使用 yarn: yarn init，与 npm 的 npm init 类似，用于初始化项目并生成 package.json 文件。\n\n\n# 安装依赖包：\n\n使用 npm: npm install 'package-name' 或者 npm install 'package-name'@'version'\n使用 yarn: yarn add 'package-name' 或者 yarn add 'package-name'@'version'\n\n\n# 安装开发依赖包：\n\n使用 npm: npm install 'package-name' --save-dev 或者 npm install 'package-name' -D\n使用 yarn: yarn add 'package-name' --dev 或者 yarn add 'package-name' -D\n\n\n# 全局安装包：\n\n使用 npm: npm install -g 'package-name'\n使用 yarn: yarn global add 'package-name'\n\n\n# 移除依赖包：\n\n使用 npm: npm uninstall 'package-name' 或者 npm uninstall 'package-name' --save（移除并从 dependencies 中删除）或 npm uninstall 'package-name' --save-dev（从 devDependencies 中删除）。\n使用 yarn: yarn remove 'package-name'\n\n\n# 更新依赖包：\n\n使用 npm: npm update 'package-name' 或者 npm update（更新所有依赖包）。\n使用 yarn: yarn upgrade 'package-name' 或者 yarn upgrade（更新所有依赖包）。\n\n\n# 安装所有依赖：\n\n使用 npm: npm install。\n使用 yarn: yarn 或者 yarn install\n\n\n# 运行脚本：\n\n使用 npm: npm run 'script-name'\n使用 yarn: yarn 'script-name'\n\n\n# 查看已安装的包：\n\n使用 npm: npm list 或者 npm list --depth='depth'（以树状结构显示依赖关系）。\n使用 yarn: yarn list 或者 yarn list --depth='depth'（以树状结构显示依赖关系）。\n\n\n# 查看包信息：\n\n使用 npm: npm show 'package-name'。\n使用 yarn: yarn info 'package-name'\n\n\n# 缓存相关：\n\n使用 npm: npm cache clean 或者 npm cache verify（验证缓存）。\n使用 yarn: yarn cache clean。",normalizedContent:"# yarn和npm的对比\n\nyarn 和 npm 是两个javascript包管理器。它们的主要目的都是帮助开发人员下载、安装、更新和管理 javascript 包和依赖项。\nyarn 和 npm 在命令上的一些对比：\n\n\n# 初始化项目：\n\n使用 npm: npm init，它将引导您填写有关项目的信息，并在生成 package.json 文件时询问相关信息。\n使用 yarn: yarn init，与 npm 的 npm init 类似，用于初始化项目并生成 package.json 文件。\n\n\n# 安装依赖包：\n\n使用 npm: npm install 'package-name' 或者 npm install 'package-name'@'version'\n使用 yarn: yarn add 'package-name' 或者 yarn add 'package-name'@'version'\n\n\n# 安装开发依赖包：\n\n使用 npm: npm install 'package-name' --save-dev 或者 npm install 'package-name' -d\n使用 yarn: yarn add 'package-name' --dev 或者 yarn add 'package-name' -d\n\n\n# 全局安装包：\n\n使用 npm: npm install -g 'package-name'\n使用 yarn: yarn global add 'package-name'\n\n\n# 移除依赖包：\n\n使用 npm: npm uninstall 'package-name' 或者 npm uninstall 'package-name' --save（移除并从 dependencies 中删除）或 npm uninstall 'package-name' --save-dev（从 devdependencies 中删除）。\n使用 yarn: yarn remove 'package-name'\n\n\n# 更新依赖包：\n\n使用 npm: npm update 'package-name' 或者 npm update（更新所有依赖包）。\n使用 yarn: yarn upgrade 'package-name' 或者 yarn upgrade（更新所有依赖包）。\n\n\n# 安装所有依赖：\n\n使用 npm: npm install。\n使用 yarn: yarn 或者 yarn install\n\n\n# 运行脚本：\n\n使用 npm: npm run 'script-name'\n使用 yarn: yarn 'script-name'\n\n\n# 查看已安装的包：\n\n使用 npm: npm list 或者 npm list --depth='depth'（以树状结构显示依赖关系）。\n使用 yarn: yarn list 或者 yarn list --depth='depth'（以树状结构显示依赖关系）。\n\n\n# 查看包信息：\n\n使用 npm: npm show 'package-name'。\n使用 yarn: yarn info 'package-name'\n\n\n# 缓存相关：\n\n使用 npm: npm cache clean 或者 npm cache verify（验证缓存）。\n使用 yarn: yarn cache clean。",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1690267577e3},{title:"React的状态管理",frontmatter:{title:"React的状态管理",date:"2022-11-22T00:00:00.000Z",permalink:"/pages/91d1b5/",tags:["React"],sticky:2},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/29.React%E7%9A%84%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.html",relativePath:"01.前端/01.学过的习/29.React的状态管理.md",key:"v-0d80233e",path:"/pages/91d1b5/",headers:[{level:2,title:"React父子组件的通信",slug:"react父子组件的通信",normalizedTitle:"react父子组件的通信",charIndex:2},{level:2,title:"使用pubsub进行组间通信",slug:"使用pubsub进行组间通信",normalizedTitle:"使用pubsub进行组间通信",charIndex:434},{level:2,title:"使用 redux + react-redux 进行状态管理",slug:"使用-redux-react-redux-进行状态管理",normalizedTitle:"使用 redux + react-redux 进行状态管理",charIndex:753},{level:2,title:"redux浏览器插件的使用",slug:"redux浏览器插件的使用",normalizedTitle:"redux浏览器插件的使用",charIndex:3871}],headersStr:"React父子组件的通信 使用pubsub进行组间通信 使用 redux + react-redux 进行状态管理 redux浏览器插件的使用",content:"# React父子组件的通信\n\n1、父组件传值至子组件\n\nconst p1 = {\n    name:'程老师',\n    sex:'男',\n    age:19,\n    address:\"北七家镇\"\n}\n\n<Person {...p1}/> \n或者\n<Person name=\"tom\" sex=\"女\" age=\"18\"/>\n\n注：...p1，并不是原生js里的{...p1}，{}是jsx的写法要求\n\n\n2、子组件传值给父组件\n\n原理：父组件在prop传值的时候，将函数传递，子组件在使用prop的时候，调用该函数，打到传参的目的\n\n父组件：\nupdateAppState = (stateObj)=>{\n    this.setState(stateObj)\n}\n<Search updateAppState={this.updateAppState}/>\n\n子组件search：\nthis.props.updateAppState({...})\n\n\n\n\n# 使用pubsub进行组间通信\n\n1、安装\nnpm install pubsub-js\n\n\n2、使用\n\n//订阅消息（当前组件）\nthis.token = PubSub.subscribe('changeState',(stateObj)=>{\n    this.setState(stateObj)\n})\n\n//发布消息(其他组件)\nPubSub.publish('changeState',{test:'xxx'})\n\n//取消订阅（当前组件）\nPubSub.unsubscribe(this.token)\n\n\n\n存在的问题：当多个组件间互相通信，需要多个组件分别发布与订阅消息，存在一定的混乱，并且消息名也容易在后续中重复。\n\n\n# 使用 redux + react-redux 进行状态管理\n\nredux官网地址 | react-redux官网地址\n\n初始启动：\n\n * 使用最顶层的 root reducer 函数创建 Redux store\n * store 调用一次 root reducer，并将返回值保存为它的初始 state\n * 当视图 首次渲染时，视图组件访问 Redux store 的当前 state，并使用该数据来决定要呈现的内容。同时监听 store 的更新，以便他们可以知道 state 是否已更改。\n   \n\n更新环节：应用程序中发生了某些事情，例如用户单击按钮：\n\n * dispatch 一个 action 到 Redux store，例如 dispatch({type: 'counter/increment'})\n * store 用之前的 state 和当前的 action 再次运行 reducer 函数，并将返回值保存为新的 state\n * store 通知所有订阅过的视图，通知它们 store 发生更新\n * 每个订阅过 store 数据的视图 组件都会检查它们需要的 state 部分是否被更新。\n * 发现数据被更新的每个组件都强制使用新数据重新渲染，紧接着更新网页\n   \n\n1、安装\nnpm install redux\nnpm install react-redux\n\n\n2、使用\n\n---- 创建action----\nexport function createAddAction(number){\n\treturn {type:'add',data:number} \n}\n\nexport function createMinusAction(number){\n\treturn {type:'minus',data:number} \n}\n\nexport function createAddActionAsync(number){\n\t//模拟异步请求\n\treturn (dispatch)=>{\n\t\tsetTimeout(()=>{\n\t\t\tdispatch(createIncrementAction(number))\n\t\t},1000)\n\t}\n}\n注：根据不同的UI组件创建不同的组件对应的action文件\n\n\n\n\n---- 创建reducer，处理dispatch传过来的值----\nexport default function countReducer(preState=0,action){\n\t//从action对象中获取type和data\n\tconst {type,data} = action\n\tswitch (type) {\n\t\tcase 'add': \n\t\t\treturn preState + data\n\t\tcase 'minus': \n\t\t\treturn preState - data\n\t\tdefault: //初始化\n\t\t\treturn preState\n\t}\n}\n\n\n\n\n\n---- 创建store，该文件是整个redux中最为核心的store对象----\n\n//引入createStore，用于创建store对象\nimport {createStore,applyMiddleware,combineReducers} from 'redux'\n\n//引入为不同组件服务的reducer，用于：初始化状态、加工状态\nimport countReducer from './reducers/count'\nimport personReducer from './reducers/person'\n\n//引入thunk用于支持异步action(按需安装和引入)\nimport thunk from 'redux-thunk'\n\n//合并所有的reducer\nconst allReducer = combineReducers({\n\tcountInStore:countReducer,\n\tpersonsInStore:personReducer\n})\n\n//调用createStore创建并暴露store（注意传参顺序）\nexport default createStore(allReducer,applyMiddleware(thunk))\n\n\n\n\n\n---- 使用 react-redux 创建UI组件的容器组件----\n\n//引入action\nimport {createAddAction,createMinusAction,createAddActionAsync} from '../../redux/actions/count'\n\n//引入connect用于连接UI与redux，且connect()()可以生成容器组件\nimport {connect} from 'react-redux'\n\n//mapStateToProps用于给UI组件映射redux中的状态，通过props传递\n//mapDispatchToProps用于给UI组件映射修改状态的方法，通过props传递\n//UI是当前容器组件下对应的UI组件\n//connect(mapStateToProps, mapDispatchToProps)(UI)\n\n//暴露一个容器组件，容器组件需要通过prop传递store\nexport default connect(\n\t//映射状态,此state是store.js中 combineReducers 合并的reducers。\n\tstate => {\n\t\treturn {\n\t\t\tcountInUICount:state.countInStore,\n\t\t\tpersonsInUICount:state.personsInStore.length\n\t\t}\n\t}, \n\n\t//映射操作状态的方法\n\t/* dispatch => (\n\t\t{\n\t\t\tjia:number => dispatch(createIncrementAction(number)),\n\t\t\tjian:number => dispatch(createDecrementAction(number)),\n\t\t\tjiaAsync:number => dispatch(createIncrementAsyncAction(number)),\n\t\t}\n\t) */\n\t{\n\t\tjia: createIncrementAction,\n\t\tjian: createDecrementAction,\n\t\tjiaAsync: createIncrementAsyncAction,\n\t}\n)(Count)//引入的UI组件\n\n\n\n\n\n---- 使用react-redux的Provider传递store，解决每个容器都需要用prop传递store的问题 ----\n\nimport React from 'react'\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport store from './redux/store'\nimport {Provider} from 'react-redux'\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App/>\n\t</Provider>,\n\tdocument.getElementById('root'))\n\n\n\n\n\n\n\n\n# redux浏览器插件的使用\n\n1、安装Redux DevTools 2、配置store.js\n\n//引入\nimport {composeWithDevTools} from 'redux-devtools-extension'\n\n//在暴露store的时候，使用composeWithDevTools处理扩展方法\nexport default createStore(allReducer,composeWithDevTools(applyMiddleware(thunk)))\n\n",normalizedContent:"# react父子组件的通信\n\n1、父组件传值至子组件\n\nconst p1 = {\n    name:'程老师',\n    sex:'男',\n    age:19,\n    address:\"北七家镇\"\n}\n\n<person {...p1}/> \n或者\n<person name=\"tom\" sex=\"女\" age=\"18\"/>\n\n注：...p1，并不是原生js里的{...p1}，{}是jsx的写法要求\n\n\n2、子组件传值给父组件\n\n原理：父组件在prop传值的时候，将函数传递，子组件在使用prop的时候，调用该函数，打到传参的目的\n\n父组件：\nupdateappstate = (stateobj)=>{\n    this.setstate(stateobj)\n}\n<search updateappstate={this.updateappstate}/>\n\n子组件search：\nthis.props.updateappstate({...})\n\n\n\n\n# 使用pubsub进行组间通信\n\n1、安装\nnpm install pubsub-js\n\n\n2、使用\n\n//订阅消息（当前组件）\nthis.token = pubsub.subscribe('changestate',(stateobj)=>{\n    this.setstate(stateobj)\n})\n\n//发布消息(其他组件)\npubsub.publish('changestate',{test:'xxx'})\n\n//取消订阅（当前组件）\npubsub.unsubscribe(this.token)\n\n\n\n存在的问题：当多个组件间互相通信，需要多个组件分别发布与订阅消息，存在一定的混乱，并且消息名也容易在后续中重复。\n\n\n# 使用 redux + react-redux 进行状态管理\n\nredux官网地址 | react-redux官网地址\n\n初始启动：\n\n * 使用最顶层的 root reducer 函数创建 redux store\n * store 调用一次 root reducer，并将返回值保存为它的初始 state\n * 当视图 首次渲染时，视图组件访问 redux store 的当前 state，并使用该数据来决定要呈现的内容。同时监听 store 的更新，以便他们可以知道 state 是否已更改。\n   \n\n更新环节：应用程序中发生了某些事情，例如用户单击按钮：\n\n * dispatch 一个 action 到 redux store，例如 dispatch({type: 'counter/increment'})\n * store 用之前的 state 和当前的 action 再次运行 reducer 函数，并将返回值保存为新的 state\n * store 通知所有订阅过的视图，通知它们 store 发生更新\n * 每个订阅过 store 数据的视图 组件都会检查它们需要的 state 部分是否被更新。\n * 发现数据被更新的每个组件都强制使用新数据重新渲染，紧接着更新网页\n   \n\n1、安装\nnpm install redux\nnpm install react-redux\n\n\n2、使用\n\n---- 创建action----\nexport function createaddaction(number){\n\treturn {type:'add',data:number} \n}\n\nexport function createminusaction(number){\n\treturn {type:'minus',data:number} \n}\n\nexport function createaddactionasync(number){\n\t//模拟异步请求\n\treturn (dispatch)=>{\n\t\tsettimeout(()=>{\n\t\t\tdispatch(createincrementaction(number))\n\t\t},1000)\n\t}\n}\n注：根据不同的ui组件创建不同的组件对应的action文件\n\n\n\n\n---- 创建reducer，处理dispatch传过来的值----\nexport default function countreducer(prestate=0,action){\n\t//从action对象中获取type和data\n\tconst {type,data} = action\n\tswitch (type) {\n\t\tcase 'add': \n\t\t\treturn prestate + data\n\t\tcase 'minus': \n\t\t\treturn prestate - data\n\t\tdefault: //初始化\n\t\t\treturn prestate\n\t}\n}\n\n\n\n\n\n---- 创建store，该文件是整个redux中最为核心的store对象----\n\n//引入createstore，用于创建store对象\nimport {createstore,applymiddleware,combinereducers} from 'redux'\n\n//引入为不同组件服务的reducer，用于：初始化状态、加工状态\nimport countreducer from './reducers/count'\nimport personreducer from './reducers/person'\n\n//引入thunk用于支持异步action(按需安装和引入)\nimport thunk from 'redux-thunk'\n\n//合并所有的reducer\nconst allreducer = combinereducers({\n\tcountinstore:countreducer,\n\tpersonsinstore:personreducer\n})\n\n//调用createstore创建并暴露store（注意传参顺序）\nexport default createstore(allreducer,applymiddleware(thunk))\n\n\n\n\n\n---- 使用 react-redux 创建ui组件的容器组件----\n\n//引入action\nimport {createaddaction,createminusaction,createaddactionasync} from '../../redux/actions/count'\n\n//引入connect用于连接ui与redux，且connect()()可以生成容器组件\nimport {connect} from 'react-redux'\n\n//mapstatetoprops用于给ui组件映射redux中的状态，通过props传递\n//mapdispatchtoprops用于给ui组件映射修改状态的方法，通过props传递\n//ui是当前容器组件下对应的ui组件\n//connect(mapstatetoprops, mapdispatchtoprops)(ui)\n\n//暴露一个容器组件，容器组件需要通过prop传递store\nexport default connect(\n\t//映射状态,此state是store.js中 combinereducers 合并的reducers。\n\tstate => {\n\t\treturn {\n\t\t\tcountinuicount:state.countinstore,\n\t\t\tpersonsinuicount:state.personsinstore.length\n\t\t}\n\t}, \n\n\t//映射操作状态的方法\n\t/* dispatch => (\n\t\t{\n\t\t\tjia:number => dispatch(createincrementaction(number)),\n\t\t\tjian:number => dispatch(createdecrementaction(number)),\n\t\t\tjiaasync:number => dispatch(createincrementasyncaction(number)),\n\t\t}\n\t) */\n\t{\n\t\tjia: createincrementaction,\n\t\tjian: createdecrementaction,\n\t\tjiaasync: createincrementasyncaction,\n\t}\n)(count)//引入的ui组件\n\n\n\n\n\n---- 使用react-redux的provider传递store，解决每个容器都需要用prop传递store的问题 ----\n\nimport react from 'react'\nimport reactdom from 'react-dom';\nimport app from './app'\nimport store from './redux/store'\nimport {provider} from 'react-redux'\n\nreactdom.render(\n\t<provider store={store}>\n\t\t<app/>\n\t</provider>,\n\tdocument.getelementbyid('root'))\n\n\n\n\n\n\n\n\n# redux浏览器插件的使用\n\n1、安装redux devtools 2、配置store.js\n\n//引入\nimport {composewithdevtools} from 'redux-devtools-extension'\n\n//在暴露store的时候，使用composewithdevtools处理扩展方法\nexport default createstore(allreducer,composewithdevtools(applymiddleware(thunk)))\n\n",charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1690267577e3},{title:"elementUI使用问题",frontmatter:{title:"elementUI使用问题",permalink:"/pages/3fea03/",date:2020,categories:["前端","踩过的坑"],tags:[null]},regularPath:"/01.%E5%89%8D%E7%AB%AF/03.%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/01.elementUI%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98.html",relativePath:"01.前端/03.踩过的坑/01.elementUI使用问题.md",key:"v-d240f2ea",path:"/pages/3fea03/",headers:[{level:2,title:"1、el-input无法输入的问题",slug:"_1、el-input无法输入的问题",normalizedTitle:"1、el-input无法输入的问题",charIndex:2},{level:2,title:"3、el-form校验问题",slug:"_3、el-form校验问题",normalizedTitle:"3、el-form校验问题",charIndex:507},{level:2,title:"4、封装下拉框传参问题",slug:"_4、封装下拉框传参问题",normalizedTitle:"4、封装下拉框传参问题",charIndex:694},{level:2,title:"5、el-input绑定点击事件",slug:"_5、el-input绑定点击事件",normalizedTitle:"5、el-input绑定点击事件",charIndex:825}],headersStr:"1、el-input无法输入的问题 3、el-form校验问题 4、封装下拉框传参问题 5、el-input绑定点击事件",content:'# 1、el-input无法输入的问题\n\n原因分析：\n\n\n * 1、el-form标签下的层级结构不统一 比如有el-form下面有的行加上了el-row，有的没有加上el-row，可能会导致输入框的内容无法输入。也就是要保证el-form-item上面的层级是一致的。\n   \n\n * 2、页面加载的时候，未在data进行定义（会出现第一次输入无用，点击其他地方的时候显示） 主要是保证输入框绑定的值在data中提前定义好，或者调用$set 进行数据的双向绑定。\n   \n   ##/2、element-ui 的el-form的问题（回车默认提交） element-ui的el-form的中如果只有一个input框，当按下enter键时，会默认出发提交事件，刷新页面。\n   解决办法：在el-form中加入@submit.native.prevent 来使提交后不刷新页面，从而解决这个问题\n\n<el-form :model="test" size="mini" label-width=“70px” @submit.native.prevent>\n.........\n</el-form>\n\n\n\n\n\n\n\n# 3、el-form校验问题\n\n校验时发现就算输入框中有值，依旧会出现红色提示，无法校验成功。\n解决办法：需要保证model内的对象初始化时，有需要校验的参数。并且要保证prop值正确\n\ndata(){\n  return{\n       submitData:{\n              checkMan:\'\',\n          }\n    }\n}\n\n\n\n\n\n\n\n# 4、封装下拉框传参问题\n\n封装element的下拉框时，发现将value的类型指定为String时，开启多选时会报错，指定Object时，单选时也会报错。\n解决办法：prop传参应该设置为：value:[Array,String],避免获取不到想要的值\n\n\n# 5、el-input绑定点击事件\n\n1、在使用的时候，如果给整个输入框绑定一个点击事件，但是这个输入框不是必填，就会导致选择之后，无法删除 解决方案：单独给input框的图标绑定点击事件，不对整个输入框绑定点击事件。\n\n2、type=number的时候，清除按钮会和数字增加的按钮重合 解决方案：使用suffix插槽，单独处理',normalizedContent:'# 1、el-input无法输入的问题\n\n原因分析：\n\n\n * 1、el-form标签下的层级结构不统一 比如有el-form下面有的行加上了el-row，有的没有加上el-row，可能会导致输入框的内容无法输入。也就是要保证el-form-item上面的层级是一致的。\n   \n\n * 2、页面加载的时候，未在data进行定义（会出现第一次输入无用，点击其他地方的时候显示） 主要是保证输入框绑定的值在data中提前定义好，或者调用$set 进行数据的双向绑定。\n   \n   ##/2、element-ui 的el-form的问题（回车默认提交） element-ui的el-form的中如果只有一个input框，当按下enter键时，会默认出发提交事件，刷新页面。\n   解决办法：在el-form中加入@submit.native.prevent 来使提交后不刷新页面，从而解决这个问题\n\n<el-form :model="test" size="mini" label-width=“70px” @submit.native.prevent>\n.........\n</el-form>\n\n\n\n\n\n\n\n# 3、el-form校验问题\n\n校验时发现就算输入框中有值，依旧会出现红色提示，无法校验成功。\n解决办法：需要保证model内的对象初始化时，有需要校验的参数。并且要保证prop值正确\n\ndata(){\n  return{\n       submitdata:{\n              checkman:\'\',\n          }\n    }\n}\n\n\n\n\n\n\n\n# 4、封装下拉框传参问题\n\n封装element的下拉框时，发现将value的类型指定为string时，开启多选时会报错，指定object时，单选时也会报错。\n解决办法：prop传参应该设置为：value:[array,string],避免获取不到想要的值\n\n\n# 5、el-input绑定点击事件\n\n1、在使用的时候，如果给整个输入框绑定一个点击事件，但是这个输入框不是必填，就会导致选择之后，无法删除 解决方案：单独给input框的图标绑定点击事件，不对整个输入框绑定点击事件。\n\n2、type=number的时候，清除按钮会和数字增加的按钮重合 解决方案：使用suffix插槽，单独处理',charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1690795614e3},{title:"websocket的使用",frontmatter:{title:"websocket的使用",date:"2023-08-16T00:00:00.000Z",permalink:"/pages/37e8bf/",tags:["JavaScript","Vue"]},regularPath:"/01.%E5%89%8D%E7%AB%AF/01.%E5%AD%A6%E8%BF%87%E7%9A%84%E4%B9%A0/32.websocket%E7%9A%84%E4%BD%BF%E7%94%A8.html",relativePath:"01.前端/01.学过的习/32.websocket的使用.md",key:"v-1a064d8d",path:"/pages/37e8bf/",headers:[{level:2,title:"WebSocket的使用",slug:"websocket的使用",normalizedTitle:"websocket的使用",charIndex:2},{level:3,title:"WebSocket概念",slug:"websocket概念",normalizedTitle:"websocket概念",charIndex:19},{level:3,title:"js中使用WebSocket",slug:"js中使用websocket",normalizedTitle:"js中使用websocket",charIndex:840},{level:3,title:"vue中使用 WebSocket",slug:"vue中使用-websocket",normalizedTitle:"vue中使用 websocket",charIndex:1777}],headersStr:"WebSocket的使用 WebSocket概念 js中使用WebSocket vue中使用 WebSocket",content:'# WebSocket的使用\n\n\n# WebSocket概念\n\nWebSocket 是一种常用的网络协议。它允许在单个 TCP 连接上建立双向通信通道，以便服务器和客户端可以在任何时候交换数据。 WebSocket 被设计用于取代传统的基于 HTTP 请求-响应模式的轮询或长轮询方法，从而实现更高效的实时通信\n\n\n主要特点：\n\n * 持久性： WebSocket 连接在客户端和服务器之间始终保持打开状态，而不需要在每次通信时都重新建立连接。这种持久性减少了连接建立和断开的开销，提高了通信的效率。\n * 双向通信： WebSocket 允许服务器和客户端之间双向发送消息。服务器可以向客户端推送数据，客户端也可以主动向服务器发送数据，实现实时的双向通信。\n * 低延迟： 由于连接的持久性和双向通信特性，WebSocket 可以在数据到达时立即将其推送给接收方，从而实现低延迟的通信。\n\n\n协议支持： WebSocket 是一种独立的协议，不同于 HTTP，但仍使用 HTTP 进行握手和升级连接。这意味着 WebSocket 可以在现有的网络基础设施上运行，因为大多数网络环境允许 HTTP 流量通过。WebSocket 连接的端口号通常是 80（HTTP）或 443（HTTPS）。\n\n\n数据格式： WebSocket 并没有指定特定的数据格式，允许开发者根据应用需求自由选择数据格式，例如 JSON、XML、二进制数据等。\n\n\n安全性： 与其他网络协议一样，WebSocket 通信也需要考虑安全性。可以通过使用安全套接字层（SSL/TLS）来加密通信数据，确保数据在传输过程中的保密性和完整性。\n\n\n使用场景： 实时聊天和通信应用；金融和股票市场；在线编辑和协同文档；实时视频和音频通信；通知和提醒系统：比特币网站； 在线提醒、通知和推送系统，例如在后端数据更新时实时通知用户，WebSocket 可以让服务器向客户端推送通知，避免了客户端轮询的开销；等等\n\n\n\n# js中使用WebSocket\n\n\n//1.创建 WebSocket 对象, 参数:服务器的 WebSocket URL \nconst socket = new WebSocket("ws://xxx/socket");\n\n\n\n//2.监听事件： WebSocket 对象会触发不同类型的事件，用于处理连接的不同状态和数据的接收。\n\n//open：连接成功建立时触发。\nsocket.addEventListener("open", (event) => {\n  console.log("WebSocket connection opened");\n});\n\n//message：接收到消息时触发。\nsocket.addEventListener("message", (event) => {\n  const message = event.data;\n  console.log("Received message:", message);\n});\n\n//close：连接关闭时触发。\nsocket.addEventListener("close", (event) => {\n  console.log("WebSocket connection closed");\n});\n\n//error：连接发生错误时触发。\nsocket.addEventListener("error", (event) => {\n  console.error("WebSocket error:", event);\n});\n\n\n\n// 3.发送和接收数据\n\n// 发送消息\nconst messageToSend = "Hello, server!";\nsocket.send(messageToSend);\n\n// 接收消息\nsocket.addEventListener("message", (event) => {\n  const receivedMessage = event.data;\n  console.log("Received message:", receivedMessage);\n});\n\n\n// 4.关闭连接\nsocket.close();\n\n\n\n\n\n\n\n# vue中使用 WebSocket\n\n1、安装 WebSocket 库（vue-native-websocket）：\n\nnpm install vue-native-websocket\n\n\n2、组件中引入，并使用\n\n<template>\n  <div>\n    <button @click="sendMessage">Send Message</button>\n  </div>\n</template>\n\n\n<script>\nimport VueNativeSock from "vue-native-websocket";\nexport default {\n  \n  created() {\n    //基本配置\n    Vue.use(VueNativeSock, "ws://xxx/socket", {\n      format: "json",\n      reconnection: true, // 是否自动重连\n      reconnectionAttempts: 5, // 重连尝试次数\n    });\n    \n    //接收消息并处理\n    this.$options.sockets.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      console.log("message:", message);\n    };\n  },\n  \n  \n  methods: {\n    //发送消息\n    sendMessage() {\n      const messageToSend = { text: "Hello, server!" };\n      this.$socket.sendObj(messageToSend);\n    },\n  }, \n  \n  \n  beforeDestroy() {\n    //关闭连接\n    this.$socket.close();\n  }\n};\n<\/script>\n\n',normalizedContent:'# websocket的使用\n\n\n# websocket概念\n\nwebsocket 是一种常用的网络协议。它允许在单个 tcp 连接上建立双向通信通道，以便服务器和客户端可以在任何时候交换数据。 websocket 被设计用于取代传统的基于 http 请求-响应模式的轮询或长轮询方法，从而实现更高效的实时通信\n\n\n主要特点：\n\n * 持久性： websocket 连接在客户端和服务器之间始终保持打开状态，而不需要在每次通信时都重新建立连接。这种持久性减少了连接建立和断开的开销，提高了通信的效率。\n * 双向通信： websocket 允许服务器和客户端之间双向发送消息。服务器可以向客户端推送数据，客户端也可以主动向服务器发送数据，实现实时的双向通信。\n * 低延迟： 由于连接的持久性和双向通信特性，websocket 可以在数据到达时立即将其推送给接收方，从而实现低延迟的通信。\n\n\n协议支持： websocket 是一种独立的协议，不同于 http，但仍使用 http 进行握手和升级连接。这意味着 websocket 可以在现有的网络基础设施上运行，因为大多数网络环境允许 http 流量通过。websocket 连接的端口号通常是 80（http）或 443（https）。\n\n\n数据格式： websocket 并没有指定特定的数据格式，允许开发者根据应用需求自由选择数据格式，例如 json、xml、二进制数据等。\n\n\n安全性： 与其他网络协议一样，websocket 通信也需要考虑安全性。可以通过使用安全套接字层（ssl/tls）来加密通信数据，确保数据在传输过程中的保密性和完整性。\n\n\n使用场景： 实时聊天和通信应用；金融和股票市场；在线编辑和协同文档；实时视频和音频通信；通知和提醒系统：比特币网站； 在线提醒、通知和推送系统，例如在后端数据更新时实时通知用户，websocket 可以让服务器向客户端推送通知，避免了客户端轮询的开销；等等\n\n\n\n# js中使用websocket\n\n\n//1.创建 websocket 对象, 参数:服务器的 websocket url \nconst socket = new websocket("ws://xxx/socket");\n\n\n\n//2.监听事件： websocket 对象会触发不同类型的事件，用于处理连接的不同状态和数据的接收。\n\n//open：连接成功建立时触发。\nsocket.addeventlistener("open", (event) => {\n  console.log("websocket connection opened");\n});\n\n//message：接收到消息时触发。\nsocket.addeventlistener("message", (event) => {\n  const message = event.data;\n  console.log("received message:", message);\n});\n\n//close：连接关闭时触发。\nsocket.addeventlistener("close", (event) => {\n  console.log("websocket connection closed");\n});\n\n//error：连接发生错误时触发。\nsocket.addeventlistener("error", (event) => {\n  console.error("websocket error:", event);\n});\n\n\n\n// 3.发送和接收数据\n\n// 发送消息\nconst messagetosend = "hello, server!";\nsocket.send(messagetosend);\n\n// 接收消息\nsocket.addeventlistener("message", (event) => {\n  const receivedmessage = event.data;\n  console.log("received message:", receivedmessage);\n});\n\n\n// 4.关闭连接\nsocket.close();\n\n\n\n\n\n\n\n# vue中使用 websocket\n\n1、安装 websocket 库（vue-native-websocket）：\n\nnpm install vue-native-websocket\n\n\n2、组件中引入，并使用\n\n<template>\n  <div>\n    <button @click="sendmessage">send message</button>\n  </div>\n</template>\n\n\n<script>\nimport vuenativesock from "vue-native-websocket";\nexport default {\n  \n  created() {\n    //基本配置\n    vue.use(vuenativesock, "ws://xxx/socket", {\n      format: "json",\n      reconnection: true, // 是否自动重连\n      reconnectionattempts: 5, // 重连尝试次数\n    });\n    \n    //接收消息并处理\n    this.$options.sockets.onmessage = (event) => {\n      const message = json.parse(event.data);\n      console.log("message:", message);\n    };\n  },\n  \n  \n  methods: {\n    //发送消息\n    sendmessage() {\n      const messagetosend = { text: "hello, server!" };\n      this.$socket.sendobj(messagetosend);\n    },\n  }, \n  \n  \n  beforedestroy() {\n    //关闭连接\n    this.$socket.close();\n  }\n};\n<\/script>\n\n',charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1692166469e3},{title:"待整理的坑",frontmatter:{title:"待整理的坑",permalink:"/pages/eca0d9/",date:2020,categories:["前端","踩过的坑"],tags:[null]},regularPath:"/01.%E5%89%8D%E7%AB%AF/03.%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/02.%E5%BE%85%E6%95%B4%E7%90%86%E7%9A%84%E5%9D%91%20.html",relativePath:"01.前端/03.踩过的坑/02.待整理的坑 .md",key:"v-d9ea4ff8",path:"/pages/eca0d9/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:null,lastUpdatedTimestamp:1690795614e3},{title:"想过的事",frontmatter:{title:"想过的事",permalink:"/pages/9a1e83/",date:2020,categories:["前端","想过的事"],tags:[null],sticky:1},regularPath:"/01.%E5%89%8D%E7%AB%AF/02.%E6%83%B3%E8%BF%87%E7%9A%84%E4%BA%8B/01.%E9%9A%8F%E7%AC%94.html",relativePath:"01.前端/02.想过的事/01.随笔.md",key:"v-544d8b0c",path:"/pages/9a1e83/",headers:[{level:2,title:"记录脑海里突然的疑问",slug:"记录脑海里突然的疑问",normalizedTitle:"记录脑海里突然的疑问",charIndex:2},{level:3,title:"1.我们在父组件向子组件传递参数时，用prop的时候，有几种情况:",slug:"_1-我们在父组件向子组件传递参数时-用prop的时候-有几种情况",normalizedTitle:"1.我们在父组件向子组件传递参数时，用prop的时候，有几种情况:",charIndex:17},{level:3,title:"2.组件的data一般都是函数，不是对象。主要是为了组件在被引入的时候，避免多次引入的组件指向了同一个对象。",slug:"_2-组件的data一般都是函数-不是对象。主要是为了组件在被引入的时候-避免多次引入的组件指向了同一个对象。",normalizedTitle:"2.组件的data一般都是函数，不是对象。主要是为了组件在被引入的时候，避免多次引入的组件指向了同一个对象。",charIndex:396},{level:3,title:"3.作用域插槽与匿名插槽，具名插槽相比，不同之处在于显示的数据是由子组件提供的，父组件只提供展示的样式。",slug:"_3-作用域插槽与匿名插槽-具名插槽相比-不同之处在于显示的数据是由子组件提供的-父组件只提供展示的样式。",normalizedTitle:"3.作用域插槽与匿名插槽，具名插槽相比，不同之处在于显示的数据是由子组件提供的，父组件只提供展示的样式。",charIndex:459},{level:3,title:"4.null和undefined，初始赋值null，let a = null,表示a存储对象在未来，未赋值就是undefined",slug:"_4-null和undefined-初始赋值null-let-a-null-表示a存储对象在未来-未赋值就是undefined",normalizedTitle:"4.null和undefined，初始赋值null，let a = null,表示a存储对象在未来，未赋值就是undefined",charIndex:3011},{level:3,title:"5.什么是盒子模型 ：",slug:"_5-什么是盒子模型-参考博客",normalizedTitle:"5.什么是盒子模型 ：",charIndex:3890},{level:3,title:"6.class的定义与继承，原理",slug:"_6-class的定义与继承-原理",normalizedTitle:"6.class的定义与继承，原理",charIndex:4355},{level:3,title:"7.new的时候干了啥",slug:"_7-new的时候干了啥",normalizedTitle:"7.new的时候干了啥",charIndex:4391},{level:3,title:"8.数组reduce",slug:"_8-数组reduce",normalizedTitle:"8.数组reduce",charIndex:5015},{level:3,title:"9.堆和栈的理解",slug:"_9-堆和栈的理解",normalizedTitle:"9.堆和栈的理解",charIndex:6041},{level:3,title:"10.事件委托和事件冒泡,事件捕获:",slug:"_10-事件委托和事件冒泡-事件捕获-参考博客",normalizedTitle:"10.事件委托和事件冒泡,事件捕获:",charIndex:6412},{level:3,title:"11.表单组件默认操作，阻止默认事件:",slug:"_11-表单组件默认操作-阻止默认事件-参考博客",normalizedTitle:"11.表单组件默认操作，阻止默认事件:",charIndex:7659},{level:3,title:"12.原型链画图",slug:"_12-原型链画图",normalizedTitle:"12.原型链画图",charIndex:7711},{level:3,title:"13.接口返回的字节流和文件是怎么下载的",slug:"_13-接口返回的字节流和文件是怎么下载的",normalizedTitle:"13.接口返回的字节流和文件是怎么下载的",charIndex:7725},{level:3,title:"14.scollHeight，scollTop等属性的使用",slug:"_14-scollheight-scolltop等属性的使用",normalizedTitle:"14.scollheight，scolltop等属性的使用",charIndex:7751},{level:3,title:"15.ajax，axios，fetch",slug:"_15-ajax-axios-fetch",normalizedTitle:"15.ajax，axios，fetch",charIndex:9140},{level:3,title:"16.在react和redux中，尽量少用push和unshift，这样会改变所有元素的位置，底层算法有时会比较堆内存，相同可能不会出发更新。",slug:"_16-在react和redux中-尽量少用push和unshift-这样会改变所有元素的位置-底层算法有时会比较堆内存-相同可能不会出发更新。",normalizedTitle:"16.在react和redux中，尽量少用push和unshift，这样会改变所有元素的位置，底层算法有时会比较堆内存，相同可能不会出发更新。",charIndex:9229},{level:3,title:"17.if判断有哪些情况会自动计算boolean值",slug:"_17-if判断有哪些情况会自动计算boolean值",normalizedTitle:"17.if判断有哪些情况会自动计算boolean值",charIndex:9306},{level:3,title:"18.网页怎么变黑白",slug:"_18-网页怎么变黑白",normalizedTitle:"18.网页怎么变黑白",charIndex:9625},{level:3,title:"19.展开运算符",slug:"_19-展开运算符",normalizedTitle:"19.展开运算符",charIndex:9673},{level:3,title:"20.DOM",slug:"_20-dom",normalizedTitle:"20.dom",charIndex:10243},{level:3,title:"21.或者运算符",slug:"_21-或者运算符",normalizedTitle:"21.或者运算符",charIndex:10911},{level:3,title:"22.工具类如何全局注册",slug:"_22-工具类如何全局注册",normalizedTitle:"22.工具类如何全局注册",charIndex:11158},{level:3,title:"23.nginx服务器的使用",slug:"_23-nginx服务器的使用",normalizedTitle:"23.nginx服务器的使用",charIndex:11175},{level:3,title:"24.url传递参数的最大限制",slug:"_24-url传递参数的最大限制",normalizedTitle:"24.url传递参数的最大限制",charIndex:11194},{level:3,title:"25.blob对象的下载",slug:"_25-blob对象的下载",normalizedTitle:"25.blob对象的下载",charIndex:11214},{level:3,title:"26.git rebase和git merge的区别",slug:"_26-git-rebase和git-merge的区别",normalizedTitle:"26.git rebase和git merge的区别",charIndex:11231},{level:3,title:"27.js的&&",slug:"_27-js的",normalizedTitle:"27.js的&amp;&amp;",charIndex:null},{level:3,title:"28. 为什么0.1+0.2 ！= 0.3",slug:"_28-为什么0-1-0-2-0-3",normalizedTitle:"28. 为什么0.1+0.2 ！= 0.3",charIndex:11667},{level:3,title:"29.使用axios的时候的坑",slug:"_29-使用axios的时候的坑",normalizedTitle:"29.使用axios的时候的坑",charIndex:12856}],headersStr:"记录脑海里突然的疑问 1.我们在父组件向子组件传递参数时，用prop的时候，有几种情况: 2.组件的data一般都是函数，不是对象。主要是为了组件在被引入的时候，避免多次引入的组件指向了同一个对象。 3.作用域插槽与匿名插槽，具名插槽相比，不同之处在于显示的数据是由子组件提供的，父组件只提供展示的样式。 4.null和undefined，初始赋值null，let a = null,表示a存储对象在未来，未赋值就是undefined 5.什么是盒子模型 ： 6.class的定义与继承，原理 7.new的时候干了啥 8.数组reduce 9.堆和栈的理解 10.事件委托和事件冒泡,事件捕获: 11.表单组件默认操作，阻止默认事件: 12.原型链画图 13.接口返回的字节流和文件是怎么下载的 14.scollHeight，scollTop等属性的使用 15.ajax，axios，fetch 16.在react和redux中，尽量少用push和unshift，这样会改变所有元素的位置，底层算法有时会比较堆内存，相同可能不会出发更新。 17.if判断有哪些情况会自动计算boolean值 18.网页怎么变黑白 19.展开运算符 20.DOM 21.或者运算符 22.工具类如何全局注册 23.nginx服务器的使用 24.url传递参数的最大限制 25.blob对象的下载 26.git rebase和git merge的区别 27.js的&& 28. 为什么0.1+0.2 ！= 0.3 29.使用axios的时候的坑",content:'# 记录脑海里突然的疑问\n\n\n# 1.我们在父组件向子组件传递参数时，用prop的时候，有几种情况:\n\n * 传递的是基础数据类型的数据，这时候在子组件进行修改的时候，父组件是不会发生变化的。\n * 传递的是对象类型的数据，这时候在子组件对这个对象进行修改的时候，会同时更改了父组件的对象（不提倡）。注：在子组件重新赋值另一个对象的时候，不会更改父组件的数据，父子组件的连接就切断了。\n * 传递的是函数类型的数据，一般是为了让子组件向父组件传递数据的时候使用的。子组件在操作时，调用传递的函数时传入形参，函数在执行时，父组件拿到参数。\n\n\nlet a = 3;\nb = a;\n改变a的时候，b不会发生变化\n\nlet a = {\n   test:\'3\'\n}\nb = a;\n改变a ，b也会发生变化，但是\nb={\n  test2:\'4\'\n}\nb和a指向的对象不同了，互不影响了。\n\n\n\n\n\n# 2.组件的data一般都是函数，不是对象。主要是为了组件在被引入的时候，避免多次引入的组件指向了同一个对象。\n\n\n\n\n\n\n# 3.作用域插槽与匿名插槽，具名插槽相比，不同之处在于显示的数据是由子组件提供的，父组件只提供展示的样式。\n\n\n\n\n\n1、具名插槽：<slot> 元素有一个特殊的 attribute：name。这个 attribute 可以用来定义额外的插槽：\n子：\n    <div class="container">\n      <header>\n        <slot name="header"></slot>\n      </header>\n      <main>\n        <slot></slot>\n      </main>\n      <footer>\n        <slot name="footer"></slot>\n      </footer>\n    </div>\n    \n父：    \n    <base-layout>\n      <template v-slot:header>\n        <h1>Here might be a page title</h1>\n      </template>\n    \n      <p>A paragraph for the main content.</p>\n      <p>And another one.</p>\n    \n      <template #footer>\n        <p>Here\'s some contact info</p>\n      </template>\n    </base-layout>\n\n注意: v-slot 只能添加在 <template> 上 (只有一种例外情况，独占默认插槽)，这一点和已经废弃的 slot attribute 不同。\n在父组件上使用v-slot:插槽名称,这个是vue2.6.0以后的写法,在vue2.6.0之前,可以在模板上使用slot="插槽的名称"，#footer是v-slot:footer简写\n\n\n2、匿名插槽:组件中只能有一个，匹配完所有的具名插槽之后，剩余的的匹配匿名插槽(默认插槽)\n子：\n    <div class="container">\n      <header>\n        <slot name="header"></slot>\n      </header>\n      <main>\n        <slot></slot>\n      </main>\n      <footer>\n        <slot name="footer"></slot>\n      </footer>\n    </div>\n\n父：\n    <base-layout>\n      <template v-slot:header>\n        <h1>Here might be a page title</h1>\n      </template>\n    \n      <p>A paragraph for the main content.</p>\n      <p>And another one.</p>\n    \n      <template v-slot:footer>\n        <p>Here\'s some contact info</p>\n      </template>\n    </base-layout>\n    \n现在 <template> 元素中的所有内容都将会被传入相应的插槽。\n任何没有被包裹在带有 v-slot 的 <template> 中的内容都会被视为默认插槽的内容。\n然而，如果你希望更明确一些，仍然可以在一个 <template> 中包裹默认插槽的内容：\n    <base-layout>\n      <template v-slot:header>\n        <h1>Here might be a page title</h1>\n      </template>\n    \n      <template v-slot:default>\n        <p>A paragraph for the main content.</p>\n        <p>And another one.</p>\n      </template>\n    \n      <template v-slot:footer>\n        <p>Here\'s some contact info</p>\n      </template>\n    </base-layout>\n\n3、作用域插槽\n\n子：user是子组件的属性\n    <span>\n      <slot v-bind:user="user" name=\'juming\'>\n        {{ user.lastName }} //默认展示\n      </slot>\n    </span>\n\n父：父组件使用子组件的属性\n    <current-user>\n      <template v-slot:juming="slotProps">\n        {{ slotProps.user.firstName }}\n      </template>\n    </current-user>\n\n\n独占默认插槽：作用域插槽中，当被提供的内容只有 默认插槽 时，组件的标签才可以被当作插槽的模板来使用。\n这样我们就可以把 v-slot 直接用在组件上：\n    <current-user v-slot:default="slotProps"> //默认插槽这么用\n      {{ slotProps.user.firstName }}\n    </current-user>\n\n\n这种写法还可以更简单。就像假定未指明的内容对应默认插槽一样，不带参数的 v-slot 被假定对应默认插槽：\n    <current-user v-slot="slotProps">\n      {{ slotProps.user.firstName }}\n    </current-user>\n\n\n\n\n# 4.null和undefined，初始赋值null，let a = null,表示a存储对象在未来，未赋值就是undefined\n\n\n参考博客\n\n\njs的基本数据类型：\n - 五种简单数据类型(基本数据类型)：Undefined、Null、Boolean、Number 和 String \n - 复杂数据类型：Object。\n\n\nundefined：\n - 声明了一个变量，但未对其初始化时，这个变量的值就是undefined。\n    var data;\n    console.log(data === undefined); //true\n    console.log(typeof data); //"undefined"\n\n注：如果data变量未提前声明：console.log(data === undefined); //报错\n因为对于尚未声明过的变量，我们只能执行一项操作，即使用typeof操作符检测其数据类型，使用其他的操作都会报错。\n一个函数如果没有使用return语句指定返回值，就会返回一个undefined值，或者调用函数时没有传参数值，参数同样也会被初始化为undefined值。\n\n\n\nnull：\n - null值表示一个空对象指针，指示变量未指向任何对象\n    var data = null;\n    console.log(typeof data); // "object"\n\n注：如果定义的变量在将来用于保存对象，最好将该变量初始化为null，当一个数据不再需要使用时，最好通过将其值设置为null来释放其引用（解除引用）。\nconsole.log(null == undefined); //true ---undefined值是派生自null值的，因此ECMA-262规定对它们的相等性测试要返回true:  \nconsole.log(null === undefined); //false\n标准相等符==,会转换其操作数为相同类型后再做比较；  严格相等符===，不会进行类型转换；\n\n\n\n\n\n\n\n\n\n# 5.什么是盒子模型 ：参考博客\n\n\n * 盒子模型是CSS技术所使用的一种思维模型。我们可以把css盒子模型当成日常中的一个盒子去理解。\n * content就是盒子里装的东西，它有高度（height）和宽度（width）,可以是图片，可以是文字或者小盒子嵌套，在现实中，内容不能大于盒子，内容大于盒子就会撑破盒子，但在css中，盒子有弹性的，顶多内容太大就会撑大盒子，但是不会损害盒子。\n * padding即是填充，就好像我们为了保证盒子里的东西不损坏，填充了一些东西，比如泡沫或者塑料薄膜，填充物有大有小，有软有硬，反应在网页中就是padding的大小了。\n * border就是再外一层的边框，因为边框有大小和颜色的属性，相当于盒子的厚度和它的颜色或者材料。\n * margin外边距，就是我们的盒子与其他的盒子或者其他东西的距离。假如有很多盒子，margin就是盒子之间直接的距离，可以通风，也美观同时方便取出。\n * css盒子模型有两种，一种是W3C盒模型也就是标准模型，另一种是IE盒模型\n   \n   \n\n\n# 6.class的定义与继承，原理\n\n\n跳转至ES6学习记录\n\n\n\n\n# 7.new的时候干了啥\n\n\n(1) 创建一个新对象；\n(2) 将构造函数的作用域赋给新对象（链接到原型,绑定this值） ；\n(3) 执行构造函数中的代码（为这个新对象添加属性） ；\n(4) 返回新对象。\n\n\n//定义一个Person类\nclass Person {\n    constructor(name,age){\n        this.name = name\n        this.age = age\n    }\n    speak(){\n        console.log(`我的名字是${this.name}，年龄是${this.age}`);\n    }\n}\n\nlet a = new Person(\'tom\',13);\nconsole.log(a,\'this is a\')；\n\n\n// 打印结果\nPerson {name: \'tom\', age: 13}\nage: 13\nname: "tom"\n--[[Prototype]]: Object\n    constructor: class Person\n    speak: ƒ speak()\n    [[Prototype]]: Object\n\n\n//模拟过程\nlet a = {}; //创建空对象\na.__proto__ = Person.prototype;//会报错，仅模拟\nPerson.call(a);//绑定this\nreturn a;\n\n\n\n\n\n# 8.数组reduce\n\n\n语法：\n    arr.reduce((preValue, current, index, arr)=>{},initialValue)\n\n    arr：当前操作的数组\n    preValue:第一次执行回调时为给定的初始值initialValue，以后是上一次执行回调时的返回值。\n            备注：若没有传入initialValue，则第一次的preValue值是数组中第一个元素的值。\n    current 表示当前正在处理的元素；\n    index 表示当前正在处理的数组元素的索引，若传入了initialValue值，则为0，否则为1；\n    array 当前操作的数组(就是arr)\n    initialValue 表示初始值。一般做数学运算时设置为0，若为筛选最值可以不传。\n\n\n数组求和\n    const x = arr.reduce((preValue,current)=>{\n        console.log(preValue,current); \n        return preValue+current\n    }) \n\n\n数组中所有偶数的和---（条件求和）\n    const x = arr.reduce((preValue,current)=> preValue + (current % 2 === 0 ? current : 0),0)\n\n\n数组中偶数有几个---（条件统计）\n    const x = arr.reduce((preValue,current)=> preValue + (current % 2 === 0 ? 1 : 0),0)\n\n\n数组中所有偶数的乘积---（条件计算）\n    const x = arr.reduce((preValue,current)=>{\n        return preValue * (current % 2 === 0 ? current : 1)\n    },1)\n\n\n数组中最小值-----(筛选最值)\n    const x = arr.reduce((preValue,current)=>{\n        console.log(preValue,current);\n        return Math.max(preValue,current)\n    }) \n\n\n\n# 9.堆和栈的理解\n\n\n栈内存： 主要用于存放基本类型和对象变量的指针，给人的感觉就像是一个个线性排列的空间，每个小单元大小基本相等，存放的变量一般都是已知大小或者已知上限范围的，算是一种简单存储。 栈内存自动分配相对固定大小的内存空间，并由系统自动释放。\n\n堆内存： 主要用于存放引用类型诸如object这类，存储的对象类型数据对于大小在这方面都是未知的。（所以这大概也是为什么null作为一个object类型的变量却存储在栈内存中的原因）。 堆内存是动态分配内存，内存大小不一，也不会自动释放。\n\n总结： 从一个变量向另外一个变量复制基本类型的数据，会创建这个值的一个副本。从一个变量向另外一个变量复制引用类型的数据，复制的其实是这个值的一个指针，因此两个变量最终指向的都是同一个对象，即复制的是栈中的指针而不是堆中的对象。\n\n\n\n\n\n# 10.事件委托和事件冒泡,事件捕获:参考博客\n\n\n事件流：事件发生顺序\n<div id="outer">\n    <div id="inner">Click me!</div>\n</div>\n如果outer和inner都有click事件，那么点击inner，哪个事件会被触发？\n\n\n\n事件冒泡：\n事件冒泡可以形象地比喻为把一颗石头投入水中，泡泡会一直从水底冒出水面。\n也就是说，事件会从最内层的元素开始发生，一直向上传播，直到document对象。\n\n    div(inner) -> div(outer) -> body -> html -> document\n\n\n\n事件捕获:\n与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。\n上面的例子在事件捕获的概念下发生click事件的顺序应该是\n\n    document -> html -> body -> div(outer) -> div(inner)\n\n\n\naddEventListener:\n element.addEventListener(event, function, useCapture)\n    - useCapture:\n        - true - 事件句柄在捕获阶段执行（即在事件捕获阶段调用处理函数）\n        - false- false- 默认。事件句柄在冒泡阶段执行（即表示在事件冒泡的阶段调用事件处理函数）\n\n\n\n阻止事件冒泡:\n- 给子级加 event.stopPropagation( ):\n\n    $("#div1").mousedown(function(e){\n     var e=event||window.event;\n     event.stopPropagation();\n    });\n\n\n- 在事件处理函数中返回 false\n    $("#div1").mousedown(function(event){\n        var e=e||window.event;\n        return false;\n    });\n\n注：但是这两种方式是有区别的。return false 不仅阻止了事件往上冒泡，而且阻止了事件本身(默认事件)。\n   event.stopPropagation()则只阻止事件往上冒泡，不阻止事件本身。\n\n- 利用event.target==event.currentTarget来进行判断，在成立的时候处理逻辑\n\n\n\n事件委托/事件代理：\n由于事件会在冒泡阶段向上传播到父节点，可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。\n一般尽可能使用事件冒泡，因为相对于事件委托，兼容性更好。\n比如给ul标签下的一万个li标签绑定监听处理点击li的逻辑:\n可以在ul上绑定监听，每次点击li的时候都会在ul监听到，然后通过判断event.target来判断点击来源，处理逻辑。\n\n\n\n\n# 11.表单组件默认操作，阻止默认事件:参考博客\n\nevent.preventDefault\n\n\n\n\n# 12.原型链画图\n\n\n\n# 13.接口返回的字节流和文件是怎么下载的\n\n\n\n# 14.scollHeight，scollTop等属性的使用\n\n\n * clientHeight\n   \n\n定义： 只读属性，对于没有定义CSS或者内联布局盒子的元素为0， 否则，它是元素内部的高度(单位像素)，包含内边距，但不包括水平滚动条、边框和外边距\n计算： clientHeight 可以通过 CSS height + CSS padding - 水平滚动条高度 (如果存在)来计算\n注意： 返回的是四舍五入的整数值，想要获得小数值使用element.getBoundingClientRect(),但是这个小数值是包含边框的，慎用。 inline元素也是没有的\n\n\n\n\n * offsetHeight\n   定义： 是一个只读属性，它返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。\n   计算： height+padding+滚动条（如果存在）\n   注意： 如果元素被隐藏（例如元素或者元素的祖先之一的元素的style.display被设置为none），则返回0。 inline元素也是没有的\n   \n   \n   \n\n * scrollHeight\n   定义： 这个只读属性是一个元素内容高度的度量，包括由于溢出导致的视图中不可见内容。\n   注意： scrollHeight 的值等于该元素在不使用滚动条的情况下为了适应视口中所用内容所需的最小高度。 没有垂直滚动条的情况下，scrollHeight值与元素视图填充所有内容所需要的最小值clientHeight相同。 包括元素的padding，但不包括元素的border和margin。scrollHeight也包括 ::before 和 ::after这样的伪元素。\n   \n   \n\n * scrollTop\n   定义： Element.scrollTop 属性可以获取或设置一个元素的内容垂直滚动的像素数。\n   注意： 一个元素的 scrollTop 值是这个元素的内容顶部（卷起来的）到它的视口可见内容（的顶部）的距离的度量。 当一个元素的内容没有产生垂直方向的滚动条，那么它的scrollTop值为0。 在使用显示比例缩放的系统上，scrollTop可能会提供一个小数。\n   如果一个元素不能被滚动（例如，它没有溢出，或者这个元素有一个"non-scrollable"属性）， scrollTop将被设置为0。\n   设置scrollTop的值小于0，scrollTop 被设为0\n   如果设置了超出这个容器可滚动的值, scrollTop 会被设为最大值。\n   \n   \n\n * offsetParent\n   定义： 最近的一个非static的定位元素，是disblock：none则为0，父元素没有定位则是body元素\n   \n   \n\n * offsetTop\n   定义： 最近的一个非static的定位元素之间的距离包括父元素的padding+本身的padding，是disblock：none则为0,没有定位父元素，不然就是到body的距离。 总结： 利用这个原理我们可以制作关于滚动条合适下拉到底，那么就可以做下拉加载的功能。 当clientHeight+scrollTop=scrollHeight就是滑动到底的临界条件。\n   \n   \n\n\n# 15.ajax，axios，fetch\n\n\n * ajax 跳转ajax学习\n * axios axios官网\n   \n * fetch fetch使用\n   \n   \n\n\n# 16.在react和redux中，尽量少用push和unshift，这样会改变所有元素的位置，底层算法有时会比较堆内存，相同可能不会出发更新。\n\n\n\n# 17.if判断有哪些情况会自动计算boolean值\n\n\nundefined、null、 0、NaN或空字符串（""）会被判false\n\n\n注： 不要将原始布尔值的true和false与Boolean对象的真或假混淆。参考博客\n任何一个值，只要它不是 undefined、null、 0、NaN或空字符串（""），那么无论是任何对象，即使是值为假的 Boolean 对象，在条件语句中都为真。 例如：\n\n    var b = new Boolean(false);\n    if (b) //表达式的值为 true\n\n    var b = Boolean(false);\n    if (b) //表达式的值为 false\n\n\n\n\n# 18.网页怎么变黑白\n\n\ncss:\n   filter: grayscale(1)\n\n\n\n\n# 19.展开运算符\n\n\n  //展开对象，只能在括号中使用，否则会报错，可以理解成浅拷贝\n  let sex = {look:\'man\',actual:\'women\'};\n  let person = {sex:sex,age:25};\n  let copyPerson = {...person};\n  sex.look = \'boy\';\n  console.log(copyPerson,\'this is copyPerson\')\n\n\n\n  //展开数组，可以传参时使用，多余的参数自动作废，或者使用arguments接收\n  let tempArr = [2,4,6,8,9];\n  let tempArr2 = [5,4,7,8,545];\n  let endArr = [...tempArr,...tempArr2]\n  console.log(...tempArr,endArr);\n\n  function testzhankai(a,b,c) {\n    console.log(a,b,c,\'test zhankai\') //2,4,6\n    console.log(arguments) //Arguments(5)> 2,4,6,8,9\n  }\n  testzhankai(...tempArr);\n\n\n\n\n\n\n\n# 20.DOM\n\n一、DOM全称\n文档对象模型（Document Object Model）\n\n\n二、DOM是什么\nDOM就是一个编程接口，就是一套API。\nDOM是针对HTML文档、XML等文档的一套API。就类似于JDBC是针对数据库的一套API一样。\n\n\n三、DOM的用途\nDOM 是用来访问或操作HTML文档、XHTML文档、XML文档中的节点元素。\n现在基本上所有的浏览器都都执行了W3C发布的DOM规范，所以在浏览器上就可以用DOM的这些API。\n\n\n四、DOM与其他技术的联系\nJavaScript 可以通过 DOM 来访问和操作HTML文档所有的元素。\nJavaScript是一种脚本语言，DOM是用来获得和操作HTML文档的节点属性。\nJavaScript通常是通过DOM来获得和操作HTML属性的。这就是二者的区别与联系。\n\n\n五、DOM 与 HTML\nHTML文档是树状结构，根为；DOM也是树状结构，根为window或document对象。\n所以DOM就可以把HTML以树状的形式呈现出来。\n\n\n六、DOM的分类\n核心 DOM：定义了一套标准的可以针对任何文档的对象。\nHTML DOM：针对HTML文档的DOM。\nXML DOM：针对XML文档的DOM。\n\n\n七、DOM的级别Level\nDOM0：不是W3C规范。\nDOM1：开始是W3C规范。专注于HTML文档和XML文档。\nDOM2：对DOM1增加了样式表对象模型\nDOM3：对DOM2增加了内容模型 (DTD 、Schemas) 和文档验证。\n\n\n\n\n# 21.或者运算符\n\nlet a = 1;\nlet b = 2;\nlet c = 3;\n\nlet result = a || b || c;\n\nconsole.log(result);  // 1\n\n\n上面的代码中，当 a 为 truthy 值（即非 null、非 undefined、非 0、非 NaN、非 \'\' 等）时， 由于或运算符的短路特性，b 和 c 不会再被执行，返回结果为 a 的值。否则，若 a 为 falsy 值，就继续检查下一个值，返回第一个 truthy 值。\n\n\n\n\n# 22.工具类如何全局注册\n\n\n# 23.nginx服务器的使用\n\n\n# 24.url传递参数的最大限制\n\n\n# 25.blob对象的下载\n\n\n# 26.git rebase和git merge的区别\n\ngit merge <source-branch> \n比如你在feature分支,需要合并dev的新的其他人的提交(dev就是源分支),就是:\ngit merge dev\n\n\n\n# 27.js的&&\n\n在 JavaScript 中，逻辑运算符 && 具有左结合性（left-associativity），但没有优先级的概念。\n这意味着在使用多个 && 运算符时，它们按从左到右的顺序进行求值。\n\n例如：表达式 A && B && C 首先求解 A，如果 A 的结果为 false，则整个表达式的结果为 false，不再求解 B 和 C。\n     如果 A 的结果为 true，则继续求解 B，并根据 B 的结果继续求解 C。最终，整个表达式的结果将是 C 的结果。\n\n这种求值顺序类似于逻辑门电路中的级联，因此 && 运算符常被称为“逻辑与”运算符，它要求所有操作数都为 true 才会返回 true。\n\n\n\n# 28. 为什么0.1+0.2 ！= 0.3\n\n当将十进制数转换为二进制数时，0.1 和 0.2 都会产生无限循环的二进制表示形式。\n这是因为在二进制中，有些小数无法精确表示，就像在十进制中无法精确表示 1/3 一样。\n\n下面是将 0.1 和 0.2 转换为二进制表示的简化步骤：\n\n将 0.1 转换为二进制：\n\n乘以 2，得到 0.2，整数部分为 0。\n乘以 2，得到 0.4，整数部分为 0。\n乘以 2，得到 0.8，整数部分为 0。\n乘以 2，得到 1.6，整数部分为 1。\n乘以 2，得到 1.2，整数部分为 1。\n乘以 2，得到 0.4，整数部分为 0。\n乘以 2，得到 0.8，整数部分为 0。\n乘以 2，得到 1.6，整数部分为 1。\n乘以 2，得到 1.2，整数部分为 1。\n继续该过程下去，得到无限循环的二进制表示形式：0.0001100110011...\n将 0.2 转换为二进制：\n\n乘以 2，得到 0.4，整数部分为 0。\n乘以 2，得到 0.8，整数部分为 0。\n乘以 2，得到 1.6，整数部分为 1。\n乘以 2，得到 1.2，整数部分为 1。\n继续该过程下去，得到无限循环的二进制表示形式：0.001100110011...\n由于这种无限循环，将它们精确表示为二进制是不可能的.\n在计算机中，它们的二进制表示会被截断为有限位数，从而引入舍入误差。\n\n因此，在实际计算中，0.1 和 0.2 的精确值不是直接使用它们的二进制表示，而是使用近似值进行计算。\n这导致了 0.1 + 0.2 的结果略微偏离于 0.3。\n\n如果在需要高精度计算的情况下，可以考虑以下解决方案：\n\n1、使用专门的高精度计算库：可以使用第三方库或语言内置的高精度计算库，这些库提供了更精确的数值计算功能。\n   例如，在 JavaScript 中，可以使用 Decimal.js、Big.js 等库来进行高精度计算。\n\n2、手动实现精确计算：如果不想依赖外部库，也可以手动实现高精度计算。\n  一种常见的方法是使用字符串表示数字，然后编写相应的算法来进行精确计算。通过使用字符串表示，可以绕过浮点数的精度问题。\n   然而，这样做可能会降低计算速度和增加代码复杂性。\n\n3、调整计算顺序：有时，通过重新排列计算顺序可以减少舍入误差的影响。\n   例如，如果某个计算顺序导致大数与小数相加，可以尽量将相似大小的数值进行相加，然后再进行舍入。这样可以减小舍入误差的累积效应。\n\n4、使用整数计算：对于需要高精度的货币计算等场景，可以将小数转换为整数，进行整数计算，然后再将结果转换回小数形式。\n   这可以避免浮点数精度问题，因为整数计算没有舍入误差。\n\n无论选择哪种方法，都需要根据具体情况进行权衡。高精度计算往往会带来性能上的开销，因此在性能和精度之间需要找到平衡点。\n\n\n\n# 29.使用axios的时候的坑\n\n在使用 axios.get(url) 发起请求时，如果实际的请求地址前面加了其他的 URL，可能有以下几种原因：\n\n1.相对路径：如果你提供的 url 参数是一个相对路径，而不是一个完整的绝对路径，那么请求将根据当前页面的 URL 进行解析。在这种情况下，浏览器会自动将相对路径解析为绝对路径，将其与当前页面的 URL 进行拼接，形成实际的请求地址。\n  确保 url 参数包含协议、主机名和路径等必要信息。\n\n2.基础 URL 配置：在使用 Axios 时，你可以配置一个基础 URL（base URL），它将作为所有请求的前缀。这样，当你传递一个相对路径给 axios.get() 时，Axios 将会自动将基础 URL 与相对路径拼接成实际的请求地址。\n\n  例如，如果你配置了基础 URL 为 http://api.example.com，并使用 axios.get(\'/users\') 进行请求，实际的请求地址将会是 http://api.example.com/users。\n\n3.拦截器或请求拦截器：如果你在 Axios 中使用了拦截器或请求拦截器，它们可以在请求发出之前修改请求配置。这可能包括修改请求的 URL，添加前缀或其他参数等。\n\n 请检查你的拦截器或请求拦截器的代码，确保没有对请求的 URL 进行额外的修改。\n\n检查这些原因，并确认在请求中提供的 URL 参数是否正确，以及是否存在其他代码或配置会影响到实际的请求地址。\n\n\n30.localstorage\n\n\nlocalStorage 中存储的数据在以下情况下会被清除：\n\n手动清除：你可以通过调用 localStorage.clear() 方法清除整个 localStorage 中的数据。\n\n用户清除浏览器数据：当用户在浏览器中清除缓存或删除浏览器数据时，包括清除浏览历史记录、缓存文件、Cookie 等，localStorage 中的数据也会被清除。\n\n存储空间限制：localStorage 的存储空间是有限制的，通常为几兆字节。如果你的数据超过了存储空间限制，新的数据存储会替换掉旧的数据。\n\n域名或协议更改：localStorage 是基于域名的，当你访问不同的域名或子域名时，localStorage 中的数据是隔离的，不会共享。如果你切换到一个不同的域名或子域名，之前存储的数据将不再可访问。\n\n私密浏览模式：在私密浏览模式下，浏览器通常会禁用 localStorage，并在会话结束时自动清除 localStorage 中的数据。\n\n请注意，localStorage 中的数据是持久存储的，它会一直存在，直到满足上述情况之一导致数据被清除。因此，除非你显式地清除或满足以上条件，否则 localStorage 中的数据将一直保留。\n\n\n31.v-bind=\'$attrs\' 在Vue中，组件上使用v-bind="$attrs"是一种特殊的用法，它用于将父组件传递给子组件的非声明属性（non-prop attributes）传递给子组件的根元素。\n\n当你在一个组件上使用v-bind="$attrs"时，Vue会将父组件中传递给该组件的所有非声明属性收集起来，并将它们应用到该组件的根元素上。\n\n举个例子，假设有一个父组件和一个子组件：\n\n\x3c!-- ParentComponent.vue --\x3e\n<template>\n  <div>\n    <ChildComponent id="child" class="red" data-text="Hello" />\n  </div>\n</template>\n\n<script>\nimport ChildComponent from \'./ChildComponent.vue\';\n\nexport default {\n  components: {\n    ChildComponent\n  }\n};\n<\/script>\n\n\x3c!-- ChildComponent.vue --\x3e\n<template>\n  <div v-bind="$attrs">\n    \x3c!-- 子组件的内容 --\x3e\n  </div>\n</template>\n\n<script>\nexport default {\n  inheritAttrs: false\n};\n<\/script>\n\n\n在上面的例子中，父组件传递给子组件的非声明属性包括id、class和data-text。子组件中的v-bind="$attrs"将这些非声明属性应用到子组件的根元素上。\n\n最终生成的HTML将会是：\n\n<div>\n  <div id="child" class="red" data-text="Hello">\n    \x3c!-- 子组件的内容 --\x3e\n  </div>\n</div>\n\n\n通过这种方式，你可以轻松地将父组件的属性传递给子组件的根元素，而无需在子组件中一个个地声明这些属性。这在需要将大量属性传递给子组件时非常方便。\n\n32、websocket协议',normalizedContent:'# 记录脑海里突然的疑问\n\n\n# 1.我们在父组件向子组件传递参数时，用prop的时候，有几种情况:\n\n * 传递的是基础数据类型的数据，这时候在子组件进行修改的时候，父组件是不会发生变化的。\n * 传递的是对象类型的数据，这时候在子组件对这个对象进行修改的时候，会同时更改了父组件的对象（不提倡）。注：在子组件重新赋值另一个对象的时候，不会更改父组件的数据，父子组件的连接就切断了。\n * 传递的是函数类型的数据，一般是为了让子组件向父组件传递数据的时候使用的。子组件在操作时，调用传递的函数时传入形参，函数在执行时，父组件拿到参数。\n\n\nlet a = 3;\nb = a;\n改变a的时候，b不会发生变化\n\nlet a = {\n   test:\'3\'\n}\nb = a;\n改变a ，b也会发生变化，但是\nb={\n  test2:\'4\'\n}\nb和a指向的对象不同了，互不影响了。\n\n\n\n\n\n# 2.组件的data一般都是函数，不是对象。主要是为了组件在被引入的时候，避免多次引入的组件指向了同一个对象。\n\n\n\n\n\n\n# 3.作用域插槽与匿名插槽，具名插槽相比，不同之处在于显示的数据是由子组件提供的，父组件只提供展示的样式。\n\n\n\n\n\n1、具名插槽：<slot> 元素有一个特殊的 attribute：name。这个 attribute 可以用来定义额外的插槽：\n子：\n    <div class="container">\n      <header>\n        <slot name="header"></slot>\n      </header>\n      <main>\n        <slot></slot>\n      </main>\n      <footer>\n        <slot name="footer"></slot>\n      </footer>\n    </div>\n    \n父：    \n    <base-layout>\n      <template v-slot:header>\n        <h1>here might be a page title</h1>\n      </template>\n    \n      <p>a paragraph for the main content.</p>\n      <p>and another one.</p>\n    \n      <template #footer>\n        <p>here\'s some contact info</p>\n      </template>\n    </base-layout>\n\n注意: v-slot 只能添加在 <template> 上 (只有一种例外情况，独占默认插槽)，这一点和已经废弃的 slot attribute 不同。\n在父组件上使用v-slot:插槽名称,这个是vue2.6.0以后的写法,在vue2.6.0之前,可以在模板上使用slot="插槽的名称"，#footer是v-slot:footer简写\n\n\n2、匿名插槽:组件中只能有一个，匹配完所有的具名插槽之后，剩余的的匹配匿名插槽(默认插槽)\n子：\n    <div class="container">\n      <header>\n        <slot name="header"></slot>\n      </header>\n      <main>\n        <slot></slot>\n      </main>\n      <footer>\n        <slot name="footer"></slot>\n      </footer>\n    </div>\n\n父：\n    <base-layout>\n      <template v-slot:header>\n        <h1>here might be a page title</h1>\n      </template>\n    \n      <p>a paragraph for the main content.</p>\n      <p>and another one.</p>\n    \n      <template v-slot:footer>\n        <p>here\'s some contact info</p>\n      </template>\n    </base-layout>\n    \n现在 <template> 元素中的所有内容都将会被传入相应的插槽。\n任何没有被包裹在带有 v-slot 的 <template> 中的内容都会被视为默认插槽的内容。\n然而，如果你希望更明确一些，仍然可以在一个 <template> 中包裹默认插槽的内容：\n    <base-layout>\n      <template v-slot:header>\n        <h1>here might be a page title</h1>\n      </template>\n    \n      <template v-slot:default>\n        <p>a paragraph for the main content.</p>\n        <p>and another one.</p>\n      </template>\n    \n      <template v-slot:footer>\n        <p>here\'s some contact info</p>\n      </template>\n    </base-layout>\n\n3、作用域插槽\n\n子：user是子组件的属性\n    <span>\n      <slot v-bind:user="user" name=\'juming\'>\n        {{ user.lastname }} //默认展示\n      </slot>\n    </span>\n\n父：父组件使用子组件的属性\n    <current-user>\n      <template v-slot:juming="slotprops">\n        {{ slotprops.user.firstname }}\n      </template>\n    </current-user>\n\n\n独占默认插槽：作用域插槽中，当被提供的内容只有 默认插槽 时，组件的标签才可以被当作插槽的模板来使用。\n这样我们就可以把 v-slot 直接用在组件上：\n    <current-user v-slot:default="slotprops"> //默认插槽这么用\n      {{ slotprops.user.firstname }}\n    </current-user>\n\n\n这种写法还可以更简单。就像假定未指明的内容对应默认插槽一样，不带参数的 v-slot 被假定对应默认插槽：\n    <current-user v-slot="slotprops">\n      {{ slotprops.user.firstname }}\n    </current-user>\n\n\n\n\n# 4.null和undefined，初始赋值null，let a = null,表示a存储对象在未来，未赋值就是undefined\n\n\n参考博客\n\n\njs的基本数据类型：\n - 五种简单数据类型(基本数据类型)：undefined、null、boolean、number 和 string \n - 复杂数据类型：object。\n\n\nundefined：\n - 声明了一个变量，但未对其初始化时，这个变量的值就是undefined。\n    var data;\n    console.log(data === undefined); //true\n    console.log(typeof data); //"undefined"\n\n注：如果data变量未提前声明：console.log(data === undefined); //报错\n因为对于尚未声明过的变量，我们只能执行一项操作，即使用typeof操作符检测其数据类型，使用其他的操作都会报错。\n一个函数如果没有使用return语句指定返回值，就会返回一个undefined值，或者调用函数时没有传参数值，参数同样也会被初始化为undefined值。\n\n\n\nnull：\n - null值表示一个空对象指针，指示变量未指向任何对象\n    var data = null;\n    console.log(typeof data); // "object"\n\n注：如果定义的变量在将来用于保存对象，最好将该变量初始化为null，当一个数据不再需要使用时，最好通过将其值设置为null来释放其引用（解除引用）。\nconsole.log(null == undefined); //true ---undefined值是派生自null值的，因此ecma-262规定对它们的相等性测试要返回true:  \nconsole.log(null === undefined); //false\n标准相等符==,会转换其操作数为相同类型后再做比较；  严格相等符===，不会进行类型转换；\n\n\n\n\n\n\n\n\n\n# 5.什么是盒子模型 ：参考博客\n\n\n * 盒子模型是css技术所使用的一种思维模型。我们可以把css盒子模型当成日常中的一个盒子去理解。\n * content就是盒子里装的东西，它有高度（height）和宽度（width）,可以是图片，可以是文字或者小盒子嵌套，在现实中，内容不能大于盒子，内容大于盒子就会撑破盒子，但在css中，盒子有弹性的，顶多内容太大就会撑大盒子，但是不会损害盒子。\n * padding即是填充，就好像我们为了保证盒子里的东西不损坏，填充了一些东西，比如泡沫或者塑料薄膜，填充物有大有小，有软有硬，反应在网页中就是padding的大小了。\n * border就是再外一层的边框，因为边框有大小和颜色的属性，相当于盒子的厚度和它的颜色或者材料。\n * margin外边距，就是我们的盒子与其他的盒子或者其他东西的距离。假如有很多盒子，margin就是盒子之间直接的距离，可以通风，也美观同时方便取出。\n * css盒子模型有两种，一种是w3c盒模型也就是标准模型，另一种是ie盒模型\n   \n   \n\n\n# 6.class的定义与继承，原理\n\n\n跳转至es6学习记录\n\n\n\n\n# 7.new的时候干了啥\n\n\n(1) 创建一个新对象；\n(2) 将构造函数的作用域赋给新对象（链接到原型,绑定this值） ；\n(3) 执行构造函数中的代码（为这个新对象添加属性） ；\n(4) 返回新对象。\n\n\n//定义一个person类\nclass person {\n    constructor(name,age){\n        this.name = name\n        this.age = age\n    }\n    speak(){\n        console.log(`我的名字是${this.name}，年龄是${this.age}`);\n    }\n}\n\nlet a = new person(\'tom\',13);\nconsole.log(a,\'this is a\')；\n\n\n// 打印结果\nperson {name: \'tom\', age: 13}\nage: 13\nname: "tom"\n--[[prototype]]: object\n    constructor: class person\n    speak: ƒ speak()\n    [[prototype]]: object\n\n\n//模拟过程\nlet a = {}; //创建空对象\na.__proto__ = person.prototype;//会报错，仅模拟\nperson.call(a);//绑定this\nreturn a;\n\n\n\n\n\n# 8.数组reduce\n\n\n语法：\n    arr.reduce((prevalue, current, index, arr)=>{},initialvalue)\n\n    arr：当前操作的数组\n    prevalue:第一次执行回调时为给定的初始值initialvalue，以后是上一次执行回调时的返回值。\n            备注：若没有传入initialvalue，则第一次的prevalue值是数组中第一个元素的值。\n    current 表示当前正在处理的元素；\n    index 表示当前正在处理的数组元素的索引，若传入了initialvalue值，则为0，否则为1；\n    array 当前操作的数组(就是arr)\n    initialvalue 表示初始值。一般做数学运算时设置为0，若为筛选最值可以不传。\n\n\n数组求和\n    const x = arr.reduce((prevalue,current)=>{\n        console.log(prevalue,current); \n        return prevalue+current\n    }) \n\n\n数组中所有偶数的和---（条件求和）\n    const x = arr.reduce((prevalue,current)=> prevalue + (current % 2 === 0 ? current : 0),0)\n\n\n数组中偶数有几个---（条件统计）\n    const x = arr.reduce((prevalue,current)=> prevalue + (current % 2 === 0 ? 1 : 0),0)\n\n\n数组中所有偶数的乘积---（条件计算）\n    const x = arr.reduce((prevalue,current)=>{\n        return prevalue * (current % 2 === 0 ? current : 1)\n    },1)\n\n\n数组中最小值-----(筛选最值)\n    const x = arr.reduce((prevalue,current)=>{\n        console.log(prevalue,current);\n        return math.max(prevalue,current)\n    }) \n\n\n\n# 9.堆和栈的理解\n\n\n栈内存： 主要用于存放基本类型和对象变量的指针，给人的感觉就像是一个个线性排列的空间，每个小单元大小基本相等，存放的变量一般都是已知大小或者已知上限范围的，算是一种简单存储。 栈内存自动分配相对固定大小的内存空间，并由系统自动释放。\n\n堆内存： 主要用于存放引用类型诸如object这类，存储的对象类型数据对于大小在这方面都是未知的。（所以这大概也是为什么null作为一个object类型的变量却存储在栈内存中的原因）。 堆内存是动态分配内存，内存大小不一，也不会自动释放。\n\n总结： 从一个变量向另外一个变量复制基本类型的数据，会创建这个值的一个副本。从一个变量向另外一个变量复制引用类型的数据，复制的其实是这个值的一个指针，因此两个变量最终指向的都是同一个对象，即复制的是栈中的指针而不是堆中的对象。\n\n\n\n\n\n# 10.事件委托和事件冒泡,事件捕获:参考博客\n\n\n事件流：事件发生顺序\n<div id="outer">\n    <div id="inner">click me!</div>\n</div>\n如果outer和inner都有click事件，那么点击inner，哪个事件会被触发？\n\n\n\n事件冒泡：\n事件冒泡可以形象地比喻为把一颗石头投入水中，泡泡会一直从水底冒出水面。\n也就是说，事件会从最内层的元素开始发生，一直向上传播，直到document对象。\n\n    div(inner) -> div(outer) -> body -> html -> document\n\n\n\n事件捕获:\n与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。\n上面的例子在事件捕获的概念下发生click事件的顺序应该是\n\n    document -> html -> body -> div(outer) -> div(inner)\n\n\n\naddeventlistener:\n element.addeventlistener(event, function, usecapture)\n    - usecapture:\n        - true - 事件句柄在捕获阶段执行（即在事件捕获阶段调用处理函数）\n        - false- false- 默认。事件句柄在冒泡阶段执行（即表示在事件冒泡的阶段调用事件处理函数）\n\n\n\n阻止事件冒泡:\n- 给子级加 event.stoppropagation( ):\n\n    $("#div1").mousedown(function(e){\n     var e=event||window.event;\n     event.stoppropagation();\n    });\n\n\n- 在事件处理函数中返回 false\n    $("#div1").mousedown(function(event){\n        var e=e||window.event;\n        return false;\n    });\n\n注：但是这两种方式是有区别的。return false 不仅阻止了事件往上冒泡，而且阻止了事件本身(默认事件)。\n   event.stoppropagation()则只阻止事件往上冒泡，不阻止事件本身。\n\n- 利用event.target==event.currenttarget来进行判断，在成立的时候处理逻辑\n\n\n\n事件委托/事件代理：\n由于事件会在冒泡阶段向上传播到父节点，可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件。\n一般尽可能使用事件冒泡，因为相对于事件委托，兼容性更好。\n比如给ul标签下的一万个li标签绑定监听处理点击li的逻辑:\n可以在ul上绑定监听，每次点击li的时候都会在ul监听到，然后通过判断event.target来判断点击来源，处理逻辑。\n\n\n\n\n# 11.表单组件默认操作，阻止默认事件:参考博客\n\nevent.preventdefault\n\n\n\n\n# 12.原型链画图\n\n\n\n# 13.接口返回的字节流和文件是怎么下载的\n\n\n\n# 14.scollheight，scolltop等属性的使用\n\n\n * clientheight\n   \n\n定义： 只读属性，对于没有定义css或者内联布局盒子的元素为0， 否则，它是元素内部的高度(单位像素)，包含内边距，但不包括水平滚动条、边框和外边距\n计算： clientheight 可以通过 css height + css padding - 水平滚动条高度 (如果存在)来计算\n注意： 返回的是四舍五入的整数值，想要获得小数值使用element.getboundingclientrect(),但是这个小数值是包含边框的，慎用。 inline元素也是没有的\n\n\n\n\n * offsetheight\n   定义： 是一个只读属性，它返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。\n   计算： height+padding+滚动条（如果存在）\n   注意： 如果元素被隐藏（例如元素或者元素的祖先之一的元素的style.display被设置为none），则返回0。 inline元素也是没有的\n   \n   \n   \n\n * scrollheight\n   定义： 这个只读属性是一个元素内容高度的度量，包括由于溢出导致的视图中不可见内容。\n   注意： scrollheight 的值等于该元素在不使用滚动条的情况下为了适应视口中所用内容所需的最小高度。 没有垂直滚动条的情况下，scrollheight值与元素视图填充所有内容所需要的最小值clientheight相同。 包括元素的padding，但不包括元素的border和margin。scrollheight也包括 ::before 和 ::after这样的伪元素。\n   \n   \n\n * scrolltop\n   定义： element.scrolltop 属性可以获取或设置一个元素的内容垂直滚动的像素数。\n   注意： 一个元素的 scrolltop 值是这个元素的内容顶部（卷起来的）到它的视口可见内容（的顶部）的距离的度量。 当一个元素的内容没有产生垂直方向的滚动条，那么它的scrolltop值为0。 在使用显示比例缩放的系统上，scrolltop可能会提供一个小数。\n   如果一个元素不能被滚动（例如，它没有溢出，或者这个元素有一个"non-scrollable"属性）， scrolltop将被设置为0。\n   设置scrolltop的值小于0，scrolltop 被设为0\n   如果设置了超出这个容器可滚动的值, scrolltop 会被设为最大值。\n   \n   \n\n * offsetparent\n   定义： 最近的一个非static的定位元素，是disblock：none则为0，父元素没有定位则是body元素\n   \n   \n\n * offsettop\n   定义： 最近的一个非static的定位元素之间的距离包括父元素的padding+本身的padding，是disblock：none则为0,没有定位父元素，不然就是到body的距离。 总结： 利用这个原理我们可以制作关于滚动条合适下拉到底，那么就可以做下拉加载的功能。 当clientheight+scrolltop=scrollheight就是滑动到底的临界条件。\n   \n   \n\n\n# 15.ajax，axios，fetch\n\n\n * ajax 跳转ajax学习\n * axios axios官网\n   \n * fetch fetch使用\n   \n   \n\n\n# 16.在react和redux中，尽量少用push和unshift，这样会改变所有元素的位置，底层算法有时会比较堆内存，相同可能不会出发更新。\n\n\n\n# 17.if判断有哪些情况会自动计算boolean值\n\n\nundefined、null、 0、nan或空字符串（""）会被判false\n\n\n注： 不要将原始布尔值的true和false与boolean对象的真或假混淆。参考博客\n任何一个值，只要它不是 undefined、null、 0、nan或空字符串（""），那么无论是任何对象，即使是值为假的 boolean 对象，在条件语句中都为真。 例如：\n\n    var b = new boolean(false);\n    if (b) //表达式的值为 true\n\n    var b = boolean(false);\n    if (b) //表达式的值为 false\n\n\n\n\n# 18.网页怎么变黑白\n\n\ncss:\n   filter: grayscale(1)\n\n\n\n\n# 19.展开运算符\n\n\n  //展开对象，只能在括号中使用，否则会报错，可以理解成浅拷贝\n  let sex = {look:\'man\',actual:\'women\'};\n  let person = {sex:sex,age:25};\n  let copyperson = {...person};\n  sex.look = \'boy\';\n  console.log(copyperson,\'this is copyperson\')\n\n\n\n  //展开数组，可以传参时使用，多余的参数自动作废，或者使用arguments接收\n  let temparr = [2,4,6,8,9];\n  let temparr2 = [5,4,7,8,545];\n  let endarr = [...temparr,...temparr2]\n  console.log(...temparr,endarr);\n\n  function testzhankai(a,b,c) {\n    console.log(a,b,c,\'test zhankai\') //2,4,6\n    console.log(arguments) //arguments(5)> 2,4,6,8,9\n  }\n  testzhankai(...temparr);\n\n\n\n\n\n\n\n# 20.dom\n\n一、dom全称\n文档对象模型（document object model）\n\n\n二、dom是什么\ndom就是一个编程接口，就是一套api。\ndom是针对html文档、xml等文档的一套api。就类似于jdbc是针对数据库的一套api一样。\n\n\n三、dom的用途\ndom 是用来访问或操作html文档、xhtml文档、xml文档中的节点元素。\n现在基本上所有的浏览器都都执行了w3c发布的dom规范，所以在浏览器上就可以用dom的这些api。\n\n\n四、dom与其他技术的联系\njavascript 可以通过 dom 来访问和操作html文档所有的元素。\njavascript是一种脚本语言，dom是用来获得和操作html文档的节点属性。\njavascript通常是通过dom来获得和操作html属性的。这就是二者的区别与联系。\n\n\n五、dom 与 html\nhtml文档是树状结构，根为；dom也是树状结构，根为window或document对象。\n所以dom就可以把html以树状的形式呈现出来。\n\n\n六、dom的分类\n核心 dom：定义了一套标准的可以针对任何文档的对象。\nhtml dom：针对html文档的dom。\nxml dom：针对xml文档的dom。\n\n\n七、dom的级别level\ndom0：不是w3c规范。\ndom1：开始是w3c规范。专注于html文档和xml文档。\ndom2：对dom1增加了样式表对象模型\ndom3：对dom2增加了内容模型 (dtd 、schemas) 和文档验证。\n\n\n\n\n# 21.或者运算符\n\nlet a = 1;\nlet b = 2;\nlet c = 3;\n\nlet result = a || b || c;\n\nconsole.log(result);  // 1\n\n\n上面的代码中，当 a 为 truthy 值（即非 null、非 undefined、非 0、非 nan、非 \'\' 等）时， 由于或运算符的短路特性，b 和 c 不会再被执行，返回结果为 a 的值。否则，若 a 为 falsy 值，就继续检查下一个值，返回第一个 truthy 值。\n\n\n\n\n# 22.工具类如何全局注册\n\n\n# 23.nginx服务器的使用\n\n\n# 24.url传递参数的最大限制\n\n\n# 25.blob对象的下载\n\n\n# 26.git rebase和git merge的区别\n\ngit merge <source-branch> \n比如你在feature分支,需要合并dev的新的其他人的提交(dev就是源分支),就是:\ngit merge dev\n\n\n\n# 27.js的&&\n\n在 javascript 中，逻辑运算符 && 具有左结合性（left-associativity），但没有优先级的概念。\n这意味着在使用多个 && 运算符时，它们按从左到右的顺序进行求值。\n\n例如：表达式 a && b && c 首先求解 a，如果 a 的结果为 false，则整个表达式的结果为 false，不再求解 b 和 c。\n     如果 a 的结果为 true，则继续求解 b，并根据 b 的结果继续求解 c。最终，整个表达式的结果将是 c 的结果。\n\n这种求值顺序类似于逻辑门电路中的级联，因此 && 运算符常被称为“逻辑与”运算符，它要求所有操作数都为 true 才会返回 true。\n\n\n\n# 28. 为什么0.1+0.2 ！= 0.3\n\n当将十进制数转换为二进制数时，0.1 和 0.2 都会产生无限循环的二进制表示形式。\n这是因为在二进制中，有些小数无法精确表示，就像在十进制中无法精确表示 1/3 一样。\n\n下面是将 0.1 和 0.2 转换为二进制表示的简化步骤：\n\n将 0.1 转换为二进制：\n\n乘以 2，得到 0.2，整数部分为 0。\n乘以 2，得到 0.4，整数部分为 0。\n乘以 2，得到 0.8，整数部分为 0。\n乘以 2，得到 1.6，整数部分为 1。\n乘以 2，得到 1.2，整数部分为 1。\n乘以 2，得到 0.4，整数部分为 0。\n乘以 2，得到 0.8，整数部分为 0。\n乘以 2，得到 1.6，整数部分为 1。\n乘以 2，得到 1.2，整数部分为 1。\n继续该过程下去，得到无限循环的二进制表示形式：0.0001100110011...\n将 0.2 转换为二进制：\n\n乘以 2，得到 0.4，整数部分为 0。\n乘以 2，得到 0.8，整数部分为 0。\n乘以 2，得到 1.6，整数部分为 1。\n乘以 2，得到 1.2，整数部分为 1。\n继续该过程下去，得到无限循环的二进制表示形式：0.001100110011...\n由于这种无限循环，将它们精确表示为二进制是不可能的.\n在计算机中，它们的二进制表示会被截断为有限位数，从而引入舍入误差。\n\n因此，在实际计算中，0.1 和 0.2 的精确值不是直接使用它们的二进制表示，而是使用近似值进行计算。\n这导致了 0.1 + 0.2 的结果略微偏离于 0.3。\n\n如果在需要高精度计算的情况下，可以考虑以下解决方案：\n\n1、使用专门的高精度计算库：可以使用第三方库或语言内置的高精度计算库，这些库提供了更精确的数值计算功能。\n   例如，在 javascript 中，可以使用 decimal.js、big.js 等库来进行高精度计算。\n\n2、手动实现精确计算：如果不想依赖外部库，也可以手动实现高精度计算。\n  一种常见的方法是使用字符串表示数字，然后编写相应的算法来进行精确计算。通过使用字符串表示，可以绕过浮点数的精度问题。\n   然而，这样做可能会降低计算速度和增加代码复杂性。\n\n3、调整计算顺序：有时，通过重新排列计算顺序可以减少舍入误差的影响。\n   例如，如果某个计算顺序导致大数与小数相加，可以尽量将相似大小的数值进行相加，然后再进行舍入。这样可以减小舍入误差的累积效应。\n\n4、使用整数计算：对于需要高精度的货币计算等场景，可以将小数转换为整数，进行整数计算，然后再将结果转换回小数形式。\n   这可以避免浮点数精度问题，因为整数计算没有舍入误差。\n\n无论选择哪种方法，都需要根据具体情况进行权衡。高精度计算往往会带来性能上的开销，因此在性能和精度之间需要找到平衡点。\n\n\n\n# 29.使用axios的时候的坑\n\n在使用 axios.get(url) 发起请求时，如果实际的请求地址前面加了其他的 url，可能有以下几种原因：\n\n1.相对路径：如果你提供的 url 参数是一个相对路径，而不是一个完整的绝对路径，那么请求将根据当前页面的 url 进行解析。在这种情况下，浏览器会自动将相对路径解析为绝对路径，将其与当前页面的 url 进行拼接，形成实际的请求地址。\n  确保 url 参数包含协议、主机名和路径等必要信息。\n\n2.基础 url 配置：在使用 axios 时，你可以配置一个基础 url（base url），它将作为所有请求的前缀。这样，当你传递一个相对路径给 axios.get() 时，axios 将会自动将基础 url 与相对路径拼接成实际的请求地址。\n\n  例如，如果你配置了基础 url 为 http://api.example.com，并使用 axios.get(\'/users\') 进行请求，实际的请求地址将会是 http://api.example.com/users。\n\n3.拦截器或请求拦截器：如果你在 axios 中使用了拦截器或请求拦截器，它们可以在请求发出之前修改请求配置。这可能包括修改请求的 url，添加前缀或其他参数等。\n\n 请检查你的拦截器或请求拦截器的代码，确保没有对请求的 url 进行额外的修改。\n\n检查这些原因，并确认在请求中提供的 url 参数是否正确，以及是否存在其他代码或配置会影响到实际的请求地址。\n\n\n30.localstorage\n\n\nlocalstorage 中存储的数据在以下情况下会被清除：\n\n手动清除：你可以通过调用 localstorage.clear() 方法清除整个 localstorage 中的数据。\n\n用户清除浏览器数据：当用户在浏览器中清除缓存或删除浏览器数据时，包括清除浏览历史记录、缓存文件、cookie 等，localstorage 中的数据也会被清除。\n\n存储空间限制：localstorage 的存储空间是有限制的，通常为几兆字节。如果你的数据超过了存储空间限制，新的数据存储会替换掉旧的数据。\n\n域名或协议更改：localstorage 是基于域名的，当你访问不同的域名或子域名时，localstorage 中的数据是隔离的，不会共享。如果你切换到一个不同的域名或子域名，之前存储的数据将不再可访问。\n\n私密浏览模式：在私密浏览模式下，浏览器通常会禁用 localstorage，并在会话结束时自动清除 localstorage 中的数据。\n\n请注意，localstorage 中的数据是持久存储的，它会一直存在，直到满足上述情况之一导致数据被清除。因此，除非你显式地清除或满足以上条件，否则 localstorage 中的数据将一直保留。\n\n\n31.v-bind=\'$attrs\' 在vue中，组件上使用v-bind="$attrs"是一种特殊的用法，它用于将父组件传递给子组件的非声明属性（non-prop attributes）传递给子组件的根元素。\n\n当你在一个组件上使用v-bind="$attrs"时，vue会将父组件中传递给该组件的所有非声明属性收集起来，并将它们应用到该组件的根元素上。\n\n举个例子，假设有一个父组件和一个子组件：\n\n\x3c!-- parentcomponent.vue --\x3e\n<template>\n  <div>\n    <childcomponent id="child" class="red" data-text="hello" />\n  </div>\n</template>\n\n<script>\nimport childcomponent from \'./childcomponent.vue\';\n\nexport default {\n  components: {\n    childcomponent\n  }\n};\n<\/script>\n\n\x3c!-- childcomponent.vue --\x3e\n<template>\n  <div v-bind="$attrs">\n    \x3c!-- 子组件的内容 --\x3e\n  </div>\n</template>\n\n<script>\nexport default {\n  inheritattrs: false\n};\n<\/script>\n\n\n在上面的例子中，父组件传递给子组件的非声明属性包括id、class和data-text。子组件中的v-bind="$attrs"将这些非声明属性应用到子组件的根元素上。\n\n最终生成的html将会是：\n\n<div>\n  <div id="child" class="red" data-text="hello">\n    \x3c!-- 子组件的内容 --\x3e\n  </div>\n</div>\n\n\n通过这种方式，你可以轻松地将父组件的属性传递给子组件的根元素，而无需在子组件中一个个地声明这些属性。这在需要将大量属性传递给子组件时非常方便。\n\n32、websocket协议',charsets:{cjk:!0},lastUpdated:null,lastUpdatedTimestamp:1692166469e3},{title:"Home",frontmatter:{home:!0,heroText:"小火柴的博客"},regularPath:"/",relativePath:"index.md",key:"v-5cec38b8",path:"/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:null,lastUpdatedTimestamp:1668764429e3},{title:"标签",frontmatter:{tagsPage:!0,title:"标签",permalink:"/tags/",article:!1},regularPath:"/@pages/tagsPage.html",relativePath:"@pages/tagsPage.md",key:"v-8167de90",path:"/tags/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:null,lastUpdatedTimestamp:1668764429e3}],themeConfig:{defaultMode:"light",nav:[{text:"首页",link:"/"},{text:"学过的习",link:"/pages/3eb294/"},{text:"踩过的坑",link:"/pages/3fea03/"},{text:"想过的事",link:"/pages/9a1e83/"}],sidebarDepth:1,logo:"/img/head.jpg",searchMaxSuggestions:10,lastUpdated:!1,bodyBgImg:"/img/火柴.jpg",bodyBgImgOpacity:"0.55",titleBadgeIcons:["/img/文章标题图标.png"],sidebar:{"/01.前端/":[{title:"学过的习",collapsable:!0,children:[["01.学过的习/01.CSS样式与权重.md","CSS的样式优先级权重","/pages/e24a44/"],["01.学过的习/02.事件冒泡和事件捕获.md","事件冒泡和事件捕获","/pages/7873d2/"],["01.学过的习/03.JS模块对外暴露函数.md","js模块可以通过两种方式对外暴露函数","/pages/9c2bfc/"],["01.学过的习/04.js中的内存泄漏和内存溢出.md","js中的内存泄漏和内存溢出","/pages/991cc6/"],["01.学过的习/05.js作用域链.md","js作用域链","/pages/cc931f/"],["01.学过的习/06.控制台暴露vue.md","控制台暴露vue","/pages/17c816/"],["01.学过的习/07.es5常用知识总结.md","es5常用知识总结","/pages/515843/"],["01.学过的习/08.es6常用知识总结.md","es6常用知识总结","/pages/34049a/"],["01.学过的习/09.es7常用知识总结.md","es7常用知识总结","/pages/29f30f/"],["01.学过的习/10.js模块化.md","js模块化","/pages/6616c2/"],["01.学过的习/11.nodeJs学习.md","nodeJs学习","/pages/937e4b/"],["01.学过的习/12.node搭建服务器.md","node搭建服务器","/pages/0a1991/"],["01.学过的习/13.webPack学习.md","webPack学习","/pages/fc31e6/"],["01.学过的习/14.js原型对象和原型链的理解.md","js原型对象和原型链的理解","/pages/debc20/"],["01.学过的习/15.css阻塞与js阻塞.md","css阻塞与js阻塞","/pages/8e9745/"],["01.学过的习/16.ajax的学习.md","ajax的学习","/pages/9be584/"],["01.学过的习/17.浏览器的重绘与重排.md","浏览器的重绘与重排","/pages/4f10b9/"],["01.学过的习/18.函数防抖与函数节流学习记录.md","函数防抖与函数节流学习记录","/pages/1273e8/"],["01.学过的习/19.浏览器储存学习.md","浏览器储存学习","/pages/0acb8e/"],["01.学过的习/20.React学习1.md","React起步","/pages/3eb294/"],["01.学过的习/21.React学习2.md","React的基本使用","/pages/a87c4e/"],["01.学过的习/25.React项目搭建.md","React项目搭建","/pages/3dc609/"],["01.学过的习/27.vue中$attrs和$listeners的使用.md","vue中attrs和listeners的使用","/pages/07bbe9/"],["01.学过的习/28.js的精度问题.md","js的精度问题","/pages/44df8d/"],["01.学过的习/29.React的状态管理.md","React的状态管理","/pages/91d1b5/"],["01.学过的习/31.yarn和npm的对比.md","yarn和npm的对比","/pages/b3a247/"],["01.学过的习/32.websocket的使用.md","websocket的使用","/pages/37e8bf/"]]},{title:"想过的事",collapsable:!0,children:[["02.想过的事/01.随笔.md","想过的事","/pages/9a1e83/"]]},{title:"踩过的坑",collapsable:!0,children:[["03.踩过的坑/01.elementUI使用问题.md","elementUI使用问题","/pages/3fea03/"],["03.踩过的坑/02.待整理的坑 .md","待整理的坑","/pages/eca0d9/"]]}],catalogue:{}},updateBar:{showToArticle:!1},pageStyle:"card",category:!1,tag:!0,archive:!1,author:{name:"小火柴",href:"/img/彦祖.png"},footer:{createYear:2021,copyrightInfo:"X match"}}};var ll=t(92),cl=t(93),ul=t(11);var pl={computed:{$filterPosts(){return this.$site.pages.filter(n=>{const{frontmatter:{pageComponent:e,article:t,home:o}}=n;return!(e||!1===t||!0===o)})},$sortPosts(){return(n=this.$filterPosts).sort((n,e)=>{const t=n.frontmatter.sticky,o=e.frontmatter.sticky;return t&&o?t==o?Object(ul.a)(n,e):t-o:t&&!o?-1:!t&&o?1:Object(ul.a)(n,e)}),n;var n},$sortPostsByDate(){return(n=this.$filterPosts).sort((n,e)=>Object(ul.a)(n,e)),n;var n},$groupPosts(){return function(n){const e={},t={};for(let o=0,r=n.length;o<r;o++){const{frontmatter:{categories:r,tags:a}}=n[o];"array"===Object(ul.n)(r)&&r.forEach(t=>{t&&(e[t]||(e[t]=[]),e[t].push(n[o]))}),"array"===Object(ul.n)(a)&&a.forEach(e=>{e&&(t[e]||(t[e]=[]),t[e].push(n[o]))})}return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags(){return function(n){const e=[],t=[];for(let t in n.categories)e.push({key:t,length:n.categories[t].length});for(let e in n.tags)t.push({key:e,length:n.tags[e].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Ht.component(ll.default),Ht.component(cl.default);function dl(n){return n.toString().padStart(2,"0")}t(235);Ht.component("homepage",()=>t.e(6).then(t.bind(null,323))),Ht.component("PostList",()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,324))),Ht.component("Badge",()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,357))),Ht.component("CodeGroup",()=>Promise.resolve().then(t.bind(null,93))),Ht.component("CodeBlock",()=>Promise.resolve().then(t.bind(null,92)));t(236);var fl=[({Vue:n,options:e,router:t,siteData:o,isServer:r})=>{r||t.afterEach(()=>{var n;n=function(){setTimeout((function(){void 0===window._AdBlockInit&&function(){const n=document.getElementsByClassName("wwads-cn"),e=document.querySelector(".wwads-content");n[0]&&!e&&(n[0].innerHTML="<style>.wwads-horizontal,.wwads-vertical{background-color:#f4f8fa;padding:5px;min-height:120px;margin-top:20px;box-sizing:border-box;border-radius:3px;font-family:sans-serif;display:flex;min-width:150px;position:relative;overflow:hidden;}.wwads-horizontal{flex-wrap:wrap;justify-content:center}.wwads-vertical{flex-direction:column;align-items:center;padding-bottom:32px}.wwads-horizontal a,.wwads-vertical a{text-decoration:none}.wwads-horizontal .wwads-img,.wwads-vertical .wwads-img{margin:5px}.wwads-horizontal .wwads-content,.wwads-vertical .wwads-content{margin:5px}.wwads-horizontal .wwads-content{flex:130px}.wwads-vertical .wwads-content{margin-top:10px}.wwads-horizontal .wwads-text,.wwads-content .wwads-text{font-size:14px;line-height:1.4;color:#0e1011;-webkit-font-smoothing:antialiased}.wwads-horizontal .wwads-poweredby,.wwads-vertical .wwads-poweredby{display:block;font-size:11px;color:#a6b7bf;margin-top:1em}.wwads-vertical .wwads-poweredby{position:absolute;left:10px;bottom:10px}.wwads-horizontal .wwads-poweredby span,.wwads-vertical .wwads-poweredby span{transition:all 0.2s ease-in-out;margin-left:-1em}.wwads-horizontal .wwads-poweredby span:first-child,.wwads-vertical .wwads-poweredby span:first-child{opacity:0}.wwads-horizontal:hover .wwads-poweredby span,.wwads-vertical:hover .wwads-poweredby span{opacity:1;margin-left:0}.wwads-horizontal .wwads-hide,.wwads-vertical .wwads-hide{position:absolute;right:-23px;bottom:-23px;width:46px;height:46px;border-radius:23px;transition:all 0.3s ease-in-out;cursor:pointer;}.wwads-horizontal .wwads-hide:hover,.wwads-vertical .wwads-hide:hover{background:rgb(0 0 0 /0.05)}.wwads-horizontal .wwads-hide svg,.wwads-vertical .wwads-hide svg{position:absolute;left:10px;top:10px;fill:#a6b7bf}.wwads-horizontal .wwads-hide:hover svg,.wwads-vertical .wwads-hide:hover svg{fill:#3E4546}</style><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-img' target='_blank' rel='nofollow'><img src='https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/wwads.2a3pidhlh4ys.webp' width='130'></a><div class='wwads-content'><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-text' target='_blank' rel='nofollow'>为了本站的长期运营，请将我们的网站加入广告拦截器的白名单，感谢您的支持！<span style='color: #11a8cd'>如何添加白名单?</span></a><a href='https://wwads.cn/page/end-user-privacy' class='wwads-poweredby' title='万维广告 ～ 让广告更优雅，且有用' target='_blank'><span>广告</span></a></div><a class='wwads-hide' onclick='parentNode.remove()' title='隐藏广告'><svg xmlns='http://www.w3.org/2000/svg' width='6' height='7'><path d='M.879.672L3 2.793 5.121.672a.5.5 0 11.707.707L3.708 3.5l2.12 2.121a.5.5 0 11-.707.707l-2.12-2.12-2.122 2.12a.5.5 0 11-.707-.707l2.121-2.12L.172 1.378A.5.5 0 01.879.672z'></path></svg></a>")}()}),3e3)},"complete"===document.readyState||"interactive"===document.readyState?setTimeout(n,1):document.addEventListener("DOMContentLoaded",n),setTimeout(()=>{const n=document.querySelector(".page-wwads");if(!n)return;const e=n.querySelector(".wwads-hide");e&&(e.onclick=()=>{n.style.display="none"}),"none"===n.style.display&&(n.style.display="flex")},900)})},({Vue:n,options:e,router:t,siteData:o})=>{o.pages.map(n=>{const{frontmatter:{date:e,author:t}}=n;"string"==typeof e&&"Z"===e.charAt(e.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return`${n.getUTCFullYear()}-${dl(n.getUTCMonth()+1)}-${dl(n.getUTCDate())} ${dl(n.getUTCHours())}:${dl(n.getUTCMinutes())}:${dl(n.getUTCSeconds())}`}(e)),t?n.author=t:o.themeConfig.author&&(n.author=o.themeConfig.author)}),n.mixin(pl)},{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},()=>{"undefined"!=typeof window&&function(n,e,t){function o(n){var t=e.createElement("div");t.className="heart",r.push({el:t,x:n.clientX-5,y:n.clientY-5,scale:1,alpha:1,color:"#11a8cd"}),e.body.appendChild(t)}var r=[];n.requestAnimationFrame=n.requestAnimationFrame||n.webkitRequestAnimationFrame||n.mozRequestAnimationFrame||n.oRequestAnimationFrame||n.msRequestAnimationFrame||function(n){setTimeout(n,1e3/60)},function(n){var t=e.createElement("style");t.type="text/css";try{t.appendChild(e.createTextNode(n))}catch(e){t.styleSheet.cssText=n}e.getElementsByTagName("head")[0].appendChild(t)}(".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}"),function(){var e="function"==typeof n.onclick&&n.onclick;n.onclick=function(n){let t=!0;n.path&&n.path.forEach(n=>{1===n.nodeType&&"string"==typeof n.className&&n.className.indexOf("theme-vdoing-content")>-1&&(t=!1)}),t&&(e&&e(),o(n))}}(),function n(){for(var t=0;t<r.length;t++)r[t].alpha<=0?(e.body.removeChild(r[t].el),r.splice(t,1)):(r[t].y--,r[t].scale+=.004,r[t].alpha-=.013,r[t].el.style.cssText="left:"+r[t].x+"px;top:"+r[t].y+"px;opacity:"+r[t].alpha+";transform:scale("+r[t].scale+","+r[t].scale+") rotate(45deg);background:"+r[t].color+";z-index:99999");requestAnimationFrame(n)}()}(window,document)}],hl=[];class ml extends class{constructor(){this.store=new Ht({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){Ht.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(ml.prototype,{getPageAsyncComponent:ai,getLayoutAsyncComponent:si,getAsyncComponent:ii,getVueComponent:li});var gl={install(n){const e=new ml;n.$vuepress=e,n.prototype.$vuepress=e}};function vl(n,e){const t=e.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===t)}var bl={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return ui("pageKey",e),Ht.component(e)||Ht.component(e,ai(e)),Ht.component(e)?n(e):n("")}},yl={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},xl={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},wl=(t(237),t(238),Object(rl.a)(xl,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),jl={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};Ht.config.productionTip=!1,Ht.use(Ws),Ht.use(gl),Ht.mixin(function(n,e,t=Ht){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const o=new(n(t.$vuepress.$get("siteData"))),r=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(o)),a={};return Object.keys(r).reduce((n,e)=>(e.startsWith("$")&&(n[e]=r[e].get),n),a),{computed:a}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const o in n)"/"===o?t=n[o]:0===this.$page.path.indexOf(o)&&(e=n[o]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,o=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?o?o+" | "+t:t:o||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const o=n[t];if(o.path.toLowerCase()===e.toLowerCase())return o}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},il)),Ht.component("Content",bl),Ht.component("ContentSlotsDistributor",yl),Ht.component("OutboundLink",wl),Ht.component("ClientOnly",jl),Ht.component("Layout",si("Layout")),Ht.component("NotFound",si("NotFound")),Ht.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.2",hash:"a5d45b2"},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:il.routerBase||il.base,t=new Ws({base:e,mode:"history",fallback:!1,routes:sl,scrollBehavior:(n,e,t)=>t||(n.hash?!Ht.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,o)=>{if(vl(n,e.path))o();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";vl(n,t)?o(t):o()}else o();else{const t=e.path+"/",r=e.path+".html";vl(n,r)?o(r):vl(n,t)?o(t):o()}})}(t);const o={};try{await Promise.all(fl.filter(n=>"function"==typeof n).map(e=>e({Vue:Ht,options:o,router:t,siteData:il,isServer:n})))}catch(n){console.error(n)}return{app:new Ht(Object.assign(o,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},hl.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})}]);